diff --git a/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.cpp b/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.cpp
index 651184c03d8e1213884c5a085594da1b2af3e454..b26d6827246ab1e2673d5d27fa29a163f9b4ed6f 100644
--- a/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.cpp
+++ b/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.cpp
@@ -32,20 +32,7 @@ void MenuItemModelNG::Create(const RefPtr<UINode>& customNode)
     auto layoutProps = menuItem->GetLayoutProperty();
     CHECK_NULL_VOID(layoutProps);
     layoutProps->UpdateAlignment(Alignment::CENTER_LEFT);
-    // set border radius
-    auto renderContext = menuItem->GetRenderContext();
-    CHECK_NULL_VOID(renderContext);
-    auto pipeline = PipelineBase::GetCurrentContextSafelyWithCheck();
-    CHECK_NULL_VOID(pipeline);
-    auto theme = pipeline->GetTheme<SelectTheme>();
-    CHECK_NULL_VOID(theme);
-    BorderRadiusProperty border;
-    if (Container::GreatOrEqualAPITargetVersion(PlatformVersion::VERSION_TWELVE)) {
-        border.SetRadius(theme->GetMenuDefaultInnerRadius());
-    } else {
-        border.SetRadius(theme->GetInnerBorderRadius());
-    }
-    renderContext->UpdateBorderRadius(border);
+    UpdateRadius(menuItem);
 
     CHECK_NULL_VOID(customNode);
     menuItem->AddChild(customNode);
@@ -77,20 +64,25 @@ void MenuItemModelNG::Create(const MenuItemProperties& menuItemProps)
     CHECK_NULL_VOID(menuItem);
     stack->Push(menuItem);
 
-    // set border radius
-    auto renderContext = menuItem->GetRenderContext();
-    CHECK_NULL_VOID(renderContext);
+    UpdateRadius(menuItem);
+    DoMountRow(menuItem);
+    auto buildFunc = menuItemProps.buildFunc;
+    auto pattern = menuItem->GetPattern<MenuItemPattern>();
+    CHECK_NULL_VOID(pattern);
+    if (buildFunc.has_value()) {
+        pattern->SetSubBuilder(buildFunc.value_or(nullptr));
+    }
+
+    UpdateMenuProperty(menuItem, menuItemProps);
+}
+
+void MenuItemModelNG::DoMountRow(const RefPtr<NG::FrameNode>& menuItem)
+{
+    CHECK_NULL_VOID(menuItem);
     auto pipeline = PipelineBase::GetCurrentContextSafelyWithCheck();
     CHECK_NULL_VOID(pipeline);
     auto theme = pipeline->GetTheme<SelectTheme>();
     CHECK_NULL_VOID(theme);
-    BorderRadiusProperty border;
-    if (Container::GreatOrEqualAPITargetVersion(PlatformVersion::VERSION_TWELVE)) {
-        border.SetRadius(theme->GetMenuDefaultInnerRadius());
-    } else {
-        border.SetRadius(theme->GetInnerBorderRadius());
-    }
-    renderContext->UpdateBorderRadius(border);
 
     auto leftRow = FrameNode::CreateFrameNode(V2::ROW_ETS_TAG, ElementRegister::GetInstance()->MakeUniqueId(),
         AceType::MakeRefPtr<LinearLayoutPattern>(false));
@@ -112,20 +104,55 @@ void MenuItemModelNG::Create(const MenuItemProperties& menuItemProps)
     rightRowLayoutProps->UpdateSpace(theme->GetIconContentPadding());
 
     rightRow->MountToParent(menuItem);
-    auto buildFunc = menuItemProps.buildFunc;
-    auto pattern = menuItem->GetPattern<MenuItemPattern>();
-    CHECK_NULL_VOID(pattern);
-    if (buildFunc.has_value()) {
-        pattern->SetSubBuilder(buildFunc.value_or(nullptr));
-    }
+}
 
-    UpdateMenuProperty(menuItem, menuItemProps);
+void MenuItemModelNG::UpdateRadius(const RefPtr<NG::FrameNode>& menuItem)
+{
+    CHECK_NULL_VOID(menuItem);
+    // set border radius
+    auto renderContext = menuItem->GetRenderContext();
+    CHECK_NULL_VOID(renderContext);
+    auto pipeline = PipelineBase::GetCurrentContextSafelyWithCheck();
+    CHECK_NULL_VOID(pipeline);
+    auto theme = pipeline->GetTheme<SelectTheme>();
+    CHECK_NULL_VOID(theme);
+    BorderRadiusProperty border;
+    if (Container::GreatOrEqualAPITargetVersion(PlatformVersion::VERSION_TWELVE)) {
+        border.SetRadius(theme->GetMenuDefaultInnerRadius());
+    } else {
+        border.SetRadius(theme->GetInnerBorderRadius());
+    }
+    renderContext->UpdateBorderRadius(border);
 }
 
 void MenuItemModelNG::UpdateMenuProperty(FrameNode* frameNode, const MenuItemProperties& menuItemProps)
 {
     CHECK_NULL_VOID(frameNode);
-    UpdateMenuProperty(frameNode, menuItemProps);
+    auto menuProperty = frameNode->GetLayoutProperty<MenuItemLayoutProperty>();
+    CHECK_NULL_VOID(menuProperty);
+
+    menuProperty->UpdateStartIcon(menuItemProps.startIcon.value_or(ImageSourceInfo("")));
+    menuProperty->UpdateContent(menuItemProps.content);
+    menuProperty->UpdateEndIcon(menuItemProps.endIcon.value_or(ImageSourceInfo("")));
+    menuProperty->UpdateLabel(menuItemProps.labelInfo.value_or(""));
+    menuProperty->SetStartSymbol(menuItemProps.startApply);
+    menuProperty->SetEndSymbol(menuItemProps.endApply);
+}
+
+void MenuItemModelNG::AddRowChild(FrameNode* frameNode, const MenuItemProperties& menuItemProps)
+{
+    CHECK_NULL_VOID(frameNode);
+    auto menuItem = AceType::Claim<FrameNode>(frameNode);
+    CHECK_NULL_VOID(menuItem);
+    
+    UpdateRadius(menuItem);
+    DoMountRow(menuItem);
+    auto buildFunc = menuItemProps.buildFunc;
+    auto pattern = menuItem->GetPattern<MenuItemPattern>();
+    CHECK_NULL_VOID(pattern);
+    if (buildFunc.has_value()) {
+        pattern->SetSubBuilder(buildFunc.value_or(nullptr));
+    }
 }
 
 RefPtr<FrameNode> MenuItemModelNG::CreateFrameNode(int32_t nodeId)
diff --git a/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.h b/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.h
index 625699f67d1e60ccae74306f14ba2c8a7073c726..5d37e7b62c0a112319185b64bd69866c95f28572 100644
--- a/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.h
+++ b/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.h
@@ -57,10 +57,13 @@ public:
     static void SetSelectIconSymbol(FrameNode* frameNode, std::function<void(WeakPtr<NG::FrameNode>)>&& symbolApply);
     static void SetOnChange(FrameNode* frameNode, std::function<void(bool)>&& onChange);
     static void AddChild(FrameNode* frameNode, const RefPtr<NG::UINode>& customNode);
+    static void AddRowChild(FrameNode* frameNode, const MenuItemProperties& menuItemProps);
     static void UpdateMenuProperty(FrameNode* frameNode, const MenuItemProperties& menuItemProps);
     static void SetSelectedChangeEvent(FrameNode* frameNode, std::function<void(bool)>&& selectedChangeEvent);
 private:
     void UpdateMenuProperty(const RefPtr<NG::FrameNode>& menuItem, const MenuItemProperties& menuItemProps);
+    static void DoMountRow(const RefPtr<NG::FrameNode>& menuItem);
+    static void UpdateRadius(const RefPtr<NG::FrameNode>& menuItem);
 };
 } // namespace OHOS::Ace::NG
 #endif // FOUNDATION_ACE_FRAMEWORKS_CORE_COMPONENTS_NG_PATTERNS_MENU_MENU_ITEM_MODEL_NG_H
diff --git a/frameworks/core/interfaces/native/implementation/menu_item_modifier.cpp b/frameworks/core/interfaces/native/implementation/menu_item_modifier.cpp
index b82eaa01ea5e0112f4ce43b7577bb4bf853b2048..144e4f529d0e8073bee5b861733f14f2de035f74 100644
--- a/frameworks/core/interfaces/native/implementation/menu_item_modifier.cpp
+++ b/frameworks/core/interfaces/native/implementation/menu_item_modifier.cpp
@@ -111,6 +111,7 @@ void SetMenuItemOptionsImpl(Ark_NativePointer node,
                 menuItemProps.endApply = endApply ? endApply.value() : nullptr;
             }
             LOGE("MenuItemModifier::SetMenuItemOptionsImpl symbolStart and symbolEnd attributes are stubs.");
+            MenuItemModelNG::AddRowChild(frameNode, menuItemProps);
             MenuItemModelNG::UpdateMenuProperty(frameNode, menuItemProps);
         },
         [frameNode, node](const CustomNodeBuilder& value1) {
            