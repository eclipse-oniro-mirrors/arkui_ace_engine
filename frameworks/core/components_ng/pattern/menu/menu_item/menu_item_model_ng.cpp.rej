diff a/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.cpp b/frameworks/core/components_ng/pattern/menu/menu_item/menu_item_model_ng.cpp	(rejected hunks)
@@ -32,20 +32,7 @@ void MenuItemModelNG::Create(const RefPtr<UINode>& customNode)
     auto layoutProps = menuItem->GetLayoutProperty();
     CHECK_NULL_VOID(layoutProps);
     layoutProps->UpdateAlignment(Alignment::CENTER_LEFT);
-    // set border radius
-    auto renderContext = menuItem->GetRenderContext();
-    CHECK_NULL_VOID(renderContext);
-    auto pipeline = PipelineBase::GetCurrentContextSafelyWithCheck();
-    CHECK_NULL_VOID(pipeline);
-    auto theme = pipeline->GetTheme<SelectTheme>();
-    CHECK_NULL_VOID(theme);
-    BorderRadiusProperty border;
-    if (Container::GreatOrEqualAPITargetVersion(PlatformVersion::VERSION_TWELVE)) {
-        border.SetRadius(theme->GetMenuDefaultInnerRadius());
-    } else {
-        border.SetRadius(theme->GetInnerBorderRadius());
-    }
-    renderContext->UpdateBorderRadius(border);
+    UpdateRadius(menuItem);
 
     CHECK_NULL_VOID(customNode);
     menuItem->AddChild(customNode);
@@ -77,20 +64,25 @@ void MenuItemModelNG::Create(const MenuItemProperties& menuItemProps)
     CHECK_NULL_VOID(menuItem);
     stack->Push(menuItem);
 
-    // set border radius
-    auto renderContext = menuItem->GetRenderContext();
-    CHECK_NULL_VOID(renderContext);
+    UpdateRadius(menuItem);
+    DoMountRow(menuItem);
+    auto buildFunc = menuItemProps.buildFunc;
+    auto pattern = menuItem->GetPattern<MenuItemPattern>();
+    CHECK_NULL_VOID(pattern);
+    if (buildFunc.has_value()) {
+        pattern->SetSubBuilder(buildFunc.value_or(nullptr));
+    }
+
+    UpdateMenuProperty(menuItem, menuItemProps);
+}
+
+void MenuItemModelNG::DoMountRow(const RefPtr<NG::FrameNode>& menuItem)
+{
+    CHECK_NULL_VOID(menuItem);
     auto pipeline = PipelineBase::GetCurrentContextSafelyWithCheck();
     CHECK_NULL_VOID(pipeline);
     auto theme = pipeline->GetTheme<SelectTheme>();
     CHECK_NULL_VOID(theme);
-    BorderRadiusProperty border;
-    if (Container::GreatOrEqualAPITargetVersion(PlatformVersion::VERSION_TWELVE)) {
-        border.SetRadius(theme->GetMenuDefaultInnerRadius());
-    } else {
-        border.SetRadius(theme->GetInnerBorderRadius());
-    }
-    renderContext->UpdateBorderRadius(border);
 
     auto leftRow = FrameNode::CreateFrameNode(V2::ROW_ETS_TAG, ElementRegister::GetInstance()->MakeUniqueId(),
         AceType::MakeRefPtr<LinearLayoutPattern>(false));
@@ -112,20 +104,55 @@ void MenuItemModelNG::Create(const MenuItemProperties& menuItemProps)
     rightRowLayoutProps->UpdateSpace(theme->GetIconContentPadding());
 
     rightRow->MountToParent(menuItem);
-    auto buildFunc = menuItemProps.buildFunc;
-    auto pattern = menuItem->GetPattern<MenuItemPattern>();
-    CHECK_NULL_VOID(pattern);
-    if (buildFunc.has_value()) {
-        pattern->SetSubBuilder(buildFunc.value_or(nullptr));
-    }
+}
 
-    UpdateMenuProperty(menuItem, menuItemProps);
+void MenuItemModelNG::UpdateRadius(const RefPtr<NG::FrameNode>& menuItem)
+{
+    CHECK_NULL_VOID(menuItem);
+    // set border radius
+    auto renderContext = menuItem->GetRenderContext();
+    CHECK_NULL_VOID(renderContext);
+    auto pipeline = PipelineBase::GetCurrentContextSafelyWithCheck();
+    CHECK_NULL_VOID(pipeline);
+    auto theme = pipeline->GetTheme<SelectTheme>();
+    CHECK_NULL_VOID(theme);
+    BorderRadiusProperty border;
+    if (Container::GreatOrEqualAPITargetVersion(PlatformVersion::VERSION_TWELVE)) {
+        border.SetRadius(theme->GetMenuDefaultInnerRadius());
+    } else {
+        border.SetRadius(theme->GetInnerBorderRadius());
+    }
+    renderContext->UpdateBorderRadius(border);
 }
 
 void MenuItemModelNG::UpdateMenuProperty(FrameNode* frameNode, const MenuItemProperties& menuItemProps)
 {
     CHECK_NULL_VOID(frameNode);
-    UpdateMenuProperty(frameNode, menuItemProps);
+    auto menuProperty = frameNode->GetLayoutProperty<MenuItemLayoutProperty>();
+    CHECK_NULL_VOID(menuProperty);
+
+    menuProperty->UpdateStartIcon(menuItemProps.startIcon.value_or(ImageSourceInfo("")));
+    menuProperty->UpdateContent(menuItemProps.content);
+    menuProperty->UpdateEndIcon(menuItemProps.endIcon.value_or(ImageSourceInfo("")));
+    menuProperty->UpdateLabel(menuItemProps.labelInfo.value_or(""));
+    menuProperty->SetStartSymbol(menuItemProps.startApply);
+    menuProperty->SetEndSymbol(menuItemProps.endApply);
+}
+
+void MenuItemModelNG::AddRowChild(FrameNode* frameNode, const MenuItemProperties& menuItemProps)
+{
+    CHECK_NULL_VOID(frameNode);
+    auto menuItem = AceType::Claim<FrameNode>(frameNode);
+    CHECK_NULL_VOID(menuItem);
+    
+    UpdateRadius(menuItem);
+    DoMountRow(menuItem);
+    auto buildFunc = menuItemProps.buildFunc;
+    auto pattern = menuItem->GetPattern<MenuItemPattern>();
+    CHECK_NULL_VOID(pattern);
+    if (buildFunc.has_value()) {
+        pattern->SetSubBuilder(buildFunc.value_or(nullptr));
+    }
 }
 
 RefPtr<FrameNode> MenuItemModelNG::CreateFrameNode(int32_t nodeId)
