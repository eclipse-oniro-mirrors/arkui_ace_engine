diff a/frameworks/core/components_ng/pattern/video/video_pattern.cpp b/frameworks/core/components_ng/pattern/video/video_pattern.cpp	(rejected hunks)
@@ -573,11 +573,10 @@ void VideoPattern::ChangePlayerStatus(bool isPlaying, const PlaybackStatus& stat
             return;
         }
         auto uiTaskExecutor = SingleTaskExecutor::Make(context->GetTaskExecutor(), TaskExecutor::TaskType::UI);
-        Size videoSize = Size(mediaPlayer_->GetVideoWidth(), mediaPlayer_->GetVideoHeight());
         int32_t milliSecondDuration = 0;
         mediaPlayer_->GetDuration(milliSecondDuration);
         auto pos = isSeekingWhenNotPrepared_ ? seekingPosWhenNotPrepared_ : 0.0;
-        OnPrepared(videoSize.Width(), videoSize.Height(), milliSecondDuration / MILLISECONDS_TO_SECONDS, pos, true);
+        OnPrepared(milliSecondDuration / MILLISECONDS_TO_SECONDS, pos, true);
         return;
     }
 
@@ -621,12 +620,16 @@ void VideoPattern::OnResolutionChange() const
     }
     auto host = GetHost();
     CHECK_NULL_VOID(host);
-    SizeF videoSize =
-        SizeF(static_cast<float>(mediaPlayer_->GetVideoWidth()), static_cast<float>(mediaPlayer_->GetVideoHeight()));
     auto videoLayoutProperty = host->GetLayoutProperty<VideoLayoutProperty>();
     CHECK_NULL_VOID(videoLayoutProperty);
-    videoLayoutProperty->UpdateVideoSize(videoSize);
-    host->MarkDirtyNode(PROPERTY_UPDATE_MEASURE);
+    auto preVideoSize = videoLayoutProperty->GetVideoSize();
+    if (!preVideoSize.has_value()) {
+        SizeF videoSize = SizeF(
+            static_cast<float>(mediaPlayer_->GetVideoWidth()),
+            static_cast<float>(mediaPlayer_->GetVideoHeight()));
+        videoLayoutProperty->UpdateVideoSize(videoSize);
+        host->MarkDirtyNode(PROPERTY_UPDATE_MEASURE);
+    }
 }
 
 void VideoPattern::OnStartRenderFrameCb()
