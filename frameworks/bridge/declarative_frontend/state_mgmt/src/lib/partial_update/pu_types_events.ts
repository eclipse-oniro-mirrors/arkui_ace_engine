/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * interface to implement by ObservedProperyAbstractPU 
 * which emits events on being 'set' and 'read'.
 * 
 * all definitions in this file are framework internal
 */
interface PropertyEventsEmitterPU 
{
    /**
     * ObservedPropertyAbstract notify its value has changed
     * emits 'propertyHasChangedPU' event
     */
    notifyPropertryHasChangedPU();

    /**
     * ObservedPropertyAbstract notify its value has been read
     * emits a 'propertyHasBeenReadPU' event
     */
    notifyPropertryHasBeenReadPU();
}

/**
 * Events generated by an ObservedPropertyAbstractPU
 */
interface PropertyEventsReceiverPU<T> 
{
    /**
     * emited by sync peer when it chnages
     * @Prop - SynchedPropertySimple/ObjectOneWay: ObservedPropertyAbstractPU in parent 
     * @Link - SynchedPropertySimple/ObjectTwoWay: ObservedPropertyAbstractPU in parent 
     * 
     * ObservedPropertyAbstractPU given as source has changed ('set')
     * the new value is available via ObservedPropertyAbstractPU.Get() 
     * or ObservedPropertyAbstractPU.Getunmonitored()
     * the propert name is available via ObservedPropertyAbstractPU.Info()
     * @see  ObservedPropertyAbstractPU.notifyPropertryHasChangedPU()
     * @param eventSource The 
     */
    syncPeerHasChanged(eventSource : ObservedPropertyAbstractPU<T>);

    /**
     * ObservedPropertyAbstractPU given as source has been read ('get')
     * @see  ObservedPropertyAbstractPU.notifyPropertryHasBeenReadPU()
     * @param eventSource 
     */
    propertyHasBeenReadPU(eventSource : ObservedPropertyAbstractPU<T>);
}


/**
 * Events generated by an ObservedObject
 */
interface ObservedObjectEventsPUReceiver<C extends Object> 
{
    /**
     * ObservedPropertyAbstractPU given as source has changed ('set')
     * the new value is available via ObservedPropertyAbstractPU.Get() 
     * or ObservedPropertyAbstractPU.Getunmonitored
     * the propert name is available via ObservedPropertyAbstractPU.Info()
     */
    objectPropertyHasChangedPU(eventSource : ObservedObject<C>, changedPropName : string);

    /**
     * ObservedPropertyAbstractPU given as source has been read ('get')
     * @param eventSource 
     */
    objectHasBeenReadPU(eventSource : ObservedObject<C>, readPropName : string);
}
