/*
 * Copyright (c) 2024-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// WARNING! THIS FILE IS AUTO-GENERATED, DO NOT MAKE CHANGES, THEY WILL BE LOST ON NEXT GENERATION!

import { int32, int64, float32 } from "@koalaui/common"
import { nullptr, KPointer, KInt, KBoolean, KStringPtr, runtimeType, RuntimeType, MaterializedBase, toPeerPtr, wrapCallback, NativeBuffer } from "@koalaui/interop"
import { Serializer } from "./peers/Serializer"
import { ComponentBase } from "./../ComponentBase"
import { PeerNode } from "./../PeerNode"
import { ArkUIGeneratedNativeModule, TypeChecker } from "#components"
import { ArkCommonMethodPeer, CommonMethod, ArkCommonMethodComponent, ArkCommonMethodStyle, UICommonMethod } from "./common"
import { CallbackKind } from "./peers/CallbackKind"
import { CallbackTransformer } from "./../CallbackTransformer"
import { memo, memo_stable } from "@koalaui/runtime/annotations"
import { BuilderLambda } from "@koalaui/builderLambda"
import { UICommonBase, AttributeModifier } from "./../handwritten"
import { NodeAttach, remember } from "@koalaui/runtime"
export class ArkGridColPeer extends ArkCommonMethodPeer {
    protected constructor(peerPtr: KPointer, id: int32, name: string = "", flags: int32 = 0) {
        super(peerPtr, id, name, flags)
    }
    public static create(component?: ComponentBase, flags: int32 = 0): ArkGridColPeer {
        const peerId  = PeerNode.nextId()
        const _peerPtr  = ArkUIGeneratedNativeModule._GridCol_construct(peerId, flags)
        const _peer  = new ArkGridColPeer(_peerPtr, peerId, "GridCol", flags)
        component?.setPeer(_peer)
        return _peer
    }
    setGridColOptionsAttribute(option?: GridColOptions): void {
        const thisSerializer : Serializer = Serializer.hold()
        let option_type : int32 = RuntimeType.UNDEFINED
        option_type = runtimeType(option)
        thisSerializer.writeInt8(option_type)
        if ((RuntimeType.UNDEFINED) != (option_type)) {
            const option_value  = option!
            thisSerializer.writeGridColOptions(option_value)
        }
        ArkUIGeneratedNativeModule._GridColInterface_setGridColOptions(this.peer.ptr, thisSerializer.asBuffer(), thisSerializer.length())
        thisSerializer.release()
    }
    spanAttribute(value: number | GridColColumnOption): void {
        const thisSerializer : Serializer = Serializer.hold()
        let value_type : int32 = RuntimeType.UNDEFINED
        value_type = runtimeType(value)
        if (RuntimeType.NUMBER == value_type) {
            thisSerializer.writeInt8(0)
            const value_0  = value as number
            thisSerializer.writeNumber(value_0)
        }
        else if (RuntimeType.OBJECT == value_type) {
            thisSerializer.writeInt8(1)
            const value_1  = value as GridColColumnOption
            thisSerializer.writeGridColColumnOption(value_1)
        }
        ArkUIGeneratedNativeModule._GridColAttribute_span(this.peer.ptr, thisSerializer.asBuffer(), thisSerializer.length())
        thisSerializer.release()
    }
    gridColOffsetAttribute(value: number | GridColColumnOption): void {
        const thisSerializer : Serializer = Serializer.hold()
        let value_type : int32 = RuntimeType.UNDEFINED
        value_type = runtimeType(value)
        if (RuntimeType.NUMBER == value_type) {
            thisSerializer.writeInt8(0)
            const value_0  = value as number
            thisSerializer.writeNumber(value_0)
        }
        else if (RuntimeType.OBJECT == value_type) {
            thisSerializer.writeInt8(1)
            const value_1  = value as GridColColumnOption
            thisSerializer.writeGridColColumnOption(value_1)
        }
        ArkUIGeneratedNativeModule._GridColAttribute_gridColOffset(this.peer.ptr, thisSerializer.asBuffer(), thisSerializer.length())
        thisSerializer.release()
    }
    orderAttribute(value: number | GridColColumnOption): void {
        const thisSerializer : Serializer = Serializer.hold()
        let value_type : int32 = RuntimeType.UNDEFINED
        value_type = runtimeType(value)
        if (RuntimeType.NUMBER == value_type) {
            thisSerializer.writeInt8(0)
            const value_0  = value as number
            thisSerializer.writeNumber(value_0)
        }
        else if (RuntimeType.OBJECT == value_type) {
            thisSerializer.writeInt8(1)
            const value_1  = value as GridColColumnOption
            thisSerializer.writeGridColColumnOption(value_1)
        }
        ArkUIGeneratedNativeModule._GridColAttribute_order(this.peer.ptr, thisSerializer.asBuffer(), thisSerializer.length())
        thisSerializer.release()
    }
}
export interface GridColColumnOption {
    xs?: number;
    sm?: number;
    md?: number;
    lg?: number;
    xl?: number;
    xxl?: number;
}
export interface GridColOptions {
    span?: number | GridColColumnOption;
    offset?: number | GridColColumnOption;
    order?: number | GridColColumnOption;
}

export interface GridColAttribute extends CommonMethod {
    span(value: number | GridColColumnOption): this
    gridColOffset(value: number | GridColColumnOption): this
    order(value: number | GridColColumnOption): this
    attributeModifier(value: AttributeModifier<GridColAttribute> | AttributeModifier<CommonMethod> | undefined): this
}
export interface UIGridColAttribute extends UICommonMethod {
    @memo
    span(value: number | GridColColumnOption): this
    @memo
    gridColOffset(value: number | GridColColumnOption): this
    @memo
    order(value: number | GridColColumnOption): this
    @memo
    attributeModifier(value: AttributeModifier<GridColAttribute> | AttributeModifier<CommonMethod> | undefined): this
}
export class ArkGridColStyle extends ArkCommonMethodStyle implements GridColAttribute {
    span_value?: number | GridColColumnOption
    gridColOffset_value?: number | GridColColumnOption
    order_value?: number | GridColColumnOption
    public span(value: number | GridColColumnOption): this {
        return this
    }
    public gridColOffset(value: number | GridColColumnOption): this {
        return this
    }
    public order(value: number | GridColColumnOption): this {
        return this
    }
    public attributeModifier(value: AttributeModifier<GridColAttribute> | AttributeModifier<CommonMethod> | undefined): this {
        throw new Error("Not implemented")
    }
}
@memo_stable
export class ArkGridColComponent extends ArkCommonMethodComponent implements UIGridColAttribute {
    getPeer(): ArkGridColPeer {
        return (this.peer as ArkGridColPeer)
    }
    @memo
    public setGridColOptions(option?: GridColOptions): this {
        if (this.checkPriority("setGridColOptions")) {
            const option_casted = option as (GridColOptions | undefined)
            this.getPeer()?.setGridColOptionsAttribute(option_casted)
            return this
        }
        return this
    }
    @memo
    public span(value: number | GridColColumnOption): this {
        if (this.checkPriority("span")) {
            const value_casted = value as (number | GridColColumnOption)
            this.getPeer()?.spanAttribute(value_casted)
            return this
        }
        return this
    }
    @memo
    public gridColOffset(value: number | GridColColumnOption): this {
        if (this.checkPriority("gridColOffset")) {
            const value_casted = value as (number | GridColColumnOption)
            this.getPeer()?.gridColOffsetAttribute(value_casted)
            return this
        }
        return this
    }
    @memo
    public order(value: number | GridColColumnOption): this {
        if (this.checkPriority("order")) {
            const value_casted = value as (number | GridColColumnOption)
            this.getPeer()?.orderAttribute(value_casted)
            return this
        }
        return this
    }
    @memo
    public attributeModifier(value: AttributeModifier<GridColAttribute> | AttributeModifier<CommonMethod> | undefined): this {
        console.log("attributeModifier() not implemented")
        return this
    }
    public applyAttributesFinish(): void {
        // we call this function outside of class, so need to make it public
        super.applyAttributesFinish()
    }
}
@memo
@BuilderLambda("GridCol")
export function GridCol(
    option?: GridColOptions,
    @memo
    content_?: () => void,
): GridColAttribute {
    throw new Error("Not implemented")
}

@memo
export function GridCol(
    @memo
    style: ((attributes: UIGridColAttribute) => void) | undefined,
    option?: GridColOptions,
    @memo
    content_?: () => void,
): void {
    const receiver = remember<ArkGridColComponent>((): ArkGridColComponent => {
        return new ArkGridColComponent()
    })
    NodeAttach<ArkGridColPeer>((): ArkGridColPeer => ArkGridColPeer.create(receiver), (_: ArkGridColPeer): void => {
        receiver.setGridColOptions(option)
        style?.(receiver)
        content_?.()
        receiver.applyAttributesFinish()
    })
}
