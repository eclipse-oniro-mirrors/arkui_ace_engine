/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
#include <vector>
#include <string>

#define KOALA_INTEROP_MODULE ArkUIGeneratedNativeModule
#include "common-interop.h"
#include "arkoala_api_generated.h"
#include "Serializers.h"
#include "callbacks.h"

const OH_AnyAPI* GetAnyImpl(int kind, int version, std::string* result = nullptr);

static const GENERATED_ArkUIFullNodeAPI* GetFullImpl() {
    return reinterpret_cast<const GENERATED_ArkUIFullNodeAPI*>(
        GetAnyImpl(static_cast<int>(GENERATED_Ark_APIVariantKind::GENERATED_FULL),
        GENERATED_ARKUI_FULL_API_VERSION, nullptr));
}

static const GENERATED_ArkUINodeModifiers* GetNodeModifiers() {
    return GetFullImpl()->getNodeModifiers();
}

static const GENERATED_ArkUIAccessors* GetAccessors() {
    return GetFullImpl()->getAccessors();
}

Ark_NativePointer impl_AlphabetIndexer_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getAlphabetIndexerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(AlphabetIndexer_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_AlphabetIndexerInterface_setAlphabetIndexerOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_AlphabetIndexerOptions optionsValueTemp = AlphabetIndexerOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setAlphabetIndexerOptions(self, static_cast<Ark_AlphabetIndexerOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerInterface_setAlphabetIndexerOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setSelectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setSelectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setSelectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setSelectedBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setSelectedBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setSelectedBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupBackground(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupBackground(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupBackground, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupSelectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupSelectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupSelectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupUnselectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupUnselectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupUnselectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupItemBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupItemBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupItemBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setUsingPopup(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setUsingPopup(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setUsingPopup, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setSelectedFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setSelectedFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setSelectedFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupItemFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupItemFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupItemFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setItemSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_F64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_F64 valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = thisDeserializer.readFloat64();
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_F64>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_F64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setItemSize(self, static_cast<Opt_Union_String_F64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setItemSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setOnSelect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnAlphabetIndexerSelectCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnAlphabetIndexerSelectCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnAlphabetIndexerSelectCallback))))};
        }
        Opt_OnAlphabetIndexerSelectCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setOnSelect(self, static_cast<Opt_OnAlphabetIndexerSelectCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setOnSelect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setOnRequestPopupData(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnAlphabetIndexerRequestPopupDataCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Callback_Array_String_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnAlphabetIndexerRequestPopupDataCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Callback_Array_String_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnAlphabetIndexerRequestPopupDataCallback))))};
        }
        Opt_OnAlphabetIndexerRequestPopupDataCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setOnRequestPopupData(self, static_cast<Opt_OnAlphabetIndexerRequestPopupDataCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setOnRequestPopupData, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setOnPopupSelect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnAlphabetIndexerPopupSelectCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnAlphabetIndexerPopupSelectCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnAlphabetIndexerPopupSelectCallback))))};
        }
        Opt_OnAlphabetIndexerPopupSelectCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setOnPopupSelect(self, static_cast<Opt_OnAlphabetIndexerPopupSelectCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setOnPopupSelect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_I32_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setSelected(self, static_cast<Opt_Union_I32_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Position valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Position_serializer::read(thisDeserializer);
        }
        Opt_Position valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupPosition(self, static_cast<Opt_Position*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setAutoCollapse(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setAutoCollapse(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setAutoCollapse, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupItemBorderRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupItemBorderRadius(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupItemBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setItemBorderRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setItemBorderRadius(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setItemBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupBackgroundBlurStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BlurStyle>(thisDeserializer.readInt32());
        }
        Opt_BlurStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupBackgroundBlurStyle(self, static_cast<Opt_BlurStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupBackgroundBlurStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setPopupTitleBackground(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setPopupTitleBackground(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setPopupTitleBackground, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AlphabetIndexerAttribute_setAlignStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_IndexerAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_IndexerAlign>(thisDeserializer.readInt32());
        }
        Opt_IndexerAlign valueValueTemp = valueValueTempTmpBuf;;
        const auto offsetValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length offsetValueTempTmpBuf = {};
        offsetValueTempTmpBuf.tag = offsetValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((offsetValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 offsetValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length offsetValueTempTmpBuf_ = {};
            offsetValueTempTmpBuf_.selector = offsetValueTempTmpBuf_UnionSelector;
            if (offsetValueTempTmpBuf_UnionSelector == 0) {
                offsetValueTempTmpBuf_.selector = 0;
                offsetValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (offsetValueTempTmpBuf_UnionSelector == 1) {
                offsetValueTempTmpBuf_.selector = 1;
                offsetValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (offsetValueTempTmpBuf_UnionSelector == 2) {
                offsetValueTempTmpBuf_.selector = 2;
                offsetValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for offsetValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            offsetValueTempTmpBuf.value = static_cast<Ark_Length>(offsetValueTempTmpBuf_);
        }
        Opt_Length offsetValueTemp = offsetValueTempTmpBuf;;
        GetNodeModifiers()->getAlphabetIndexerModifier()->setAlignStyle(self, static_cast<Opt_IndexerAlign*>(&valueValueTemp), static_cast<Opt_Length*>(&offsetValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AlphabetIndexerAttribute_setAlignStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Animator_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getAnimatorModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Animator_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_AnimatorInterface_setAnimatorOptions(Ark_NativePointer thisPtr, const KStringPtr& value) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getAnimatorModifier()->setAnimatorOptions(self, (const Ark_String*) (&value));
}
KOALA_INTEROP_V2(AnimatorInterface_setAnimatorOptions, Ark_NativePointer, KStringPtr)
void impl_AnimatorAttribute_setState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AnimationStatus valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AnimationStatus>(thisDeserializer.readInt32());
        }
        Opt_AnimationStatus valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setState(self, static_cast<Opt_AnimationStatus*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setState, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setDuration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setDuration(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setDuration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setCurve(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_curves_Curve valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_curves_Curve>(thisDeserializer.readInt32());
        }
        Opt_curves_Curve valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setCurve(self, static_cast<Opt_curves_Curve*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setCurve, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setDelay(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setDelay(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setDelay, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setFillMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FillMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FillMode>(thisDeserializer.readInt32());
        }
        Opt_FillMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setFillMode(self, static_cast<Opt_FillMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setFillMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setIterations(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setIterations(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setIterations, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setPlayMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PlayMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_PlayMode>(thisDeserializer.readInt32());
        }
        Opt_PlayMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setPlayMode(self, static_cast<Opt_PlayMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setPlayMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setMotion(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_SpringMotion_FrictionMotion_ScrollMotion valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_SpringMotion_FrictionMotion_ScrollMotion valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_SpringMotion>(SpringMotion_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FrictionMotion>(FrictionMotion_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_ScrollMotion>(ScrollMotion_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_SpringMotion_FrictionMotion_ScrollMotion>(valueValueTempTmpBuf_);
        }
        Opt_Union_SpringMotion_FrictionMotion_ScrollMotion valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setMotion(self, static_cast<Opt_Union_SpringMotion_FrictionMotion_ScrollMotion*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setMotion, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setOnStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setOnStart(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setOnStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setOnPause(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setOnPause(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setOnPause, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setOnRepeat(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setOnRepeat(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setOnRepeat, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setOnCancel(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setOnCancel(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setOnCancel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setOnFinish(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setOnFinish(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setOnFinish, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimatorAttribute_setOnFrame(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Number_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Number value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Number_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Number value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Number_Void))))};
        }
        Opt_Callback_Number_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getAnimatorModifier()->setOnFrame(self, static_cast<Opt_Callback_Number_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimatorAttribute_setOnFrame, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Badge_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getBadgeModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Badge_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_BadgeInterface_setBadgeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_BadgeParamWithNumber_BadgeParamWithString valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = BadgeParamWithNumber_serializer::read(thisDeserializer);
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = BadgeParamWithString_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_BadgeParamWithNumber_BadgeParamWithString valueValueTemp = static_cast<Ark_Union_BadgeParamWithNumber_BadgeParamWithString>(valueValueTempTmpBuf);;
        GetNodeModifiers()->getBadgeModifier()->setBadgeOptions(self, static_cast<Ark_Union_BadgeParamWithNumber_BadgeParamWithString*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BadgeInterface_setBadgeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Blank_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getBlankModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Blank_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_BlankInterface_setBlankOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto minValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String minValueTempTmpBuf = {};
        minValueTempTmpBuf.tag = minValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((minValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 minValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String minValueTempTmpBuf_ = {};
            minValueTempTmpBuf_.selector = minValueTempTmpBuf_UnionSelector;
            if (minValueTempTmpBuf_UnionSelector == 0) {
                minValueTempTmpBuf_.selector = 0;
                minValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (minValueTempTmpBuf_UnionSelector == 1) {
                minValueTempTmpBuf_.selector = 1;
                minValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for minValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            minValueTempTmpBuf.value = static_cast<Ark_Union_Number_String>(minValueTempTmpBuf_);
        }
        Opt_Union_Number_String minValueTemp = minValueTempTmpBuf;;
        GetNodeModifiers()->getBlankModifier()->setBlankOptions(self, static_cast<Opt_Union_Number_String*>(&minValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BlankInterface_setBlankOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_BlankAttribute_setColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getBlankModifier()->setColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BlankAttribute_setColor, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Button_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getButtonModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Button_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ButtonInterface_setButtonOptions0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 labelValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceStr labelValueTempTmpBuf = {};
        labelValueTempTmpBuf.selector = labelValueTempTmpBufUnionSelector;
        if (labelValueTempTmpBufUnionSelector == 0) {
            labelValueTempTmpBuf.selector = 0;
            labelValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (labelValueTempTmpBufUnionSelector == 1) {
            labelValueTempTmpBuf.selector = 1;
            labelValueTempTmpBuf.value1 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for labelValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceStr labelValueTemp = static_cast<Ark_ResourceStr>(labelValueTempTmpBuf);;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ButtonOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ButtonOptions_serializer::read(thisDeserializer);
        }
        Opt_ButtonOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setButtonOptions0(self, static_cast<Ark_ResourceStr*>(&labelValueTemp), static_cast<Opt_ButtonOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonInterface_setButtonOptions0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonInterface_setButtonOptions1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ButtonOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ButtonOptions_serializer::read(thisDeserializer);
        }
        Opt_ButtonOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setButtonOptions1(self, static_cast<Opt_ButtonOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonInterface_setButtonOptions1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ButtonType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ButtonType>(thisDeserializer.readInt32());
        }
        Opt_ButtonType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setType(self, static_cast<Opt_ButtonType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setStateEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setStateEffect(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setStateEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setButtonStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ButtonStyleMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ButtonStyleMode>(thisDeserializer.readInt32());
        }
        Opt_ButtonStyleMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setButtonStyle(self, static_cast<Opt_ButtonStyleMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setButtonStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setControlSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ControlSize valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ControlSize>(thisDeserializer.readInt32());
        }
        Opt_ControlSize valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setControlSize(self, static_cast<Opt_ControlSize*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setControlSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setRole(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ButtonRole valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ButtonRole>(thisDeserializer.readInt32());
        }
        Opt_ButtonRole valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setRole(self, static_cast<Opt_ButtonRole*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setRole, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setFontSize(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setFontFamily(self, static_cast<Opt_Union_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setLabelStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ButtonLabelStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ButtonLabelStyle_serializer::read(thisDeserializer);
        }
        Opt_ButtonLabelStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setLabelStyle(self, static_cast<Opt_ButtonLabelStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setLabelStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setMinFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setMinFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setMinFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ButtonAttribute_setMaxFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getButtonModifier()->setMaxFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ButtonAttribute_setMaxFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CalendarPicker_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCalendarPickerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(CalendarPicker_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CalendarPickerInterface_setCalendarPickerOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CalendarOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = CalendarOptions_serializer::read(thisDeserializer);
        }
        Opt_CalendarOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCalendarPickerModifier()->setCalendarPickerOptions(self, static_cast<Opt_CalendarOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CalendarPickerInterface_setCalendarPickerOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CalendarPickerAttribute_setTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCalendarPickerModifier()->setTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CalendarPickerAttribute_setTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CalendarPickerAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Date_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Date value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Date_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Date value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Date_Void))))};
        }
        Opt_Callback_Date_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCalendarPickerModifier()->setOnChange(self, static_cast<Opt_Callback_Date_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CalendarPickerAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CalendarPickerAttribute_setMarkToday(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCalendarPickerModifier()->setMarkToday(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CalendarPickerAttribute_setMarkToday, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CalendarPickerAttribute_setEdgeAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto alignTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CalendarAlign alignTypeValueTempTmpBuf = {};
        alignTypeValueTempTmpBuf.tag = alignTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((alignTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            alignTypeValueTempTmpBuf.value = static_cast<Ark_CalendarAlign>(thisDeserializer.readInt32());
        }
        Opt_CalendarAlign alignTypeValueTemp = alignTypeValueTempTmpBuf;;
        const auto offsetValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Offset offsetValueTempTmpBuf = {};
        offsetValueTempTmpBuf.tag = offsetValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((offsetValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            offsetValueTempTmpBuf.value = Offset_serializer::read(thisDeserializer);
        }
        Opt_Offset offsetValueTemp = offsetValueTempTmpBuf;;
        GetNodeModifiers()->getCalendarPickerModifier()->setEdgeAlign(self, static_cast<Opt_CalendarAlign*>(&alignTypeValueTemp), static_cast<Opt_Offset*>(&offsetValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CalendarPickerAttribute_setEdgeAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Canvas_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCanvasModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Canvas_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CanvasInterface_setCanvasOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto contextValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_CanvasRenderingContext2D_DrawingRenderingContext contextValueTempTmpBuf = {};
        contextValueTempTmpBuf.tag = contextValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contextValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 contextValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_CanvasRenderingContext2D_DrawingRenderingContext contextValueTempTmpBuf_ = {};
            contextValueTempTmpBuf_.selector = contextValueTempTmpBuf_UnionSelector;
            if (contextValueTempTmpBuf_UnionSelector == 0) {
                contextValueTempTmpBuf_.selector = 0;
                contextValueTempTmpBuf_.value0 = static_cast<Ark_CanvasRenderingContext2D>(CanvasRenderingContext2D_serializer::read(thisDeserializer));
            } else if (contextValueTempTmpBuf_UnionSelector == 1) {
                contextValueTempTmpBuf_.selector = 1;
                contextValueTempTmpBuf_.value1 = static_cast<Ark_DrawingRenderingContext>(DrawingRenderingContext_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for contextValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            contextValueTempTmpBuf.value = static_cast<Ark_Union_CanvasRenderingContext2D_DrawingRenderingContext>(contextValueTempTmpBuf_);
        }
        Opt_Union_CanvasRenderingContext2D_DrawingRenderingContext contextValueTemp = contextValueTempTmpBuf;;
        const auto imageAIOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageAIOptions imageAIOptionsValueTempTmpBuf = {};
        imageAIOptionsValueTempTmpBuf.tag = imageAIOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((imageAIOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            imageAIOptionsValueTempTmpBuf.value = ImageAIOptions_serializer::read(thisDeserializer);
        }
        Opt_ImageAIOptions imageAIOptionsValueTemp = imageAIOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getCanvasModifier()->setCanvasOptions(self, static_cast<Opt_Union_CanvasRenderingContext2D_DrawingRenderingContext*>(&contextValueTemp), static_cast<Opt_ImageAIOptions*>(&imageAIOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasInterface_setCanvasOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasAttribute_setOnReady(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCanvasModifier()->setOnReady(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasAttribute_setOnReady, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasAttribute_setEnableAnalyzer(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCanvasModifier()->setEnableAnalyzer(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasAttribute_setEnableAnalyzer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Checkbox_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCheckboxModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Checkbox_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CheckboxInterface_setCheckboxOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CheckboxOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = CheckboxOptions_serializer::read(thisDeserializer);
        }
        Opt_CheckboxOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxModifier()->setCheckboxOptions(self, static_cast<Opt_CheckboxOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxInterface_setCheckboxOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxAttribute_setSelect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxModifier()->setSelect(self, static_cast<Opt_Union_Boolean_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxAttribute_setSelect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxAttribute_setSelectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxModifier()->setSelectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxAttribute_setSelectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxAttribute_setShape(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CheckBoxShape valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CheckBoxShape>(thisDeserializer.readInt32());
        }
        Opt_CheckBoxShape valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxModifier()->setShape(self, static_cast<Opt_CheckBoxShape*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxAttribute_setShape, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxAttribute_setUnselectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxModifier()->setUnselectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxAttribute_setUnselectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxAttribute_setMark(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MarkStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = MarkStyle_serializer::read(thisDeserializer);
        }
        Opt_MarkStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxModifier()->setMark(self, static_cast<Opt_MarkStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxAttribute_setMark, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnCheckboxChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnCheckboxChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnCheckboxChangeCallback))))};
        }
        Opt_OnCheckboxChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxModifier()->setOnChange(self, static_cast<Opt_OnCheckboxChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CheckboxGroup_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCheckboxGroupModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(CheckboxGroup_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CheckboxGroupInterface_setCheckboxGroupOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CheckboxGroupOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = CheckboxGroupOptions_serializer::read(thisDeserializer);
        }
        Opt_CheckboxGroupOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxGroupModifier()->setCheckboxGroupOptions(self, static_cast<Opt_CheckboxGroupOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxGroupInterface_setCheckboxGroupOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxGroupAttribute_setSelectAll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxGroupModifier()->setSelectAll(self, static_cast<Opt_Union_Boolean_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxGroupAttribute_setSelectAll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxGroupAttribute_setSelectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxGroupModifier()->setSelectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxGroupAttribute_setSelectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxGroupAttribute_setUnselectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxGroupModifier()->setUnselectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxGroupAttribute_setUnselectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxGroupAttribute_setMark(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MarkStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = MarkStyle_serializer::read(thisDeserializer);
        }
        Opt_MarkStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxGroupModifier()->setMark(self, static_cast<Opt_MarkStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxGroupAttribute_setMark, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxGroupAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnCheckboxGroupChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_CheckboxGroupResult value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnCheckboxGroupChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_CheckboxGroupResult value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnCheckboxGroupChangeCallback))))};
        }
        Opt_OnCheckboxGroupChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxGroupModifier()->setOnChange(self, static_cast<Opt_OnCheckboxGroupChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxGroupAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CheckboxGroupAttribute_setCheckboxShape(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CheckBoxShape valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CheckBoxShape>(thisDeserializer.readInt32());
        }
        Opt_CheckBoxShape valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCheckboxGroupModifier()->setCheckboxShape(self, static_cast<Opt_CheckBoxShape*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CheckboxGroupAttribute_setCheckboxShape, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Circle_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCircleModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Circle_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CircleInterface_setCircleOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CircleOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = CircleOptions_serializer::read(thisDeserializer);
        }
        Opt_CircleOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCircleModifier()->setCircleOptions(self, static_cast<Opt_CircleOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CircleInterface_setCircleOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Column_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getColumnModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Column_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ColumnInterface_setColumnOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ColumnOptions_ColumnOptionsV2 optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 optionsValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ColumnOptions_ColumnOptionsV2 optionsValueTempTmpBuf_ = {};
            optionsValueTempTmpBuf_.selector = optionsValueTempTmpBuf_UnionSelector;
            if (optionsValueTempTmpBuf_UnionSelector == 0) {
                optionsValueTempTmpBuf_.selector = 0;
                optionsValueTempTmpBuf_.value0 = ColumnOptions_serializer::read(thisDeserializer);
            } else if (optionsValueTempTmpBuf_UnionSelector == 1) {
                optionsValueTempTmpBuf_.selector = 1;
                optionsValueTempTmpBuf_.value1 = ColumnOptionsV2_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for optionsValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            optionsValueTempTmpBuf.value = static_cast<Ark_Union_ColumnOptions_ColumnOptionsV2>(optionsValueTempTmpBuf_);
        }
        Opt_Union_ColumnOptions_ColumnOptionsV2 optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getColumnModifier()->setColumnOptions(self, static_cast<Opt_Union_ColumnOptions_ColumnOptionsV2*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ColumnInterface_setColumnOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ColumnAttribute_setAlignItems(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_HorizontalAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_HorizontalAlign>(thisDeserializer.readInt32());
        }
        Opt_HorizontalAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getColumnModifier()->setAlignItems(self, static_cast<Opt_HorizontalAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ColumnAttribute_setAlignItems, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ColumnAttribute_setJustifyContent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FlexAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FlexAlign>(thisDeserializer.readInt32());
        }
        Opt_FlexAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getColumnModifier()->setJustifyContent(self, static_cast<Opt_FlexAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ColumnAttribute_setJustifyContent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ColumnAttribute_setReverse(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getColumnModifier()->setReverse(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ColumnAttribute_setReverse, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ColumnSplit_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getColumnSplitModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ColumnSplit_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ColumnSplitInterface_setColumnSplitOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getColumnSplitModifier()->setColumnSplitOptions(self);
}
KOALA_INTEROP_DIRECT_V1(ColumnSplitInterface_setColumnSplitOptions, Ark_NativePointer)
void impl_ColumnSplitAttribute_setResizeable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getColumnSplitModifier()->setResizeable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ColumnSplitAttribute_setResizeable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ColumnSplitAttribute_setDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ColumnSplitDividerStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ColumnSplitDividerStyle_serializer::read(thisDeserializer);
        }
        Opt_ColumnSplitDividerStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getColumnSplitModifier()->setDivider(self, static_cast<Opt_ColumnSplitDividerStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ColumnSplitAttribute_setDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CommonMethod_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCommonMethodModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(CommonMethod_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CommonMethod_setWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_LayoutPolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_LayoutPolicy valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LayoutPolicy>(LayoutPolicy_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_LayoutPolicy>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_LayoutPolicy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setWidth(self, static_cast<Opt_Union_Length_LayoutPolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_LayoutPolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_LayoutPolicy valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LayoutPolicy>(LayoutPolicy_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_LayoutPolicy>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_LayoutPolicy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setHeight(self, static_cast<Opt_Union_Length_LayoutPolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setResponseRegion(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_Rectangle_Rectangle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_Rectangle_Rectangle valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_Rectangle valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = Rectangle_serializer::read(thisDeserializer);
                }
                valueValueTempTmpBuf_.value0 = valueValueTempTmpBuf_BufU;
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Rectangle_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Array_Rectangle_Rectangle>(valueValueTempTmpBuf_);
        }
        Opt_Union_Array_Rectangle_Rectangle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setResponseRegion(self, static_cast<Opt_Union_Array_Rectangle_Rectangle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setResponseRegion, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMouseResponseRegion(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_Rectangle_Rectangle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_Rectangle_Rectangle valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_Rectangle valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = Rectangle_serializer::read(thisDeserializer);
                }
                valueValueTempTmpBuf_.value0 = valueValueTempTmpBuf_BufU;
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Rectangle_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Array_Rectangle_Rectangle>(valueValueTempTmpBuf_);
        }
        Opt_Union_Array_Rectangle_Rectangle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMouseResponseRegion(self, static_cast<Opt_Union_Array_Rectangle_Rectangle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMouseResponseRegion, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SizeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SizeOptions_serializer::read(thisDeserializer);
        }
        Opt_SizeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setSize(self, static_cast<Opt_SizeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setConstraintSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ConstraintSizeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ConstraintSizeOptions_serializer::read(thisDeserializer);
        }
        Opt_ConstraintSizeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setConstraintSize(self, static_cast<Opt_ConstraintSizeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setConstraintSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setHitTestBehavior(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_HitTestMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_HitTestMode>(thisDeserializer.readInt32());
        }
        Opt_HitTestMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setHitTestBehavior(self, static_cast<Opt_HitTestMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setHitTestBehavior, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnChildTouchTest(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Array_TouchTestInfo_TouchResult valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Array_TouchTestInfo value, const Callback_TouchResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Array_TouchTestInfo_TouchResult)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Array_TouchTestInfo value, const Callback_TouchResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Array_TouchTestInfo_TouchResult))))};
        }
        Opt_Callback_Array_TouchTestInfo_TouchResult valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnChildTouchTest(self, static_cast<Opt_Callback_Array_TouchTestInfo_TouchResult*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnChildTouchTest, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setLayoutWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setLayoutWeight(self, static_cast<Opt_Union_Number_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setLayoutWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setChainWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ChainWeightOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ChainWeightOptions_serializer::read(thisDeserializer);
        }
        Opt_ChainWeightOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setChainWeight(self, static_cast<Opt_ChainWeightOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setChainWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setPadding(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Padding_Length_LocalizedPadding valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Padding_Length_LocalizedPadding valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Padding_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedPadding_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Padding_Length_LocalizedPadding>(valueValueTempTmpBuf_);
        }
        Opt_Union_Padding_Length_LocalizedPadding valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setPadding(self, static_cast<Opt_Union_Padding_Length_LocalizedPadding*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setPadding, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSafeAreaPadding(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Padding_LengthMetrics_LocalizedPadding valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Padding_LengthMetrics_LocalizedPadding valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Padding_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LengthMetrics>(LengthMetrics_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedPadding_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Padding_LengthMetrics_LocalizedPadding>(valueValueTempTmpBuf_);
        }
        Opt_Union_Padding_LengthMetrics_LocalizedPadding valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setSafeAreaPadding(self, static_cast<Opt_Union_Padding_LengthMetrics_LocalizedPadding*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setSafeAreaPadding, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMargin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Margin_Length_LocalizedMargin valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Margin_Length_LocalizedMargin valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Padding_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedPadding_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Margin_Length_LocalizedMargin>(valueValueTempTmpBuf_);
        }
        Opt_Union_Margin_Length_LocalizedMargin valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMargin(self, static_cast<Opt_Union_Margin_Length_LocalizedMargin*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMargin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_ColorMetrics valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_ColorMetrics valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_ColorMetrics>(ColorMetrics_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_ColorMetrics>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_ColorMetrics valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundColor(self, static_cast<Opt_Union_ResourceColor_ColorMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setPixelRound(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PixelRoundPolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PixelRoundPolicy_serializer::read(thisDeserializer);
        }
        Opt_PixelRoundPolicy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setPixelRound(self, static_cast<Opt_PixelRoundPolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setPixelRound, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundImageSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_SizeOptions_ImageSize valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_SizeOptions_ImageSize valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = SizeOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_ImageSize>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_SizeOptions_ImageSize>(valueValueTempTmpBuf_);
        }
        Opt_Union_SizeOptions_ImageSize valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundImageSize(self, static_cast<Opt_Union_SizeOptions_ImageSize*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundImageSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundImagePosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Position_Alignment valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Position_Alignment valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Position_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Alignment>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Position_Alignment>(valueValueTempTmpBuf_);
        }
        Opt_Union_Position_Alignment valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundImagePosition(self, static_cast<Opt_Union_Position_Alignment*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundImagePosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundEffect0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundEffectOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = BackgroundEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundEffectOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundEffect0(self, static_cast<Opt_BackgroundEffectOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundEffect0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundImageResizable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResizableOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ResizableOptions_serializer::read(thisDeserializer);
        }
        Opt_ResizableOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundImageResizable(self, static_cast<Opt_ResizableOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundImageResizable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setForegroundEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ForegroundEffectOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ForegroundEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_ForegroundEffectOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setForegroundEffect(self, static_cast<Opt_ForegroundEffectOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setForegroundEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setVisualEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_uiEffect_VisualEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_uiEffect_VisualEffect>(uiEffect_VisualEffect_serializer::read(thisDeserializer));
        }
        Opt_uiEffect_VisualEffect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setVisualEffect(self, static_cast<Opt_uiEffect_VisualEffect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setVisualEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_uiEffect_Filter valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_uiEffect_Filter>(uiEffect_Filter_serializer::read(thisDeserializer));
        }
        Opt_uiEffect_Filter valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundFilter(self, static_cast<Opt_uiEffect_Filter*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setForegroundFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_uiEffect_Filter valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_uiEffect_Filter>(uiEffect_Filter_serializer::read(thisDeserializer));
        }
        Opt_uiEffect_Filter valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setForegroundFilter(self, static_cast<Opt_uiEffect_Filter*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setForegroundFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setCompositingFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_uiEffect_Filter valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_uiEffect_Filter>(uiEffect_Filter_serializer::read(thisDeserializer));
        }
        Opt_uiEffect_Filter valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setCompositingFilter(self, static_cast<Opt_uiEffect_Filter*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setCompositingFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOpacity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOpacity(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOpacity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBorder(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BorderOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = BorderOptions_serializer::read(thisDeserializer);
        }
        Opt_BorderOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBorder(self, static_cast<Opt_BorderOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBorder, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBorderStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_BorderStyle_EdgeStyles valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_BorderStyle_EdgeStyles valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_BorderStyle>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeStyles_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_BorderStyle_EdgeStyles>(valueValueTempTmpBuf_);
        }
        Opt_Union_BorderStyle_EdgeStyles valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBorderStyle(self, static_cast<Opt_Union_BorderStyle_EdgeStyles*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBorderStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBorderWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_EdgeWidths_LocalizedEdgeWidths valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_EdgeWidths_LocalizedEdgeWidths valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeWidths_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdgeWidths_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_EdgeWidths_LocalizedEdgeWidths>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_EdgeWidths_LocalizedEdgeWidths valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBorderWidth(self, static_cast<Opt_Union_Length_EdgeWidths_LocalizedEdgeWidths*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBorderWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBorderColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeColors_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdgeColors_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_EdgeColors_LocalizedEdgeColors>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBorderColor(self, static_cast<Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBorderColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBorderRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_BorderRadiuses_LocalizedBorderRadiuses valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_BorderRadiuses_LocalizedBorderRadiuses valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = BorderRadiuses_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedBorderRadiuses_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_BorderRadiuses_LocalizedBorderRadiuses>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_BorderRadiuses_LocalizedBorderRadiuses valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBorderRadius(self, static_cast<Opt_Union_Length_BorderRadiuses_LocalizedBorderRadiuses*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBorderImage(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BorderImageOption valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = BorderImageOption_serializer::read(thisDeserializer);
        }
        Opt_BorderImageOption valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBorderImage(self, static_cast<Opt_BorderImageOption*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBorderImage, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOutline(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OutlineOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = OutlineOptions_serializer::read(thisDeserializer);
        }
        Opt_OutlineOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOutline(self, static_cast<Opt_OutlineOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOutline, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOutlineStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_OutlineStyle_EdgeOutlineStyles valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_OutlineStyle_EdgeOutlineStyles valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_OutlineStyle>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeOutlineStyles_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_OutlineStyle_EdgeOutlineStyles>(valueValueTempTmpBuf_);
        }
        Opt_Union_OutlineStyle_EdgeOutlineStyles valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOutlineStyle(self, static_cast<Opt_Union_OutlineStyle_EdgeOutlineStyles*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOutlineStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOutlineWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Dimension_EdgeOutlineWidths valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Dimension_EdgeOutlineWidths valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeOutlineWidths_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Dimension_EdgeOutlineWidths>(valueValueTempTmpBuf_);
        }
        Opt_Union_Dimension_EdgeOutlineWidths valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOutlineWidth(self, static_cast<Opt_Union_Dimension_EdgeOutlineWidths*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOutlineWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOutlineColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeColors_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdgeColors_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_EdgeColors_LocalizedEdgeColors>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOutlineColor(self, static_cast<Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOutlineColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOutlineRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Dimension_OutlineRadiuses valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Dimension_OutlineRadiuses valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = OutlineRadiuses_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Dimension_OutlineRadiuses>(valueValueTempTmpBuf_);
        }
        Opt_Union_Dimension_OutlineRadiuses valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOutlineRadius(self, static_cast<Opt_Union_Dimension_OutlineRadiuses*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOutlineRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setForegroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_ColoringStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_ColoringStrategy valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_ColoringStrategy>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_ColoringStrategy>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_ColoringStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setForegroundColor(self, static_cast<Opt_Union_ResourceColor_ColoringStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setForegroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnClick0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ClickEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ClickEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ClickEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ClickEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ClickEvent_Void))))};
        }
        Opt_Callback_ClickEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnClick0(self, static_cast<Opt_Callback_ClickEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnClick0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnHover(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_HoverEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isHover, const Ark_HoverEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_HoverEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isHover, const Ark_HoverEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_HoverEvent_Void))))};
        }
        Opt_Callback_Boolean_HoverEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnHover(self, static_cast<Opt_Callback_Boolean_HoverEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnHover, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnHoverMove(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_HoverEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_HoverEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_HoverEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_HoverEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_HoverEvent_Void))))};
        }
        Opt_Callback_HoverEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnHoverMove(self, static_cast<Opt_Callback_HoverEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnHoverMove, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnAccessibilityHover(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AccessibilityCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isHover, const Ark_AccessibilityHoverEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AccessibilityCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isHover, const Ark_AccessibilityHoverEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AccessibilityCallback))))};
        }
        Opt_AccessibilityCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnAccessibilityHover(self, static_cast<Opt_AccessibilityCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnAccessibilityHover, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setHoverEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_HoverEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_HoverEffect>(thisDeserializer.readInt32());
        }
        Opt_HoverEffect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setHoverEffect(self, static_cast<Opt_HoverEffect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setHoverEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnMouse(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_MouseEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_MouseEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_MouseEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_MouseEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_MouseEvent_Void))))};
        }
        Opt_Callback_MouseEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnMouse(self, static_cast<Opt_Callback_MouseEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnMouse, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnTouch(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TouchEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TouchEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TouchEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TouchEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TouchEvent_Void))))};
        }
        Opt_Callback_TouchEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnTouch(self, static_cast<Opt_Callback_TouchEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnTouch, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnKeyEvent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_KeyEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_KeyEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_KeyEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_KeyEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_KeyEvent_Void))))};
        }
        Opt_Callback_KeyEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnKeyEvent(self, static_cast<Opt_Callback_KeyEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnKeyEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDigitalCrown(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_CrownEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_CrownEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_CrownEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_CrownEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_CrownEvent_Void))))};
        }
        Opt_Callback_CrownEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDigitalCrown(self, static_cast<Opt_Callback_CrownEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDigitalCrown, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnKeyPreIme(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_KeyEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_KeyEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_KeyEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_KeyEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_KeyEvent_Boolean))))};
        }
        Opt_Callback_KeyEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnKeyPreIme(self, static_cast<Opt_Callback_KeyEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnKeyPreIme, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnKeyEventDispatch(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_KeyEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_KeyEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_KeyEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_KeyEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_KeyEvent_Boolean))))};
        }
        Opt_Callback_KeyEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnKeyEventDispatch(self, static_cast<Opt_Callback_KeyEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnKeyEventDispatch, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnFocusAxisEvent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_FocusAxisEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_FocusAxisEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_FocusAxisEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_FocusAxisEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_FocusAxisEvent_Void))))};
        }
        Opt_Callback_FocusAxisEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnFocusAxisEvent(self, static_cast<Opt_Callback_FocusAxisEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnFocusAxisEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnAxisEvent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_AxisEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_AxisEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_AxisEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_AxisEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_AxisEvent_Void))))};
        }
        Opt_Callback_AxisEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnAxisEvent(self, static_cast<Opt_Callback_AxisEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnAxisEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFocusable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFocusable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFocusable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setNextFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FocusMovement valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = FocusMovement_serializer::read(thisDeserializer);
        }
        Opt_FocusMovement valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setNextFocus(self, static_cast<Opt_FocusMovement*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setNextFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setTabStop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setTabStop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setTabStop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnFocus(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnBlur(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnBlur(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnBlur, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setTabIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setTabIndex(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setTabIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setDefaultFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setDefaultFocus(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setDefaultFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setGroupDefaultFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setGroupDefaultFocus(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setGroupDefaultFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFocusOnTouch(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFocusOnTouch(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFocusOnTouch, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFocusBox(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FocusBoxStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = FocusBoxStyle_serializer::read(thisDeserializer);
        }
        Opt_FocusBoxStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFocusBox(self, static_cast<Opt_FocusBoxStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFocusBox, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AnimateParam valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = AnimateParam_serializer::read(thisDeserializer);
        }
        Opt_AnimateParam valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAnimation(self, static_cast<Opt_AnimateParam*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setTransition0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TransitionEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TransitionEffect>(TransitionEffect_serializer::read(thisDeserializer));
        }
        Opt_TransitionEffect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setTransition0(self, static_cast<Opt_TransitionEffect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setTransition0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMotionBlur(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MotionBlurOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = MotionBlurOptions_serializer::read(thisDeserializer);
        }
        Opt_MotionBlurOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMotionBlur(self, static_cast<Opt_MotionBlurOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMotionBlur, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBrightness(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBrightness(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBrightness, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setContrast(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setContrast(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setContrast, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setGrayscale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setGrayscale(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setGrayscale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setColorBlend(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Color_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Color_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Color_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_Color_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setColorBlend(self, static_cast<Opt_Union_Color_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setColorBlend, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSaturate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setSaturate(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setSaturate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSepia(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setSepia(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setSepia, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setInvert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_InvertOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_InvertOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = InvertOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_InvertOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_InvertOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setInvert(self, static_cast<Opt_Union_F64_InvertOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setInvert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setHueRotate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setHueRotate(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setHueRotate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setUseShadowBatching(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setUseShadowBatching(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setUseShadowBatching, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setUseEffect0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setUseEffect0(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setUseEffect0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setRenderGroup(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setRenderGroup(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setRenderGroup, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFreeze(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFreeze(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFreeze, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setTranslate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TranslateOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TranslateOptions_serializer::read(thisDeserializer);
        }
        Opt_TranslateOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setTranslate(self, static_cast<Opt_TranslateOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setTranslate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScaleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ScaleOptions_serializer::read(thisDeserializer);
        }
        Opt_ScaleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setScale(self, static_cast<Opt_ScaleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setRotate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RotateOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = RotateOptions_serializer::read(thisDeserializer);
        }
        Opt_RotateOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setRotate(self, static_cast<Opt_RotateOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setRotate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setTransform(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_matrix4_Matrix4Transit valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_matrix4_Matrix4Transit>(matrix4_Matrix4Transit_serializer::read(thisDeserializer));
        }
        Opt_matrix4_Matrix4Transit valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setTransform(self, static_cast<Opt_matrix4_Matrix4Transit*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setTransform, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnAppear(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnAppear(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnAppear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDisAppear(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDisAppear(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDisAppear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnAttach(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnAttach(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnAttach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDetach(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDetach(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDetach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnAreaChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Area_Area_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Area oldValue, const Ark_Area newValue)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Area_Area_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Area oldValue, const Ark_Area newValue)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Area_Area_Void))))};
        }
        Opt_Callback_Area_Area_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnAreaChange(self, static_cast<Opt_Callback_Area_Area_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnAreaChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setVisibility(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Visibility valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Visibility>(thisDeserializer.readInt32());
        }
        Opt_Visibility valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setVisibility(self, static_cast<Opt_Visibility*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setVisibility, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFlexGrow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFlexGrow(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFlexGrow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFlexShrink(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFlexShrink(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFlexShrink, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFlexBasis(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFlexBasis(self, static_cast<Opt_Union_Number_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFlexBasis, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAlignSelf(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ItemAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ItemAlign>(thisDeserializer.readInt32());
        }
        Opt_ItemAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAlignSelf(self, static_cast<Opt_ItemAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAlignSelf, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setDisplayPriority(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setDisplayPriority(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setDisplayPriority, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setZIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setZIndex(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setZIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Direction valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Direction>(thisDeserializer.readInt32());
        }
        Opt_Direction valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setDirection(self, static_cast<Opt_Direction*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Alignment valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Alignment>(thisDeserializer.readInt32());
        }
        Opt_Alignment valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAlign(self, static_cast<Opt_Alignment*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Position_Edges_LocalizedEdges valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Position_Edges_LocalizedEdges valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Position_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Edges_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdges_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Position_Edges_LocalizedEdges>(valueValueTempTmpBuf_);
        }
        Opt_Union_Position_Edges_LocalizedEdges valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setPosition(self, static_cast<Opt_Union_Position_Edges_LocalizedEdges*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMarkAnchor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Position_LocalizedPosition valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Position_LocalizedPosition valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Position_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = LocalizedPosition_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Position_LocalizedPosition>(valueValueTempTmpBuf_);
        }
        Opt_Union_Position_LocalizedPosition valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMarkAnchor(self, static_cast<Opt_Union_Position_LocalizedPosition*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMarkAnchor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Position_Edges_LocalizedEdges valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Position_Edges_LocalizedEdges valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Position_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Edges_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdges_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Position_Edges_LocalizedEdges>(valueValueTempTmpBuf_);
        }
        Opt_Union_Position_Edges_LocalizedEdges valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOffset(self, static_cast<Opt_Union_Position_Edges_LocalizedEdges*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setEnabled(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setEnabled(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setEnabled, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAlignRulesWithAlignRuleOptionTypedValue(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AlignRuleOption valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = AlignRuleOption_serializer::read(thisDeserializer);
        }
        Opt_AlignRuleOption valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAlignRulesWithAlignRuleOptionTypedValue(self, static_cast<Opt_AlignRuleOption*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAlignRulesWithAlignRuleOptionTypedValue, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAlignRulesWithLocalizedAlignRuleOptionsTypedValue(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LocalizedAlignRuleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = LocalizedAlignRuleOptions_serializer::read(thisDeserializer);
        }
        Opt_LocalizedAlignRuleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAlignRulesWithLocalizedAlignRuleOptionsTypedValue(self, static_cast<Opt_LocalizedAlignRuleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAlignRulesWithLocalizedAlignRuleOptionsTypedValue, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAspectRatio(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAspectRatio(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAspectRatio, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setClickEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ClickEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ClickEffect_serializer::read(thisDeserializer);
        }
        Opt_ClickEffect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setClickEffect(self, static_cast<Opt_ClickEffect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setClickEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDragStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Type_CommonMethod_onDragStart valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams, const Callback_Union_CustomBuilder_DragItemInfo_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Type_CommonMethod_onDragStart)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams, const Callback_Union_CustomBuilder_DragItemInfo_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Type_CommonMethod_onDragStart))))};
        }
        Opt_Type_CommonMethod_onDragStart valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDragStart(self, static_cast<Opt_Type_CommonMethod_onDragStart*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDragStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDragEnter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DragEvent_Opt_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DragEvent_Opt_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DragEvent_Opt_String_Void))))};
        }
        Opt_Callback_DragEvent_Opt_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDragEnter(self, static_cast<Opt_Callback_DragEvent_Opt_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDragEnter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDragMove(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DragEvent_Opt_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DragEvent_Opt_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DragEvent_Opt_String_Void))))};
        }
        Opt_Callback_DragEvent_Opt_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDragMove(self, static_cast<Opt_Callback_DragEvent_Opt_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDragMove, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDragLeave(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DragEvent_Opt_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DragEvent_Opt_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DragEvent_Opt_String_Void))))};
        }
        Opt_Callback_DragEvent_Opt_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDragLeave(self, static_cast<Opt_Callback_DragEvent_Opt_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDragLeave, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDrop0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DragEvent_Opt_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DragEvent_Opt_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DragEvent_Opt_String_Void))))};
        }
        Opt_Callback_DragEvent_Opt_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDrop0(self, static_cast<Opt_Callback_DragEvent_Opt_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDrop0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDragEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DragEvent_Opt_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DragEvent_Opt_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DragEvent_Opt_String_Void))))};
        }
        Opt_Callback_DragEvent_Opt_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDragEnd(self, static_cast<Opt_Callback_DragEvent_Opt_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDragEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setDraggable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setDraggable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setDraggable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setDragPreview0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_CustomBuilder_DragItemInfo_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_CustomBuilder_DragItemInfo_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = DragItemInfo_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_CustomBuilder_DragItemInfo_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_CustomBuilder_DragItemInfo_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setDragPreview0(self, static_cast<Opt_Union_CustomBuilder_DragItemInfo_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setDragPreview0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnPreDrag(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_PreDragStatus_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_PreDragStatus value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PreDragStatus_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_PreDragStatus value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PreDragStatus_Void))))};
        }
        Opt_Callback_PreDragStatus_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnPreDrag(self, static_cast<Opt_Callback_PreDragStatus_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnPreDrag, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setLinearGradient(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LinearGradientOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = LinearGradientOptions_serializer::read(thisDeserializer);
        }
        Opt_LinearGradientOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setLinearGradient(self, static_cast<Opt_LinearGradientOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setLinearGradient, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSweepGradient(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SweepGradientOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SweepGradientOptions_serializer::read(thisDeserializer);
        }
        Opt_SweepGradientOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setSweepGradient(self, static_cast<Opt_SweepGradientOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setSweepGradient, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setRadialGradient(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RadialGradientOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = RadialGradientOptions_serializer::read(thisDeserializer);
        }
        Opt_RadialGradientOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setRadialGradient(self, static_cast<Opt_RadialGradientOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setRadialGradient, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMotionPath(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MotionPathOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = MotionPathOptions_serializer::read(thisDeserializer);
        }
        Opt_MotionPathOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMotionPath(self, static_cast<Opt_MotionPathOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMotionPath, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setShadow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ShadowOptions_ShadowStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ShadowOptions_ShadowStyle valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = ShadowOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_ShadowStyle>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ShadowOptions_ShadowStyle>(valueValueTempTmpBuf_);
        }
        Opt_Union_ShadowOptions_ShadowStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setShadow(self, static_cast<Opt_Union_ShadowOptions_ShadowStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setShadow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setClip(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setClip(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setClip, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setClipShape(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_CircleShape_EllipseShape_PathShape_RectShape valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_CircleShape_EllipseShape_PathShape_RectShape valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_CircleShape>(CircleShape_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_EllipseShape>(EllipseShape_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_PathShape>(PathShape_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = static_cast<Ark_RectShape>(RectShape_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_CircleShape_EllipseShape_PathShape_RectShape>(valueValueTempTmpBuf_);
        }
        Opt_Union_CircleShape_EllipseShape_PathShape_RectShape valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setClipShape(self, static_cast<Opt_Union_CircleShape_EllipseShape_PathShape_RectShape*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setClipShape, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMask(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ProgressMask valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ProgressMask>(ProgressMask_serializer::read(thisDeserializer));
        }
        Opt_ProgressMask valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMask(self, static_cast<Opt_ProgressMask*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMask, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMaskShape(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_CircleShape_EllipseShape_PathShape_RectShape valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_CircleShape_EllipseShape_PathShape_RectShape valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_CircleShape>(CircleShape_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_EllipseShape>(EllipseShape_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_PathShape>(PathShape_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = static_cast<Ark_RectShape>(RectShape_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_CircleShape_EllipseShape_PathShape_RectShape>(valueValueTempTmpBuf_);
        }
        Opt_Union_CircleShape_EllipseShape_PathShape_RectShape valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMaskShape(self, static_cast<Opt_Union_CircleShape_EllipseShape_PathShape_RectShape*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMaskShape, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setKey(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setKey(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setKey, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setId(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setId, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setGeometryTransition0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setGeometryTransition0(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setGeometryTransition0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setRestoreId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setRestoreId(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setRestoreId, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSphericalEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setSphericalEffect(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setSphericalEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setLightUpEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setLightUpEffect(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setLightUpEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setPixelStretchEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PixelStretchEffectOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PixelStretchEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_PixelStretchEffectOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setPixelStretchEffect(self, static_cast<Opt_PixelStretchEffectOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setPixelStretchEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityGroupWithValue(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityGroupWithValue(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityGroupWithValue, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityTextOfStringType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityTextOfStringType(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityTextOfStringType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityNextFocusId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityNextFocusId(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityNextFocusId, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityDefaultFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityDefaultFocus(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityDefaultFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityUseSamePage(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AccessibilitySamePageMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AccessibilitySamePageMode>(thisDeserializer.readInt32());
        }
        Opt_AccessibilitySamePageMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityUseSamePage(self, static_cast<Opt_AccessibilitySamePageMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityUseSamePage, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityScrollTriggerable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityScrollTriggerable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityScrollTriggerable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityTextOfResourceType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Resource_serializer::read(thisDeserializer);
        }
        Opt_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityTextOfResourceType(self, static_cast<Opt_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityTextOfResourceType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityRole(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AccessibilityRoleType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AccessibilityRoleType>(thisDeserializer.readInt32());
        }
        Opt_AccessibilityRoleType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityRole(self, static_cast<Opt_AccessibilityRoleType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityRole, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnAccessibilityFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AccessibilityFocusCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isFocus)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AccessibilityFocusCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isFocus)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AccessibilityFocusCallback))))};
        }
        Opt_AccessibilityFocusCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnAccessibilityFocus(self, static_cast<Opt_AccessibilityFocusCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnAccessibilityFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnAccessibilityActionIntercept(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AccessibilityActionInterceptCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED))
        {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_AccessibilityAction action, const Callback_AccessibilityActionInterceptResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AccessibilityActionInterceptCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_AccessibilityAction action, const Callback_AccessibilityActionInterceptResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AccessibilityActionInterceptCallback))))};
        }
        Opt_AccessibilityActionInterceptCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnAccessibilityActionIntercept(self, static_cast<Opt_AccessibilityActionInterceptCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnAccessibilityActionIntercept, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityTextHint(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityTextHint(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityTextHint, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityDescriptionOfStringType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityDescriptionOfStringType(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityDescriptionOfStringType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityDescriptionOfResourceType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Resource_serializer::read(thisDeserializer);
        }
        Opt_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityDescriptionOfResourceType(self, static_cast<Opt_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityDescriptionOfResourceType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityLevel(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityLevel(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityLevel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityVirtualNode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityVirtualNode(self, static_cast<Opt_CustomNodeBuilder*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityVirtualNode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityChecked(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityChecked(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityChecked, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilitySelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilitySelected(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilitySelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setObscured(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ObscuredReasons valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ObscuredReasons valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_ObscuredReasons>(thisDeserializer.readInt32());
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ObscuredReasons valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setObscured(self, static_cast<Opt_Array_ObscuredReasons*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setObscured, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setReuseId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setReuseId(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setReuseId, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setReuse(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ReuseOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ReuseOptions_serializer::read(thisDeserializer);
        }
        Opt_ReuseOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setReuse(self, static_cast<Opt_ReuseOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setReuse, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setRenderFit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RenderFit valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_RenderFit>(thisDeserializer.readInt32());
        }
        Opt_RenderFit valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setRenderFit(self, static_cast<Opt_RenderFit*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setRenderFit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundBrightness(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundBrightnessOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = BackgroundBrightnessOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundBrightnessOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundBrightness(self, static_cast<Opt_BackgroundBrightnessOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundBrightness, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnGestureJudgeBegin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_GestureInfo_BaseGestureEvent_GestureJudgeResult valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GestureInfo gestureInfo, const Ark_BaseGestureEvent event, const Callback_GestureJudgeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_GestureInfo_BaseGestureEvent_GestureJudgeResult)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GestureInfo gestureInfo, const Ark_BaseGestureEvent event, const Callback_GestureJudgeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_GestureInfo_BaseGestureEvent_GestureJudgeResult))))};
        }
        Opt_Callback_GestureInfo_BaseGestureEvent_GestureJudgeResult valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnGestureJudgeBegin(self, static_cast<Opt_Callback_GestureInfo_BaseGestureEvent_GestureJudgeResult*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnGestureJudgeBegin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnGestureRecognizerJudgeBegin0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GestureRecognizerJudgeBeginCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_BaseGestureEvent event, const Ark_GestureRecognizer current, const Array_GestureRecognizer recognizers, const Callback_GestureJudgeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_GestureRecognizerJudgeBeginCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_BaseGestureEvent event, const Ark_GestureRecognizer current, const Array_GestureRecognizer recognizers, const Callback_GestureJudgeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_GestureRecognizerJudgeBeginCallback))))};
        }
        Opt_GestureRecognizerJudgeBeginCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnGestureRecognizerJudgeBegin0(self, static_cast<Opt_GestureRecognizerJudgeBeginCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnGestureRecognizerJudgeBegin0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setShouldBuiltInRecognizerParallelWith(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ShouldBuiltInRecognizerParallelWithCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GestureRecognizer current, const Array_GestureRecognizer others, const Callback_GestureRecognizer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ShouldBuiltInRecognizerParallelWithCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GestureRecognizer current, const Array_GestureRecognizer others, const Callback_GestureRecognizer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ShouldBuiltInRecognizerParallelWithCallback))))};
        }
        Opt_ShouldBuiltInRecognizerParallelWithCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setShouldBuiltInRecognizerParallelWith(self, static_cast<Opt_ShouldBuiltInRecognizerParallelWithCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setShouldBuiltInRecognizerParallelWith, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setMonopolizeEvents(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setMonopolizeEvents(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setMonopolizeEvents, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnTouchIntercept(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TouchEvent_HitTestMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TouchEvent value0, const Callback_HitTestMode_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TouchEvent_HitTestMode)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TouchEvent value0, const Callback_HitTestMode_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TouchEvent_HitTestMode))))};
        }
        Opt_Callback_TouchEvent_HitTestMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnTouchIntercept(self, static_cast<Opt_Callback_TouchEvent_HitTestMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnTouchIntercept, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnSizeChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SizeChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_SizeOptions oldValue, const Ark_SizeOptions newValue)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_SizeChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_SizeOptions oldValue, const Ark_SizeOptions newValue)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_SizeChangeCallback))))};
        }
        Opt_SizeChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnSizeChange(self, static_cast<Opt_SizeChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnSizeChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityFocusDrawLevel(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FocusDrawLevel valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FocusDrawLevel>(thisDeserializer.readInt32());
        }
        Opt_FocusDrawLevel valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityFocusDrawLevel(self, static_cast<Opt_FocusDrawLevel*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityFocusDrawLevel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setExpandSafeArea(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto typesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_SafeAreaType typesValueTempTmpBuf = {};
        typesValueTempTmpBuf.tag = typesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 typesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_SafeAreaType typesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(typesValueTempTmpBuf_)>::type,
        std::decay<decltype(*typesValueTempTmpBuf_.array)>::type>(&typesValueTempTmpBuf_, typesValueTempTmpBuf_Length);
            for (int typesValueTempTmpBuf_BufCounterI = 0; typesValueTempTmpBuf_BufCounterI < typesValueTempTmpBuf_Length; typesValueTempTmpBuf_BufCounterI++) {
                typesValueTempTmpBuf_.array[typesValueTempTmpBuf_BufCounterI] = static_cast<Ark_SafeAreaType>(thisDeserializer.readInt32());
            }
            typesValueTempTmpBuf.value = typesValueTempTmpBuf_;
        }
        Opt_Array_SafeAreaType typesValueTemp = typesValueTempTmpBuf;;
        const auto edgesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_SafeAreaEdge edgesValueTempTmpBuf = {};
        edgesValueTempTmpBuf.tag = edgesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((edgesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 edgesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_SafeAreaEdge edgesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(edgesValueTempTmpBuf_)>::type,
        std::decay<decltype(*edgesValueTempTmpBuf_.array)>::type>(&edgesValueTempTmpBuf_, edgesValueTempTmpBuf_Length);
            for (int edgesValueTempTmpBuf_BufCounterI = 0; edgesValueTempTmpBuf_BufCounterI < edgesValueTempTmpBuf_Length; edgesValueTempTmpBuf_BufCounterI++) {
                edgesValueTempTmpBuf_.array[edgesValueTempTmpBuf_BufCounterI] = static_cast<Ark_SafeAreaEdge>(thisDeserializer.readInt32());
            }
            edgesValueTempTmpBuf.value = edgesValueTempTmpBuf_;
        }
        Opt_Array_SafeAreaEdge edgesValueTemp = edgesValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setExpandSafeArea(self, static_cast<Opt_Array_SafeAreaType*>(&typesValueTemp), static_cast<Opt_Array_SafeAreaEdge*>(&edgesValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setExpandSafeArea, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackground(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto builderValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder builderValueTempTmpBuf = {};
        builderValueTempTmpBuf.tag = builderValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((builderValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            builderValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder builderValueTemp = builderValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = BackgroundOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackground(self, static_cast<Opt_CustomNodeBuilder*>(&builderValueTemp), static_cast<Opt_BackgroundOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackground, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundImage0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto srcValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceStr_PixelMap srcValueTempTmpBuf = {};
        srcValueTempTmpBuf.tag = srcValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((srcValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 srcValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceStr_PixelMap srcValueTempTmpBuf_ = {};
            srcValueTempTmpBuf_.selector = srcValueTempTmpBuf_UnionSelector;
            if (srcValueTempTmpBuf_UnionSelector == 0) {
                srcValueTempTmpBuf_.selector = 0;
                const Ark_Int8 srcValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr srcValueTempTmpBuf_BufU = {};
                srcValueTempTmpBuf_BufU.selector = srcValueTempTmpBuf_BufUUnionSelector;
                if (srcValueTempTmpBuf_BufUUnionSelector == 0) {
                    srcValueTempTmpBuf_BufU.selector = 0;
                    srcValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (srcValueTempTmpBuf_BufUUnionSelector == 1) {
                    srcValueTempTmpBuf_BufU.selector = 1;
                    srcValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for srcValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                srcValueTempTmpBuf_.value0 = static_cast<Ark_ResourceStr>(srcValueTempTmpBuf_BufU);
            } else if (srcValueTempTmpBuf_UnionSelector == 1) {
                srcValueTempTmpBuf_.selector = 1;
                srcValueTempTmpBuf_.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for srcValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            srcValueTempTmpBuf.value = static_cast<Ark_Union_ResourceStr_PixelMap>(srcValueTempTmpBuf_);
        }
        Opt_Union_ResourceStr_PixelMap srcValueTemp = srcValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundImage0(self, static_cast<Opt_Union_ResourceStr_PixelMap*>(&srcValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundImage0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundImage1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto srcValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceStr_PixelMap srcValueTempTmpBuf = {};
        srcValueTempTmpBuf.tag = srcValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((srcValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 srcValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceStr_PixelMap srcValueTempTmpBuf_ = {};
            srcValueTempTmpBuf_.selector = srcValueTempTmpBuf_UnionSelector;
            if (srcValueTempTmpBuf_UnionSelector == 0) {
                srcValueTempTmpBuf_.selector = 0;
                const Ark_Int8 srcValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr srcValueTempTmpBuf_BufU = {};
                srcValueTempTmpBuf_BufU.selector = srcValueTempTmpBuf_BufUUnionSelector;
                if (srcValueTempTmpBuf_BufUUnionSelector == 0) {
                    srcValueTempTmpBuf_BufU.selector = 0;
                    srcValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (srcValueTempTmpBuf_BufUUnionSelector == 1) {
                    srcValueTempTmpBuf_BufU.selector = 1;
                    srcValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for srcValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                srcValueTempTmpBuf_.value0 = static_cast<Ark_ResourceStr>(srcValueTempTmpBuf_BufU);
            } else if (srcValueTempTmpBuf_UnionSelector == 1) {
                srcValueTempTmpBuf_.selector = 1;
                srcValueTempTmpBuf_.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for srcValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            srcValueTempTmpBuf.value = static_cast<Ark_Union_ResourceStr_PixelMap>(srcValueTempTmpBuf_);
        }
        Opt_Union_ResourceStr_PixelMap srcValueTemp = srcValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundImageOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = BackgroundImageOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundImageOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundImage1(self, static_cast<Opt_Union_ResourceStr_PixelMap*>(&srcValueTemp), static_cast<Opt_BackgroundImageOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundImage1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundImage2(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto srcValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceStr_PixelMap srcValueTempTmpBuf = {};
        srcValueTempTmpBuf.tag = srcValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((srcValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 srcValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceStr_PixelMap srcValueTempTmpBuf_ = {};
            srcValueTempTmpBuf_.selector = srcValueTempTmpBuf_UnionSelector;
            if (srcValueTempTmpBuf_UnionSelector == 0) {
                srcValueTempTmpBuf_.selector = 0;
                const Ark_Int8 srcValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr srcValueTempTmpBuf_BufU = {};
                srcValueTempTmpBuf_BufU.selector = srcValueTempTmpBuf_BufUUnionSelector;
                if (srcValueTempTmpBuf_BufUUnionSelector == 0) {
                    srcValueTempTmpBuf_BufU.selector = 0;
                    srcValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (srcValueTempTmpBuf_BufUUnionSelector == 1) {
                    srcValueTempTmpBuf_BufU.selector = 1;
                    srcValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for srcValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                srcValueTempTmpBuf_.value0 = static_cast<Ark_ResourceStr>(srcValueTempTmpBuf_BufU);
            } else if (srcValueTempTmpBuf_UnionSelector == 1) {
                srcValueTempTmpBuf_.selector = 1;
                srcValueTempTmpBuf_.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for srcValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            srcValueTempTmpBuf.value = static_cast<Ark_Union_ResourceStr_PixelMap>(srcValueTempTmpBuf_);
        }
        Opt_Union_ResourceStr_PixelMap srcValueTemp = srcValueTempTmpBuf;;
        const auto repeatValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageRepeat repeatValueTempTmpBuf = {};
        repeatValueTempTmpBuf.tag = repeatValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((repeatValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            repeatValueTempTmpBuf.value = static_cast<Ark_ImageRepeat>(thisDeserializer.readInt32());
        }
        Opt_ImageRepeat repeatValueTemp = repeatValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundImage2(self, static_cast<Opt_Union_ResourceStr_PixelMap*>(&srcValueTemp), static_cast<Opt_ImageRepeat*>(&repeatValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundImage2, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundBlurStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto styleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurStyle styleValueTempTmpBuf = {};
        styleValueTempTmpBuf.tag = styleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((styleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            styleValueTempTmpBuf.value = static_cast<Ark_BlurStyle>(thisDeserializer.readInt32());
        }
        Opt_BlurStyle styleValueTemp = styleValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundBlurStyleOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = BackgroundBlurStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundBlurStyleOptions optionsValueTemp = optionsValueTempTmpBuf;;
        const auto sysOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SystemAdaptiveOptions sysOptionsValueTempTmpBuf = {};
        sysOptionsValueTempTmpBuf.tag = sysOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sysOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            sysOptionsValueTempTmpBuf.value = SystemAdaptiveOptions_serializer::read(thisDeserializer);
        }
        Opt_SystemAdaptiveOptions sysOptionsValueTemp = sysOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundBlurStyle(self, static_cast<Opt_BlurStyle*>(&styleValueTemp), static_cast<Opt_BackgroundBlurStyleOptions*>(&optionsValueTemp), static_cast<Opt_SystemAdaptiveOptions*>(&sysOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundBlurStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackgroundEffect1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundEffectOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = BackgroundEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundEffectOptions optionsValueTemp = optionsValueTempTmpBuf;;
        const auto sysOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SystemAdaptiveOptions sysOptionsValueTempTmpBuf = {};
        sysOptionsValueTempTmpBuf.tag = sysOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sysOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            sysOptionsValueTempTmpBuf.value = SystemAdaptiveOptions_serializer::read(thisDeserializer);
        }
        Opt_SystemAdaptiveOptions sysOptionsValueTemp = sysOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackgroundEffect1(self, static_cast<Opt_BackgroundEffectOptions*>(&optionsValueTemp), static_cast<Opt_SystemAdaptiveOptions*>(&sysOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackgroundEffect1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setForegroundBlurStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto styleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurStyle styleValueTempTmpBuf = {};
        styleValueTempTmpBuf.tag = styleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((styleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            styleValueTempTmpBuf.value = static_cast<Ark_BlurStyle>(thisDeserializer.readInt32());
        }
        Opt_BlurStyle styleValueTemp = styleValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ForegroundBlurStyleOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ForegroundBlurStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_ForegroundBlurStyleOptions optionsValueTemp = optionsValueTempTmpBuf;;
        const auto sysOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SystemAdaptiveOptions sysOptionsValueTempTmpBuf = {};
        sysOptionsValueTempTmpBuf.tag = sysOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sysOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            sysOptionsValueTempTmpBuf.value = SystemAdaptiveOptions_serializer::read(thisDeserializer);
        }
        Opt_SystemAdaptiveOptions sysOptionsValueTemp = sysOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setForegroundBlurStyle(self, static_cast<Opt_BlurStyle*>(&styleValueTemp), static_cast<Opt_ForegroundBlurStyleOptions*>(&optionsValueTemp), static_cast<Opt_SystemAdaptiveOptions*>(&sysOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setForegroundBlurStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnClick1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto eventValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ClickEvent_Void eventValueTempTmpBuf = {};
        eventValueTempTmpBuf.tag = eventValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((eventValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            eventValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ClickEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ClickEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ClickEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ClickEvent_Void))))};
        }
        Opt_Callback_ClickEvent_Void eventValueTemp = eventValueTempTmpBuf;;
        const auto distanceThresholdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 distanceThresholdValueTempTmpBuf = {};
        distanceThresholdValueTempTmpBuf.tag = distanceThresholdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((distanceThresholdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            distanceThresholdValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 distanceThresholdValueTemp = distanceThresholdValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnClick1(self, static_cast<Opt_Callback_ClickEvent_Void*>(&eventValueTemp), static_cast<Opt_Float64*>(&distanceThresholdValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnClick1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFocusScopeId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto idValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String idValueTempTmpBuf = {};
        idValueTempTmpBuf.tag = idValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((idValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            idValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String idValueTemp = idValueTempTmpBuf;;
        const auto isGroupValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isGroupValueTempTmpBuf = {};
        isGroupValueTempTmpBuf.tag = isGroupValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isGroupValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isGroupValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isGroupValueTemp = isGroupValueTempTmpBuf;;
        const auto arrowStepOutValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean arrowStepOutValueTempTmpBuf = {};
        arrowStepOutValueTempTmpBuf.tag = arrowStepOutValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((arrowStepOutValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            arrowStepOutValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean arrowStepOutValueTemp = arrowStepOutValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFocusScopeId(self, static_cast<Opt_String*>(&idValueTemp), static_cast<Opt_Boolean*>(&isGroupValueTemp), static_cast<Opt_Boolean*>(&arrowStepOutValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFocusScopeId, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setFocusScopePriority(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeIdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String scopeIdValueTempTmpBuf = {};
        scopeIdValueTempTmpBuf.tag = scopeIdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeIdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeIdValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String scopeIdValueTemp = scopeIdValueTempTmpBuf;;
        const auto priorityValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FocusPriority priorityValueTempTmpBuf = {};
        priorityValueTempTmpBuf.tag = priorityValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((priorityValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            priorityValueTempTmpBuf.value = static_cast<Ark_FocusPriority>(thisDeserializer.readInt32());
        }
        Opt_FocusPriority priorityValueTemp = priorityValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setFocusScopePriority(self, static_cast<Opt_String*>(&scopeIdValueTemp), static_cast<Opt_FocusPriority*>(&priorityValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setFocusScopePriority, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setTransition1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto effectValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TransitionEffect effectValueTempTmpBuf = {};
        effectValueTempTmpBuf.tag = effectValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((effectValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            effectValueTempTmpBuf.value = static_cast<Ark_TransitionEffect>(TransitionEffect_serializer::read(thisDeserializer));
        }
        Opt_TransitionEffect effectValueTemp = effectValueTempTmpBuf;;
        const auto onFinishValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TransitionFinishCallback onFinishValueTempTmpBuf = {};
        onFinishValueTempTmpBuf.tag = onFinishValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onFinishValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onFinishValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean transitionIn)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TransitionFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean transitionIn)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TransitionFinishCallback))))};
        }
        Opt_TransitionFinishCallback onFinishValueTemp = onFinishValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setTransition1(self, static_cast<Opt_TransitionEffect*>(&effectValueTemp), static_cast<Opt_TransitionFinishCallback*>(&onFinishValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setTransition1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBlur(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto blurRadiusValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 blurRadiusValueTempTmpBuf = {};
        blurRadiusValueTempTmpBuf.tag = blurRadiusValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((blurRadiusValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            blurRadiusValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 blurRadiusValueTemp = blurRadiusValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = BlurOptions_serializer::read(thisDeserializer);
        }
        Opt_BlurOptions optionsValueTemp = optionsValueTempTmpBuf;;
        const auto sysOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SystemAdaptiveOptions sysOptionsValueTempTmpBuf = {};
        sysOptionsValueTempTmpBuf.tag = sysOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sysOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            sysOptionsValueTempTmpBuf.value = SystemAdaptiveOptions_serializer::read(thisDeserializer);
        }
        Opt_SystemAdaptiveOptions sysOptionsValueTemp = sysOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBlur(self, static_cast<Opt_Float64*>(&blurRadiusValueTemp), static_cast<Opt_BlurOptions*>(&optionsValueTemp), static_cast<Opt_SystemAdaptiveOptions*>(&sysOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBlur, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setLinearGradientBlur(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LinearGradientBlurOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = LinearGradientBlurOptions_serializer::read(thisDeserializer);
        }
        Opt_LinearGradientBlurOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setLinearGradientBlur(self, static_cast<Opt_Float64*>(&valueValueTemp), static_cast<Opt_LinearGradientBlurOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setLinearGradientBlur, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSystemBarEffect(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getCommonMethodModifier()->setSystemBarEffect(self);
}
KOALA_INTEROP_DIRECT_V1(CommonMethod_setSystemBarEffect, Ark_NativePointer)
void impl_CommonMethod_setUseEffect1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto useEffectValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean useEffectValueTempTmpBuf = {};
        useEffectValueTempTmpBuf.tag = useEffectValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((useEffectValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            useEffectValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean useEffectValueTemp = useEffectValueTempTmpBuf;;
        const auto effectTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectType effectTypeValueTempTmpBuf = {};
        effectTypeValueTempTmpBuf.tag = effectTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((effectTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            effectTypeValueTempTmpBuf.value = static_cast<Ark_EffectType>(thisDeserializer.readInt32());
        }
        Opt_EffectType effectTypeValueTemp = effectTypeValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setUseEffect1(self, static_cast<Opt_Boolean*>(&useEffectValueTemp), static_cast<Opt_EffectType*>(&effectTypeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setUseEffect1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBackdropBlur(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto radiusValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 radiusValueTempTmpBuf = {};
        radiusValueTempTmpBuf.tag = radiusValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((radiusValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            radiusValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 radiusValueTemp = radiusValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = BlurOptions_serializer::read(thisDeserializer);
        }
        Opt_BlurOptions optionsValueTemp = optionsValueTempTmpBuf;;
        const auto sysOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SystemAdaptiveOptions sysOptionsValueTempTmpBuf = {};
        sysOptionsValueTempTmpBuf.tag = sysOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sysOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            sysOptionsValueTempTmpBuf.value = SystemAdaptiveOptions_serializer::read(thisDeserializer);
        }
        Opt_SystemAdaptiveOptions sysOptionsValueTemp = sysOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBackdropBlur(self, static_cast<Opt_Float64*>(&radiusValueTemp), static_cast<Opt_BlurOptions*>(&optionsValueTemp), static_cast<Opt_SystemAdaptiveOptions*>(&sysOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBackdropBlur, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setSharedTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto idValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String idValueTempTmpBuf = {};
        idValueTempTmpBuf.tag = idValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((idValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            idValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String idValueTemp = idValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_sharedTransitionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = sharedTransitionOptions_serializer::read(thisDeserializer);
        }
        Opt_sharedTransitionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setSharedTransition(self, static_cast<Opt_String*>(&idValueTemp), static_cast<Opt_sharedTransitionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setSharedTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setChainMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto directionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Axis directionValueTempTmpBuf = {};
        directionValueTempTmpBuf.tag = directionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((directionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            directionValueTempTmpBuf.value = static_cast<Ark_Axis>(thisDeserializer.readInt32());
        }
        Opt_Axis directionValueTemp = directionValueTempTmpBuf;;
        const auto styleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ChainStyle styleValueTempTmpBuf = {};
        styleValueTempTmpBuf.tag = styleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((styleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            styleValueTempTmpBuf.value = static_cast<Ark_ChainStyle>(thisDeserializer.readInt32());
        }
        Opt_ChainStyle styleValueTemp = styleValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setChainMode(self, static_cast<Opt_Axis*>(&directionValueTemp), static_cast<Opt_ChainStyle*>(&styleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setChainMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnDrop1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto eventCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnDragEventCallback eventCallbackValueTempTmpBuf = {};
        eventCallbackValueTempTmpBuf.tag = eventCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((eventCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            eventCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnDragEventCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DragEvent event, const Opt_String extraParams)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnDragEventCallback))))};
        }
        Opt_OnDragEventCallback eventCallbackValueTemp = eventCallbackValueTempTmpBuf;;
        const auto dropOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DropOptions dropOptionsValueTempTmpBuf = {};
        dropOptionsValueTempTmpBuf.tag = dropOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((dropOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            dropOptionsValueTempTmpBuf.value = DropOptions_serializer::read(thisDeserializer);
        }
        Opt_DropOptions dropOptionsValueTemp = dropOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnDrop1(self, static_cast<Opt_OnDragEventCallback*>(&eventCallbackValueTemp), static_cast<Opt_DropOptions*>(&dropOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnDrop1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setDragPreview1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto previewValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_CustomBuilder_DragItemInfo_String previewValueTempTmpBuf = {};
        previewValueTempTmpBuf.tag = previewValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((previewValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 previewValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_CustomBuilder_DragItemInfo_String previewValueTempTmpBuf_ = {};
            previewValueTempTmpBuf_.selector = previewValueTempTmpBuf_UnionSelector;
            if (previewValueTempTmpBuf_UnionSelector == 0) {
                previewValueTempTmpBuf_.selector = 0;
                previewValueTempTmpBuf_.value0 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else if (previewValueTempTmpBuf_UnionSelector == 1) {
                previewValueTempTmpBuf_.selector = 1;
                previewValueTempTmpBuf_.value1 = DragItemInfo_serializer::read(thisDeserializer);
            } else if (previewValueTempTmpBuf_UnionSelector == 2) {
                previewValueTempTmpBuf_.selector = 2;
                previewValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for previewValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            previewValueTempTmpBuf.value = static_cast<Ark_Union_CustomBuilder_DragItemInfo_String>(previewValueTempTmpBuf_);
        }
        Opt_Union_CustomBuilder_DragItemInfo_String previewValueTemp = previewValueTempTmpBuf;;
        const auto configValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PreviewConfiguration configValueTempTmpBuf = {};
        configValueTempTmpBuf.tag = configValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((configValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            configValueTempTmpBuf.value = PreviewConfiguration_serializer::read(thisDeserializer);
        }
        Opt_PreviewConfiguration configValueTemp = configValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setDragPreview1(self, static_cast<Opt_Union_CustomBuilder_DragItemInfo_String*>(&previewValueTemp), static_cast<Opt_PreviewConfiguration*>(&configValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setDragPreview1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOverlay(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_CustomBuilder_ComponentContent valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_CustomBuilder_ComponentContent valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_ComponentContent>(thisDeserializer.readObject());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_CustomBuilder_ComponentContent>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_CustomBuilder_ComponentContent valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OverlayOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = OverlayOptions_serializer::read(thisDeserializer);
        }
        Opt_OverlayOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOverlay(self, static_cast<Opt_Union_String_CustomBuilder_ComponentContent*>(&valueValueTemp), static_cast<Opt_OverlayOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOverlay, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBlendMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlendMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BlendMode>(thisDeserializer.readInt32());
        }
        Opt_BlendMode valueValueTemp = valueValueTempTmpBuf;;
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlendApplyType typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_BlendApplyType>(thisDeserializer.readInt32());
        }
        Opt_BlendApplyType typeValueTemp = typeValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBlendMode(self, static_cast<Opt_BlendMode*>(&valueValueTemp), static_cast<Opt_BlendApplyType*>(&typeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBlendMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAdvancedBlendMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 effectValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_BlendMode_Blender effectValueTempTmpBuf = {};
        effectValueTempTmpBuf.selector = effectValueTempTmpBufUnionSelector;
        if (effectValueTempTmpBufUnionSelector == 0) {
            effectValueTempTmpBuf.selector = 0;
            effectValueTempTmpBuf.value0 = static_cast<Ark_BlendMode>(thisDeserializer.readInt32());
        } else if (effectValueTempTmpBufUnionSelector == 1) {
            effectValueTempTmpBuf.selector = 1;
            effectValueTempTmpBuf.value1 = uiEffect_BrightnessBlender_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for effectValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_BlendMode_Blender effectValueTemp = static_cast<Ark_Union_BlendMode_Blender>(effectValueTempTmpBuf);;
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlendApplyType typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_BlendApplyType>(thisDeserializer.readInt32());
        }
        Opt_BlendApplyType typeValueTemp = typeValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAdvancedBlendMode(self, static_cast<Ark_Union_BlendMode_Blender*>(&effectValueTemp), static_cast<Opt_BlendApplyType*>(&typeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAdvancedBlendMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setGeometryTransition1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto idValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String idValueTempTmpBuf = {};
        idValueTempTmpBuf.tag = idValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((idValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            idValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String idValueTemp = idValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GeometryTransitionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = GeometryTransitionOptions_serializer::read(thisDeserializer);
        }
        Opt_GeometryTransitionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setGeometryTransition1(self, static_cast<Opt_String*>(&idValueTemp), static_cast<Opt_GeometryTransitionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setGeometryTransition1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindTips(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto messageValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TipsMessageType messageValueTempTmpBuf = {};
        messageValueTempTmpBuf.tag = messageValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((messageValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 messageValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_TipsMessageType messageValueTempTmpBuf_ = {};
            messageValueTempTmpBuf_.selector = messageValueTempTmpBuf_UnionSelector;
            if (messageValueTempTmpBuf_UnionSelector == 0) {
                messageValueTempTmpBuf_.selector = 0;
                const Ark_Int8 messageValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr messageValueTempTmpBuf_BufU = {};
                messageValueTempTmpBuf_BufU.selector = messageValueTempTmpBuf_BufUUnionSelector;
                if (messageValueTempTmpBuf_BufUUnionSelector == 0) {
                    messageValueTempTmpBuf_BufU.selector = 0;
                    messageValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (messageValueTempTmpBuf_BufUUnionSelector == 1) {
                    messageValueTempTmpBuf_BufU.selector = 1;
                    messageValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for messageValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                messageValueTempTmpBuf_.value0 = static_cast<Ark_ResourceStr>(messageValueTempTmpBuf_BufU);
            } else if (messageValueTempTmpBuf_UnionSelector == 1) {
                messageValueTempTmpBuf_.selector = 1;
                messageValueTempTmpBuf_.value1 = static_cast<Ark_StyledString>(StyledString_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for messageValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            messageValueTempTmpBuf.value = static_cast<Ark_TipsMessageType>(messageValueTempTmpBuf_);
        }
        Opt_TipsMessageType messageValueTemp = messageValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TipsOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = TipsOptions_serializer::read(thisDeserializer);
        }
        Opt_TipsOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindTips(self, static_cast<Opt_TipsMessageType*>(&messageValueTemp), static_cast<Opt_TipsOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindTips, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindPopup(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto showValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean showValueTempTmpBuf = {};
        showValueTempTmpBuf.tag = showValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((showValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            showValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean showValueTemp = showValueTempTmpBuf;;
        const auto popupValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_PopupOptions_CustomPopupOptions popupValueTempTmpBuf = {};
        popupValueTempTmpBuf.tag = popupValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((popupValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 popupValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_PopupOptions_CustomPopupOptions popupValueTempTmpBuf_ = {};
            popupValueTempTmpBuf_.selector = popupValueTempTmpBuf_UnionSelector;
            if (popupValueTempTmpBuf_UnionSelector == 0) {
                popupValueTempTmpBuf_.selector = 0;
                popupValueTempTmpBuf_.value0 = PopupOptions_serializer::read(thisDeserializer);
            } else if (popupValueTempTmpBuf_UnionSelector == 1) {
                popupValueTempTmpBuf_.selector = 1;
                popupValueTempTmpBuf_.value1 = CustomPopupOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for popupValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            popupValueTempTmpBuf.value = static_cast<Ark_Union_PopupOptions_CustomPopupOptions>(popupValueTempTmpBuf_);
        }
        Opt_Union_PopupOptions_CustomPopupOptions popupValueTemp = popupValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindPopup(self, static_cast<Opt_Boolean*>(&showValueTemp), static_cast<Opt_Union_PopupOptions_CustomPopupOptions*>(&popupValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindPopup, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindMenu0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_MenuElement_CustomBuilder contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 contentValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_MenuElement_CustomBuilder contentValueTempTmpBuf_ = {};
            contentValueTempTmpBuf_.selector = contentValueTempTmpBuf_UnionSelector;
            if (contentValueTempTmpBuf_UnionSelector == 0) {
                contentValueTempTmpBuf_.selector = 0;
                const Ark_Int32 contentValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_MenuElement contentValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(contentValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*contentValueTempTmpBuf_BufU.array)>::type>(&contentValueTempTmpBuf_BufU, contentValueTempTmpBuf_BufULength);
                for (int contentValueTempTmpBuf_BufUBufCounterI = 0; contentValueTempTmpBuf_BufUBufCounterI < contentValueTempTmpBuf_BufULength; contentValueTempTmpBuf_BufUBufCounterI++) {
                    contentValueTempTmpBuf_BufU.array[contentValueTempTmpBuf_BufUBufCounterI] = MenuElement_serializer::read(thisDeserializer);
                }
                contentValueTempTmpBuf_.value0 = contentValueTempTmpBuf_BufU;
            } else if (contentValueTempTmpBuf_UnionSelector == 1) {
                contentValueTempTmpBuf_.selector = 1;
                contentValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else {
                INTEROP_FATAL("One of the branches for contentValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            contentValueTempTmpBuf.value = static_cast<Ark_Union_Array_MenuElement_CustomBuilder>(contentValueTempTmpBuf_);
        }
        Opt_Union_Array_MenuElement_CustomBuilder contentValueTemp = contentValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = MenuOptions_serializer::read(thisDeserializer);
        }
        Opt_MenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindMenu0(self, static_cast<Opt_Union_Array_MenuElement_CustomBuilder*>(&contentValueTemp), static_cast<Opt_MenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindMenu0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindMenu1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isShowValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isShowValueTempTmpBuf = {};
        isShowValueTempTmpBuf.tag = isShowValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isShowValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isShowValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isShowValueTemp = isShowValueTempTmpBuf;;
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_MenuElement_CustomBuilder contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 contentValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_MenuElement_CustomBuilder contentValueTempTmpBuf_ = {};
            contentValueTempTmpBuf_.selector = contentValueTempTmpBuf_UnionSelector;
            if (contentValueTempTmpBuf_UnionSelector == 0) {
                contentValueTempTmpBuf_.selector = 0;
                const Ark_Int32 contentValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_MenuElement contentValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(contentValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*contentValueTempTmpBuf_BufU.array)>::type>(&contentValueTempTmpBuf_BufU, contentValueTempTmpBuf_BufULength);
                for (int contentValueTempTmpBuf_BufUBufCounterI = 0; contentValueTempTmpBuf_BufUBufCounterI < contentValueTempTmpBuf_BufULength; contentValueTempTmpBuf_BufUBufCounterI++) {
                    contentValueTempTmpBuf_BufU.array[contentValueTempTmpBuf_BufUBufCounterI] = MenuElement_serializer::read(thisDeserializer);
                }
                contentValueTempTmpBuf_.value0 = contentValueTempTmpBuf_BufU;
            } else if (contentValueTempTmpBuf_UnionSelector == 1) {
                contentValueTempTmpBuf_.selector = 1;
                contentValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else {
                INTEROP_FATAL("One of the branches for contentValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            contentValueTempTmpBuf.value = static_cast<Ark_Union_Array_MenuElement_CustomBuilder>(contentValueTempTmpBuf_);
        }
        Opt_Union_Array_MenuElement_CustomBuilder contentValueTemp = contentValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = MenuOptions_serializer::read(thisDeserializer);
        }
        Opt_MenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindMenu1(self, static_cast<Opt_Boolean*>(&isShowValueTemp), static_cast<Opt_Union_Array_MenuElement_CustomBuilder*>(&contentValueTemp), static_cast<Opt_MenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindMenu1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindContextMenu0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            contentValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder contentValueTemp = contentValueTempTmpBuf;;
        const auto responseTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResponseType responseTypeValueTempTmpBuf = {};
        responseTypeValueTempTmpBuf.tag = responseTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((responseTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            responseTypeValueTempTmpBuf.value = static_cast<Ark_ResponseType>(thisDeserializer.readInt32());
        }
        Opt_ResponseType responseTypeValueTemp = responseTypeValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ContextMenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ContextMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_ContextMenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindContextMenu0(self, static_cast<Opt_CustomNodeBuilder*>(&contentValueTemp), static_cast<Opt_ResponseType*>(&responseTypeValueTemp), static_cast<Opt_ContextMenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindContextMenu0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindContextMenu1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isShownValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isShownValueTempTmpBuf = {};
        isShownValueTempTmpBuf.tag = isShownValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isShownValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isShownValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isShownValueTemp = isShownValueTempTmpBuf;;
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            contentValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder contentValueTemp = contentValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ContextMenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ContextMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_ContextMenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindContextMenu1(self, static_cast<Opt_Boolean*>(&isShownValueTemp), static_cast<Opt_CustomNodeBuilder*>(&contentValueTemp), static_cast<Opt_ContextMenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindContextMenu1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindContentCover0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isShowValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable isShowValueTempTmpBuf = {};
        isShowValueTempTmpBuf.tag = isShowValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isShowValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 isShowValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable isShowValueTempTmpBuf_ = {};
            isShowValueTempTmpBuf_.selector = isShowValueTempTmpBuf_UnionSelector;
            if (isShowValueTempTmpBuf_UnionSelector == 0) {
                isShowValueTempTmpBuf_.selector = 0;
                isShowValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (isShowValueTempTmpBuf_UnionSelector == 1) {
                isShowValueTempTmpBuf_.selector = 1;
                isShowValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for isShowValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            isShowValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(isShowValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable isShowValueTemp = isShowValueTempTmpBuf;;
        const auto builderValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder builderValueTempTmpBuf = {};
        builderValueTempTmpBuf.tag = builderValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((builderValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            builderValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder builderValueTemp = builderValueTempTmpBuf;;
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ModalTransition typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_ModalTransition>(thisDeserializer.readInt32());
        }
        Opt_ModalTransition typeValueTemp = typeValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindContentCover0(self, static_cast<Opt_Union_Boolean_Bindable*>(&isShowValueTemp), static_cast<Opt_CustomNodeBuilder*>(&builderValueTemp), static_cast<Opt_ModalTransition*>(&typeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindContentCover0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindContentCover1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isShowValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable isShowValueTempTmpBuf = {};
        isShowValueTempTmpBuf.tag = isShowValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isShowValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 isShowValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable isShowValueTempTmpBuf_ = {};
            isShowValueTempTmpBuf_.selector = isShowValueTempTmpBuf_UnionSelector;
            if (isShowValueTempTmpBuf_UnionSelector == 0) {
                isShowValueTempTmpBuf_.selector = 0;
                isShowValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (isShowValueTempTmpBuf_UnionSelector == 1) {
                isShowValueTempTmpBuf_.selector = 1;
                isShowValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for isShowValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            isShowValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(isShowValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable isShowValueTemp = isShowValueTempTmpBuf;;
        const auto builderValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder builderValueTempTmpBuf = {};
        builderValueTempTmpBuf.tag = builderValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((builderValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            builderValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder builderValueTemp = builderValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ContentCoverOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ContentCoverOptions_serializer::read(thisDeserializer);
        }
        Opt_ContentCoverOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindContentCover1(self, static_cast<Opt_Union_Boolean_Bindable*>(&isShowValueTemp), static_cast<Opt_CustomNodeBuilder*>(&builderValueTemp), static_cast<Opt_ContentCoverOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindContentCover1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setBindSheet(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isShowValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable isShowValueTempTmpBuf = {};
        isShowValueTempTmpBuf.tag = isShowValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isShowValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 isShowValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable isShowValueTempTmpBuf_ = {};
            isShowValueTempTmpBuf_.selector = isShowValueTempTmpBuf_UnionSelector;
            if (isShowValueTempTmpBuf_UnionSelector == 0) {
                isShowValueTempTmpBuf_.selector = 0;
                isShowValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (isShowValueTempTmpBuf_UnionSelector == 1) {
                isShowValueTempTmpBuf_.selector = 1;
                isShowValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for isShowValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            isShowValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(isShowValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable isShowValueTemp = isShowValueTempTmpBuf;;
        const auto builderValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder builderValueTempTmpBuf = {};
        builderValueTempTmpBuf.tag = builderValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((builderValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            builderValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder builderValueTemp = builderValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SheetOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SheetOptions_serializer::read(thisDeserializer);
        }
        Opt_SheetOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setBindSheet(self, static_cast<Opt_Union_Boolean_Bindable*>(&isShowValueTemp), static_cast<Opt_CustomNodeBuilder*>(&builderValueTemp), static_cast<Opt_SheetOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setBindSheet, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnVisibleAreaChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto ratiosValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Float64 ratiosValueTempTmpBuf = {};
        ratiosValueTempTmpBuf.tag = ratiosValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((ratiosValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 ratiosValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Float64 ratiosValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(ratiosValueTempTmpBuf_)>::type,
        std::decay<decltype(*ratiosValueTempTmpBuf_.array)>::type>(&ratiosValueTempTmpBuf_, ratiosValueTempTmpBuf_Length);
            for (int ratiosValueTempTmpBuf_BufCounterI = 0; ratiosValueTempTmpBuf_BufCounterI < ratiosValueTempTmpBuf_Length; ratiosValueTempTmpBuf_BufCounterI++) {
                ratiosValueTempTmpBuf_.array[ratiosValueTempTmpBuf_BufCounterI] = thisDeserializer.readFloat64();
            }
            ratiosValueTempTmpBuf.value = ratiosValueTempTmpBuf_;
        }
        Opt_Array_Float64 ratiosValueTemp = ratiosValueTempTmpBuf;;
        const auto eventValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VisibleAreaChangeCallback eventValueTempTmpBuf = {};
        eventValueTempTmpBuf.tag = eventValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((eventValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            eventValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isExpanding, const Ark_Float64 currentRatio)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VisibleAreaChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isExpanding, const Ark_Float64 currentRatio)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VisibleAreaChangeCallback))))};
        }
        Opt_VisibleAreaChangeCallback eventValueTemp = eventValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnVisibleAreaChange(self, static_cast<Opt_Array_Float64*>(&ratiosValueTemp), static_cast<Opt_VisibleAreaChangeCallback*>(&eventValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnVisibleAreaChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnVisibleAreaApproximateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VisibleAreaEventOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = VisibleAreaEventOptions_serializer::read(thisDeserializer);
        }
        Opt_VisibleAreaEventOptions optionsValueTemp = optionsValueTempTmpBuf;;
        const auto eventValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VisibleAreaChangeCallback eventValueTempTmpBuf = {};
        eventValueTempTmpBuf.tag = eventValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((eventValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            eventValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isExpanding, const Ark_Float64 currentRatio)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VisibleAreaChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isExpanding, const Ark_Float64 currentRatio)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VisibleAreaChangeCallback))))};
        }
        Opt_VisibleAreaChangeCallback eventValueTemp = eventValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnVisibleAreaApproximateChange(self, static_cast<Opt_VisibleAreaEventOptions*>(&optionsValueTemp), static_cast<Opt_VisibleAreaChangeCallback*>(&eventValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnVisibleAreaApproximateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setKeyboardShortcut(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_FunctionKey valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_FunctionKey valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FunctionKey>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_FunctionKey>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_FunctionKey valueValueTemp = valueValueTempTmpBuf;;
        const auto keysValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ModifierKey keysValueTempTmpBuf = {};
        keysValueTempTmpBuf.tag = keysValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((keysValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 keysValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ModifierKey keysValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(keysValueTempTmpBuf_)>::type,
        std::decay<decltype(*keysValueTempTmpBuf_.array)>::type>(&keysValueTempTmpBuf_, keysValueTempTmpBuf_Length);
            for (int keysValueTempTmpBuf_BufCounterI = 0; keysValueTempTmpBuf_BufCounterI < keysValueTempTmpBuf_Length; keysValueTempTmpBuf_BufCounterI++) {
                keysValueTempTmpBuf_.array[keysValueTempTmpBuf_BufCounterI] = static_cast<Ark_ModifierKey>(thisDeserializer.readInt32());
            }
            keysValueTempTmpBuf.value = keysValueTempTmpBuf_;
        }
        Opt_Array_ModifierKey keysValueTemp = keysValueTempTmpBuf;;
        const auto actionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void actionValueTempTmpBuf = {};
        actionValueTempTmpBuf.tag = actionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((actionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            actionValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void actionValueTemp = actionValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setKeyboardShortcut(self, static_cast<Opt_Union_String_FunctionKey*>(&valueValueTemp), static_cast<Opt_Array_ModifierKey*>(&keysValueTemp), static_cast<Opt_Callback_Void*>(&actionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setKeyboardShortcut, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setAccessibilityGroupWithConfig(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isGroupValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isGroupValueTempTmpBuf = {};
        isGroupValueTempTmpBuf.tag = isGroupValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isGroupValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isGroupValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isGroupValueTemp = isGroupValueTempTmpBuf;;
        const auto configValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AccessibilityOptions configValueTempTmpBuf = {};
        configValueTempTmpBuf.tag = configValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((configValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            configValueTempTmpBuf.value = AccessibilityOptions_serializer::read(thisDeserializer);
        }
        Opt_AccessibilityOptions configValueTemp = configValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setAccessibilityGroupWithConfig(self, static_cast<Opt_Boolean*>(&isGroupValueTemp), static_cast<Opt_AccessibilityOptions*>(&configValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setAccessibilityGroupWithConfig, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonMethod_setOnGestureRecognizerJudgeBegin1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GestureRecognizerJudgeBeginCallback callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_BaseGestureEvent event, const Ark_GestureRecognizer current, const Array_GestureRecognizer recognizers, const Callback_GestureJudgeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_GestureRecognizerJudgeBeginCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_BaseGestureEvent event, const Ark_GestureRecognizer current, const Array_GestureRecognizer recognizers, const Callback_GestureJudgeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_GestureRecognizerJudgeBeginCallback))))};
        }
        Opt_GestureRecognizerJudgeBeginCallback callback_ValueTemp = callback_ValueTempTmpBuf;;
        const auto exposeInnerGestureValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean exposeInnerGestureValueTempTmpBuf = {};
        exposeInnerGestureValueTempTmpBuf.tag = exposeInnerGestureValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((exposeInnerGestureValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            exposeInnerGestureValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean exposeInnerGestureValueTemp = exposeInnerGestureValueTempTmpBuf;;
        GetNodeModifiers()->getCommonMethodModifier()->setOnGestureRecognizerJudgeBegin1(self, static_cast<Opt_GestureRecognizerJudgeBeginCallback*>(&callback_ValueTemp), static_cast<Opt_Boolean*>(&exposeInnerGestureValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonMethod_setOnGestureRecognizerJudgeBegin1, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CommonShapeMethod_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCommonShapeMethodModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(CommonShapeMethod_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CommonShapeMethod_setStroke(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStroke(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStroke, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setFill(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setFill(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setFill, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setStrokeDashOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStrokeDashOffset(self, static_cast<Opt_Union_Number_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStrokeDashOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setStrokeLineCap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineCapStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineCapStyle>(thisDeserializer.readInt32());
        }
        Opt_LineCapStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStrokeLineCap(self, static_cast<Opt_LineCapStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStrokeLineCap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setStrokeLineJoin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineJoinStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineJoinStyle>(thisDeserializer.readInt32());
        }
        Opt_LineJoinStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStrokeLineJoin(self, static_cast<Opt_LineJoinStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStrokeLineJoin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setStrokeMiterLimit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStrokeMiterLimit(self, static_cast<Opt_Union_Number_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStrokeMiterLimit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setStrokeOpacity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStrokeOpacity(self, static_cast<Opt_Union_Number_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStrokeOpacity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setFillOpacity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setFillOpacity(self, static_cast<Opt_Union_Number_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setFillOpacity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setStrokeWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStrokeWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStrokeWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setAntiAlias(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setAntiAlias(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setAntiAlias, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CommonShapeMethod_setStrokeDashArray(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Length valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                const Ark_Int8 valueValueTempTmpBuf_TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_TempBuf = {};
                valueValueTempTmpBuf_TempBuf.selector = valueValueTempTmpBuf_TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_Length>(valueValueTempTmpBuf_TempBuf);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCommonShapeMethodModifier()->setStrokeDashArray(self, static_cast<Opt_Array_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CommonShapeMethod_setStrokeDashArray, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ScrollableCommonMethod_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getScrollableCommonMethodModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ScrollableCommonMethod_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ScrollableCommonMethod_setScrollBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarState valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarState>(thisDeserializer.readInt32());
        }
        Opt_BarState valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setScrollBar(self, static_cast<Opt_BarState*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setScrollBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setScrollBarColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Color_I32_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Color_I32_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Color_I32_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Color_I32_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setScrollBarColor(self, static_cast<Opt_Union_Color_I32_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setScrollBarColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setScrollBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setScrollBarWidth(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setScrollBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setNestedScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NestedScrollOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = NestedScrollOptions_serializer::read(thisDeserializer);
        }
        Opt_NestedScrollOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setNestedScroll(self, static_cast<Opt_NestedScrollOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setNestedScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setEnableScrollInteraction(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setEnableScrollInteraction(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setEnableScrollInteraction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setFriction(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setFriction(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setFriction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setOnReachStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setOnReachStart(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setOnReachStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setOnReachEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setOnReachEnd(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setOnReachEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setOnScrollStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setOnScrollStart(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setOnScrollStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setOnScrollStop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setOnScrollStop(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setOnScrollStop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setFlingSpeedLimit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setFlingSpeedLimit(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setFlingSpeedLimit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setClipContent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ContentClipMode_RectShape valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ContentClipMode_RectShape valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ContentClipMode>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_RectShape>(RectShape_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ContentClipMode_RectShape>(valueValueTempTmpBuf_);
        }
        Opt_Union_ContentClipMode_RectShape valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setClipContent(self, static_cast<Opt_Union_ContentClipMode_RectShape*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setClipContent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setDigitalCrownSensitivity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CrownSensitivity valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CrownSensitivity>(thisDeserializer.readInt32());
        }
        Opt_CrownSensitivity valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setDigitalCrownSensitivity(self, static_cast<Opt_CrownSensitivity*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setDigitalCrownSensitivity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setBackToTop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setBackToTop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setBackToTop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setEdgeEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto edgeEffectValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffect edgeEffectValueTempTmpBuf = {};
        edgeEffectValueTempTmpBuf.tag = edgeEffectValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((edgeEffectValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            edgeEffectValueTempTmpBuf.value = static_cast<Ark_EdgeEffect>(thisDeserializer.readInt32());
        }
        Opt_EdgeEffect edgeEffectValueTemp = edgeEffectValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffectOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = EdgeEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_EdgeEffectOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setEdgeEffect(self, static_cast<Opt_EdgeEffect*>(&edgeEffectValueTemp), static_cast<Opt_EdgeEffectOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setEdgeEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollableCommonMethod_setFadingEdge(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto enabledValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean enabledValueTempTmpBuf = {};
        enabledValueTempTmpBuf.tag = enabledValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((enabledValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            enabledValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean enabledValueTemp = enabledValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FadingEdgeOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = FadingEdgeOptions_serializer::read(thisDeserializer);
        }
        Opt_FadingEdgeOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getScrollableCommonMethodModifier()->setFadingEdge(self, static_cast<Opt_Boolean*>(&enabledValueTemp), static_cast<Opt_FadingEdgeOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollableCommonMethod_setFadingEdge, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Component3D_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getComponent3DModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Component3D_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_Component3DInterface_setComponent3DOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto sceneOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SceneOptions sceneOptionsValueTempTmpBuf = {};
        sceneOptionsValueTempTmpBuf.tag = sceneOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sceneOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            sceneOptionsValueTempTmpBuf.value = SceneOptions_serializer::read(thisDeserializer);
        }
        Opt_SceneOptions sceneOptionsValueTemp = sceneOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setComponent3DOptions(self, static_cast<Opt_SceneOptions*>(&sceneOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DInterface_setComponent3DOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Component3DAttribute_setEnvironment(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setEnvironment(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DAttribute_setEnvironment, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Component3DAttribute_setShader(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setShader(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DAttribute_setShader, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Component3DAttribute_setShaderImageTexture(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setShaderImageTexture(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DAttribute_setShaderImageTexture, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Component3DAttribute_setShaderInputBuffer(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Number valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_Number>(thisDeserializer.readNumber());
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setShaderInputBuffer(self, static_cast<Opt_Array_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DAttribute_setShaderInputBuffer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Component3DAttribute_setRenderWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setRenderWidth(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DAttribute_setRenderWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Component3DAttribute_setRenderHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setRenderHeight(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DAttribute_setRenderHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Component3DAttribute_setCustomRender(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto uriValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr uriValueTempTmpBuf = {};
        uriValueTempTmpBuf.tag = uriValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((uriValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 uriValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr uriValueTempTmpBuf_ = {};
            uriValueTempTmpBuf_.selector = uriValueTempTmpBuf_UnionSelector;
            if (uriValueTempTmpBuf_UnionSelector == 0) {
                uriValueTempTmpBuf_.selector = 0;
                uriValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (uriValueTempTmpBuf_UnionSelector == 1) {
                uriValueTempTmpBuf_.selector = 1;
                uriValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for uriValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            uriValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(uriValueTempTmpBuf_);
        }
        Opt_ResourceStr uriValueTemp = uriValueTempTmpBuf;;
        const auto selfRenderUpdateValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean selfRenderUpdateValueTempTmpBuf = {};
        selfRenderUpdateValueTempTmpBuf.tag = selfRenderUpdateValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((selfRenderUpdateValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            selfRenderUpdateValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean selfRenderUpdateValueTemp = selfRenderUpdateValueTempTmpBuf;;
        GetNodeModifiers()->getComponent3DModifier()->setCustomRender(self, static_cast<Opt_ResourceStr*>(&uriValueTemp), static_cast<Opt_Boolean*>(&selfRenderUpdateValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Component3DAttribute_setCustomRender, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ContainerSpan_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getContainerSpanModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ContainerSpan_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ContainerSpanInterface_setContainerSpanOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getContainerSpanModifier()->setContainerSpanOptions(self);
}
KOALA_INTEROP_DIRECT_V1(ContainerSpanInterface_setContainerSpanOptions, Ark_NativePointer)
void impl_ContainerSpanAttribute_setTextBackgroundStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextBackgroundStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextBackgroundStyle_serializer::read(thisDeserializer);
        }
        Opt_TextBackgroundStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getContainerSpanModifier()->setTextBackgroundStyle(self, static_cast<Opt_TextBackgroundStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContainerSpanAttribute_setTextBackgroundStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Counter_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCounterModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Counter_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CounterInterface_setCounterOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getCounterModifier()->setCounterOptions(self);
}
KOALA_INTEROP_DIRECT_V1(CounterInterface_setCounterOptions, Ark_NativePointer)
void impl_CounterAttribute_setOnInc(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCounterModifier()->setOnInc(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CounterAttribute_setOnInc, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CounterAttribute_setOnDec(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCounterModifier()->setOnDec(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CounterAttribute_setOnDec, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CounterAttribute_setEnableDec(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCounterModifier()->setEnableDec(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CounterAttribute_setEnableDec, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CounterAttribute_setEnableInc(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getCounterModifier()->setEnableInc(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CounterAttribute_setEnableInc, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DataPanel_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getDataPanelModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(DataPanel_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_DataPanelInterface_setDataPanelOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_DataPanelOptions optionsValueTemp = DataPanelOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getDataPanelModifier()->setDataPanelOptions(self, static_cast<Ark_DataPanelOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DataPanelInterface_setDataPanelOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DataPanelAttribute_setCloseEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDataPanelModifier()->setCloseEffect(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DataPanelAttribute_setCloseEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DataPanelAttribute_setValueColors(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Union_ResourceColor_LinearGradient valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Union_ResourceColor_LinearGradient valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                const Ark_Int8 valueValueTempTmpBuf_TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_Union_ResourceColor_LinearGradient valueValueTempTmpBuf_TempBuf = {};
                valueValueTempTmpBuf_TempBuf.selector = valueValueTempTmpBuf_TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBuf.selector = 0;
                    const Ark_Int8 valueValueTempTmpBuf_TempBufBufUUnionSelector = thisDeserializer.readInt8();
                    Ark_ResourceColor valueValueTempTmpBuf_TempBufBufU = {};
                    valueValueTempTmpBuf_TempBufBufU.selector = valueValueTempTmpBuf_TempBufBufUUnionSelector;
                    if (valueValueTempTmpBuf_TempBufBufUUnionSelector == 0) {
                        valueValueTempTmpBuf_TempBufBufU.selector = 0;
                        valueValueTempTmpBuf_TempBufBufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                    } else if (valueValueTempTmpBuf_TempBufBufUUnionSelector == 1) {
                        valueValueTempTmpBuf_TempBufBufU.selector = 1;
                        valueValueTempTmpBuf_TempBufBufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                    } else if (valueValueTempTmpBuf_TempBufBufUUnionSelector == 2) {
                        valueValueTempTmpBuf_TempBufBufU.selector = 2;
                        valueValueTempTmpBuf_TempBufBufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                    } else if (valueValueTempTmpBuf_TempBufBufUUnionSelector == 3) {
                        valueValueTempTmpBuf_TempBufBufU.selector = 3;
                        valueValueTempTmpBuf_TempBufBufU.value3 = Resource_serializer::read(thisDeserializer);
                    } else {
                        INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBufBufU has to be chosen through deserialisation.");
                    }
                    valueValueTempTmpBuf_TempBuf.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_TempBufBufU);
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBuf.value1 = static_cast<Ark_LinearGradient>(LinearGradient_serializer::read(thisDeserializer));
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_Union_ResourceColor_LinearGradient>(valueValueTempTmpBuf_TempBuf);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_Union_ResourceColor_LinearGradient valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDataPanelModifier()->setValueColors(self, static_cast<Opt_Array_Union_ResourceColor_LinearGradient*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DataPanelAttribute_setValueColors, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DataPanelAttribute_setTrackBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDataPanelModifier()->setTrackBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DataPanelAttribute_setTrackBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DataPanelAttribute_setStrokeWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDataPanelModifier()->setStrokeWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DataPanelAttribute_setStrokeWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DataPanelAttribute_setTrackShadow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DataPanelShadowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DataPanelShadowOptions_serializer::read(thisDeserializer);
        }
        Opt_DataPanelShadowOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDataPanelModifier()->setTrackShadow(self, static_cast<Opt_DataPanelShadowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DataPanelAttribute_setTrackShadow, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DatePicker_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getDatePickerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(DatePicker_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_DatePickerInterface_setDatePickerOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DatePickerOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = DatePickerOptions_serializer::read(thisDeserializer);
        }
        Opt_DatePickerOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setDatePickerOptions(self, static_cast<Opt_DatePickerOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerInterface_setDatePickerOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DatePickerAttribute_setLunar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setLunar(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerAttribute_setLunar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DatePickerAttribute_setDisappearTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setDisappearTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerAttribute_setDisappearTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DatePickerAttribute_setTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerAttribute_setTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DatePickerAttribute_setSelectedTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setSelectedTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerAttribute_setSelectedTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DatePickerAttribute_setOnDateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Date_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Date value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Date_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Date value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Date_Void))))};
        }
        Opt_Callback_Date_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setOnDateChange(self, static_cast<Opt_Callback_Date_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerAttribute_setOnDateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DatePickerAttribute_setDigitalCrownSensitivity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CrownSensitivity valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CrownSensitivity>(thisDeserializer.readInt32());
        }
        Opt_CrownSensitivity valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setDigitalCrownSensitivity(self, static_cast<Opt_CrownSensitivity*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerAttribute_setDigitalCrownSensitivity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DatePickerAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDatePickerModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DatePickerAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Divider_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getDividerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Divider_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_DividerInterface_setDividerOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getDividerModifier()->setDividerOptions(self);
}
KOALA_INTEROP_DIRECT_V1(DividerInterface_setDividerOptions, Ark_NativePointer)
void impl_DividerAttribute_setVertical(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDividerModifier()->setVertical(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DividerAttribute_setVertical, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DividerAttribute_setColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDividerModifier()->setColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DividerAttribute_setColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DividerAttribute_setStrokeWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDividerModifier()->setStrokeWidth(self, static_cast<Opt_Union_Number_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DividerAttribute_setStrokeWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DividerAttribute_setLineCap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineCapStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineCapStyle>(thisDeserializer.readInt32());
        }
        Opt_LineCapStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getDividerModifier()->setLineCap(self, static_cast<Opt_LineCapStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DividerAttribute_setLineCap, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_EffectComponent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getEffectComponentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(EffectComponent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_EffectComponentInterface_setEffectComponentOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getEffectComponentModifier()->setEffectComponentOptions(self);
}
KOALA_INTEROP_DIRECT_V1(EffectComponentInterface_setEffectComponentOptions, Ark_NativePointer)
Ark_NativePointer impl_Ellipse_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getEllipseModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Ellipse_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_EllipseInterface_setEllipseOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EllipseOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = EllipseOptions_serializer::read(thisDeserializer);
        }
        Opt_EllipseOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getEllipseModifier()->setEllipseOptions(self, static_cast<Opt_EllipseOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(EllipseInterface_setEllipseOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_EmbeddedComponent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getEmbeddedComponentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(EmbeddedComponent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_EmbeddedComponentInterface_setEmbeddedComponentOptions(Ark_NativePointer thisPtr, Ark_NativePointer loader, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EmbeddedType typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_EmbeddedType>(thisDeserializer.readInt32());
        }
        Opt_EmbeddedType typeValueTemp = typeValueTempTmpBuf;;
        GetNodeModifiers()->getEmbeddedComponentModifier()->setEmbeddedComponentOptions(self, static_cast<Ark_Want>(loader), static_cast<Opt_EmbeddedType*>(&typeValueTemp));
}
KOALA_INTEROP_DIRECT_V4(EmbeddedComponentInterface_setEmbeddedComponentOptions, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_EmbeddedComponentAttribute_setOnTerminated(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TerminationInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TerminationInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TerminationInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TerminationInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TerminationInfo_Void))))};
        }
        Opt_Callback_TerminationInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getEmbeddedComponentModifier()->setOnTerminated(self, static_cast<Opt_Callback_TerminationInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(EmbeddedComponentAttribute_setOnTerminated, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_EmbeddedComponentAttribute_setOnError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ErrorCallback_Ohos_Base_BusinessError valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_BusinessError err)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ErrorCallback_Ohos_Base_BusinessError)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_BusinessError err)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ErrorCallback_Ohos_Base_BusinessError))))};
        }
        Opt_ErrorCallback_Ohos_Base_BusinessError valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getEmbeddedComponentModifier()->setOnError(self, static_cast<Opt_ErrorCallback_Ohos_Base_BusinessError*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(EmbeddedComponentAttribute_setOnError, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Flex_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getFlexModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Flex_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_FlexInterface_setFlexOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FlexOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = FlexOptions_serializer::read(thisDeserializer);
        }
        Opt_FlexOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFlexModifier()->setFlexOptions(self, static_cast<Opt_FlexOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FlexInterface_setFlexOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_FlowItem_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getFlowItemModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(FlowItem_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_FlowItemInterface_setFlowItemOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getFlowItemModifier()->setFlowItemOptions(self);
}
KOALA_INTEROP_DIRECT_V1(FlowItemInterface_setFlowItemOptions, Ark_NativePointer)
Ark_NativePointer impl_FolderStack_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getFolderStackModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(FolderStack_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_FolderStackInterface_setFolderStackOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FolderStackOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = FolderStackOptions_serializer::read(thisDeserializer);
        }
        Opt_FolderStackOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getFolderStackModifier()->setFolderStackOptions(self, static_cast<Opt_FolderStackOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FolderStackInterface_setFolderStackOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FolderStackAttribute_setAlignContent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Alignment valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Alignment>(thisDeserializer.readInt32());
        }
        Opt_Alignment valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFolderStackModifier()->setAlignContent(self, static_cast<Opt_Alignment*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FolderStackAttribute_setAlignContent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FolderStackAttribute_setOnFolderStateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnFoldStatusChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnFoldStatusChangeInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnFoldStatusChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnFoldStatusChangeInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnFoldStatusChangeCallback))))};
        }
        Opt_OnFoldStatusChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFolderStackModifier()->setOnFolderStateChange(self, static_cast<Opt_OnFoldStatusChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FolderStackAttribute_setOnFolderStateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FolderStackAttribute_setOnHoverStatusChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnHoverStatusChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_HoverEventParam param)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnHoverStatusChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_HoverEventParam param)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnHoverStatusChangeCallback))))};
        }
        Opt_OnHoverStatusChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFolderStackModifier()->setOnHoverStatusChange(self, static_cast<Opt_OnHoverStatusChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FolderStackAttribute_setOnHoverStatusChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FolderStackAttribute_setEnableAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFolderStackModifier()->setEnableAnimation(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FolderStackAttribute_setEnableAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FolderStackAttribute_setAutoHalfFold(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFolderStackModifier()->setAutoHalfFold(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FolderStackAttribute_setAutoHalfFold, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_FormComponent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getFormComponentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(FormComponent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_FormComponentInterface_setFormComponentOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_FormInfo valueValueTemp = FormInfo_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getFormComponentModifier()->setFormComponentOptions(self, static_cast<Ark_FormInfo*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentInterface_setFormComponentOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FormSize valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = FormSize_serializer::read(thisDeserializer);
        }
        Opt_FormSize valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setSize(self, static_cast<Opt_FormSize*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setModuleName(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setModuleName(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setModuleName, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setDimension(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FormDimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FormDimension>(thisDeserializer.readInt32());
        }
        Opt_FormDimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setDimension(self, static_cast<Opt_FormDimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setDimension, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setAllowUpdate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setAllowUpdate(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setAllowUpdate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setVisibility(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Visibility valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Visibility>(thisDeserializer.readInt32());
        }
        Opt_Visibility valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setVisibility(self, static_cast<Opt_Visibility*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setVisibility, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setOnAcquired(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_FormCallbackInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_FormCallbackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_FormCallbackInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_FormCallbackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_FormCallbackInfo_Void))))};
        }
        Opt_Callback_FormCallbackInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setOnAcquired(self, static_cast<Opt_Callback_FormCallbackInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setOnAcquired, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setOnError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ErrorInformation_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ErrorInformation value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ErrorInformation_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ErrorInformation value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ErrorInformation_Void))))};
        }
        Opt_Callback_ErrorInformation_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setOnError(self, static_cast<Opt_Callback_ErrorInformation_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setOnError, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setOnRouter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Object_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Object_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Object_Void))))};
        }
        Opt_Callback_Object_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setOnRouter(self, static_cast<Opt_Callback_Object_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setOnRouter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setOnUninstall(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_FormCallbackInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_FormCallbackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_FormCallbackInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_FormCallbackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_FormCallbackInfo_Void))))};
        }
        Opt_Callback_FormCallbackInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setOnUninstall(self, static_cast<Opt_Callback_FormCallbackInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setOnUninstall, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setOnLoad(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setOnLoad(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setOnLoad, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FormComponentAttribute_setOnUpdate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_FormCallbackInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_FormCallbackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_FormCallbackInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_FormCallbackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_FormCallbackInfo_Void))))};
        }
        Opt_Callback_FormCallbackInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getFormComponentModifier()->setOnUpdate(self, static_cast<Opt_Callback_FormCallbackInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormComponentAttribute_setOnUpdate, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_FormLink_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getFormLinkModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(FormLink_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_FormLinkInterface_setFormLinkOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_FormLinkOptions optionsValueTemp = FormLinkOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getFormLinkModifier()->setFormLinkOptions(self, static_cast<Ark_FormLinkOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FormLinkInterface_setFormLinkOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Gauge_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getGaugeModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Gauge_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_GaugeInterface_setGaugeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_GaugeOptions optionsValueTemp = GaugeOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getGaugeModifier()->setGaugeOptions(self, static_cast<Ark_GaugeOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeInterface_setGaugeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setValue(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setValue(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setValue, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setStartAngle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setStartAngle(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setStartAngle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setEndAngle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setEndAngle(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setEndAngle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setColors(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_LinearGradient_Array_Tuple_Union_ResourceColor_LinearGradient_F64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_LinearGradient_Array_Tuple_Union_ResourceColor_LinearGradient_F64 valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LinearGradient>(LinearGradient_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_Tuple_Union_ResourceColor_LinearGradient_F64 valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    Ark_Tuple_Union_ResourceColor_LinearGradient_F64 valueValueTempTmpBuf_BufUTempBuf = {};
                    const Ark_Int8 valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector = thisDeserializer.readInt8();
                    Ark_Union_ResourceColor_LinearGradient valueValueTempTmpBuf_BufUTempBufValue0TempBuf = {};
                    valueValueTempTmpBuf_BufUTempBufValue0TempBuf.selector = valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector;
                    if (valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector == 0) {
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.selector = 0;
                        const Ark_Int8 valueValueTempTmpBuf_BufUTempBufValue0TempBufBufUUnionSelector = thisDeserializer.readInt8();
                        Ark_ResourceColor valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU = {};
                        valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.selector = valueValueTempTmpBuf_BufUTempBufValue0TempBufBufUUnionSelector;
                        if (valueValueTempTmpBuf_BufUTempBufValue0TempBufBufUUnionSelector == 0) {
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.selector = 0;
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                        } else if (valueValueTempTmpBuf_BufUTempBufValue0TempBufBufUUnionSelector == 1) {
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.selector = 1;
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                        } else if (valueValueTempTmpBuf_BufUTempBufValue0TempBufBufUUnionSelector == 2) {
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.selector = 2;
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                        } else if (valueValueTempTmpBuf_BufUTempBufValue0TempBufBufUUnionSelector == 3) {
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.selector = 3;
                            valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU.value3 = Resource_serializer::read(thisDeserializer);
                        } else {
                            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU has to be chosen through deserialisation.");
                        }
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufUTempBufValue0TempBufBufU);
                    } else if (valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector == 1) {
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.selector = 1;
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.value1 = static_cast<Ark_LinearGradient>(LinearGradient_serializer::read(thisDeserializer));
                    } else {
                        INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufUTempBufValue0TempBuf has to be chosen through deserialisation.");
                    }
                    valueValueTempTmpBuf_BufUTempBuf.value0 = static_cast<Ark_Union_ResourceColor_LinearGradient>(valueValueTempTmpBuf_BufUTempBufValue0TempBuf);
                    valueValueTempTmpBuf_BufUTempBuf.value1 = thisDeserializer.readFloat64();
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = valueValueTempTmpBuf_BufUTempBuf;
                }
                valueValueTempTmpBuf_.value2 = valueValueTempTmpBuf_BufU;
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_LinearGradient_Array_Tuple_Union_ResourceColor_LinearGradient_F64>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_LinearGradient_Array_Tuple_Union_ResourceColor_LinearGradient_F64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setColors(self, static_cast<Opt_Union_ResourceColor_LinearGradient_Array_Tuple_Union_ResourceColor_LinearGradient_F64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setColors, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setStrokeWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setStrokeWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setStrokeWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setDescription(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setDescription(self, static_cast<Opt_CustomNodeBuilder*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setDescription, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setTrackShadow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GaugeShadowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = GaugeShadowOptions_serializer::read(thisDeserializer);
        }
        Opt_GaugeShadowOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setTrackShadow(self, static_cast<Opt_GaugeShadowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setTrackShadow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setIndicator(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GaugeIndicatorOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = GaugeIndicatorOptions_serializer::read(thisDeserializer);
        }
        Opt_GaugeIndicatorOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setIndicator(self, static_cast<Opt_GaugeIndicatorOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setIndicator, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GaugeAttribute_setPrivacySensitive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGaugeModifier()->setPrivacySensitive(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GaugeAttribute_setPrivacySensitive, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Grid_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getGridModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Grid_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_GridInterface_setGridOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scrollerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Scroller scrollerValueTempTmpBuf = {};
        scrollerValueTempTmpBuf.tag = scrollerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scrollerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scrollerValueTempTmpBuf.value = static_cast<Ark_Scroller>(Scroller_serializer::read(thisDeserializer));
        }
        Opt_Scroller scrollerValueTemp = scrollerValueTempTmpBuf;;
        const auto layoutOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GridLayoutOptions layoutOptionsValueTempTmpBuf = {};
        layoutOptionsValueTempTmpBuf.tag = layoutOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((layoutOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            layoutOptionsValueTempTmpBuf.value = GridLayoutOptions_serializer::read(thisDeserializer);
        }
        Opt_GridLayoutOptions layoutOptionsValueTemp = layoutOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setGridOptions(self, static_cast<Opt_Scroller*>(&scrollerValueTemp), static_cast<Opt_GridLayoutOptions*>(&layoutOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridInterface_setGridOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setColumnsTemplate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setColumnsTemplate(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setColumnsTemplate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setRowsTemplate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setRowsTemplate(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setRowsTemplate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setColumnsGap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setColumnsGap(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setColumnsGap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setRowsGap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setRowsGap(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setRowsGap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setScrollBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setScrollBarWidth(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setScrollBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setScrollBarColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Color_I32_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Color_I32_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Color_I32_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Color_I32_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setScrollBarColor(self, static_cast<Opt_Union_Color_I32_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setScrollBarColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setScrollBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarState valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarState>(thisDeserializer.readInt32());
        }
        Opt_BarState valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setScrollBar(self, static_cast<Opt_BarState*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setScrollBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnScrollBarUpdate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_F64_ComputedBarAttribute valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_Float64 offset, const Callback_ComputedBarAttribute_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_F64_ComputedBarAttribute)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_Float64 offset, const Callback_ComputedBarAttribute_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_F64_ComputedBarAttribute))))};
        }
        Opt_Callback_I32_F64_ComputedBarAttribute valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnScrollBarUpdate(self, static_cast<Opt_Callback_I32_F64_ComputedBarAttribute*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnScrollBarUpdate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnScrollIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 first, const Ark_Int32 last)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 first, const Ark_Int32 last)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnScrollIndex(self, static_cast<Opt_Callback_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnScrollIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setCachedCount0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setCachedCount0(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setCachedCount0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setEditMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setEditMode(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setEditMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setMultiSelectable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setMultiSelectable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setMultiSelectable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setMaxCount(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setMaxCount(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setMaxCount, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setMinCount(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setMinCount(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setMinCount, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setCellLength(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setCellLength(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setCellLength, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setLayoutDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GridDirection valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_GridDirection>(thisDeserializer.readInt32());
        }
        Opt_GridDirection valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setLayoutDirection(self, static_cast<Opt_GridDirection*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setLayoutDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setSupportAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setSupportAnimation(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setSupportAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnItemDragStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnItemDragStartCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Callback_Opt_CustomBuilder_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnItemDragStartCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Callback_Opt_CustomBuilder_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnItemDragStartCallback))))};
        }
        Opt_OnItemDragStartCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnItemDragStart(self, static_cast<Opt_OnItemDragStartCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnItemDragStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnItemDragEnter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_Void))))};
        }
        Opt_Callback_ItemDragInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnItemDragEnter(self, static_cast<Opt_Callback_ItemDragInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnItemDragEnter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnItemDragMove(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_I32_I32_Void))))};
        }
        Opt_Callback_ItemDragInfo_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnItemDragMove(self, static_cast<Opt_Callback_ItemDragInfo_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnItemDragMove, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnItemDragLeave(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_I32_Void))))};
        }
        Opt_Callback_ItemDragInfo_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnItemDragLeave(self, static_cast<Opt_Callback_ItemDragInfo_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnItemDragLeave, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnItemDrop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_I32_I32_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex, const Ark_Boolean isSuccess)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_I32_I32_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex, const Ark_Boolean isSuccess)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_I32_I32_Boolean_Void))))};
        }
        Opt_Callback_ItemDragInfo_I32_I32_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnItemDrop(self, static_cast<Opt_Callback_ItemDragInfo_I32_I32_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnItemDrop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setNestedScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NestedScrollOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = NestedScrollOptions_serializer::read(thisDeserializer);
        }
        Opt_NestedScrollOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setNestedScroll(self, static_cast<Opt_NestedScrollOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setNestedScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setEnableScrollInteraction(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setEnableScrollInteraction(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setEnableScrollInteraction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setFriction(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setFriction(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setFriction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setAlignItems(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GridItemAlignment valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_GridItemAlignment>(thisDeserializer.readInt32());
        }
        Opt_GridItemAlignment valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setAlignItems(self, static_cast<Opt_GridItemAlignment*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setAlignItems, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnScrollFrameBegin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollFrameBeginCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollFrameBeginCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollFrameBeginCallback))))};
        }
        Opt_OnScrollFrameBeginCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnScrollFrameBegin(self, static_cast<Opt_OnScrollFrameBeginCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnScrollFrameBegin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnWillScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnWillScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_ScrollResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnWillScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_ScrollResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnWillScrollCallback))))};
        }
        Opt_OnWillScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnWillScroll(self, static_cast<Opt_OnWillScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnWillScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setOnDidScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollCallback))))};
        }
        Opt_OnScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setOnDidScroll(self, static_cast<Opt_OnScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setOnDidScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setCachedCount1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto countValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 countValueTempTmpBuf = {};
        countValueTempTmpBuf.tag = countValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((countValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            countValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 countValueTemp = countValueTempTmpBuf;;
        const auto showValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean showValueTempTmpBuf = {};
        showValueTempTmpBuf.tag = showValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((showValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            showValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean showValueTemp = showValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setCachedCount1(self, static_cast<Opt_Int32*>(&countValueTemp), static_cast<Opt_Boolean*>(&showValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setCachedCount1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridAttribute_setEdgeEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EdgeEffect>(thisDeserializer.readInt32());
        }
        Opt_EdgeEffect valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffectOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = EdgeEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_EdgeEffectOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getGridModifier()->setEdgeEffect(self, static_cast<Opt_EdgeEffect*>(&valueValueTemp), static_cast<Opt_EdgeEffectOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridAttribute_setEdgeEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_GridCol_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getGridColModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(GridCol_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_GridColInterface_setGridColOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GridColOptions optionValueTempTmpBuf = {};
        optionValueTempTmpBuf.tag = optionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionValueTempTmpBuf.value = GridColOptions_serializer::read(thisDeserializer);
        }
        Opt_GridColOptions optionValueTemp = optionValueTempTmpBuf;;
        GetNodeModifiers()->getGridColModifier()->setGridColOptions(self, static_cast<Opt_GridColOptions*>(&optionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridColInterface_setGridColOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridColAttribute_setSpan(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_GridColColumnOption valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_GridColColumnOption valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = GridColColumnOption_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_GridColColumnOption>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_GridColColumnOption valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridColModifier()->setSpan(self, static_cast<Opt_Union_Number_GridColColumnOption*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridColAttribute_setSpan, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridColAttribute_setGridColOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_GridColColumnOption valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_GridColColumnOption valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = GridColColumnOption_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_GridColColumnOption>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_GridColColumnOption valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridColModifier()->setGridColOffset(self, static_cast<Opt_Union_Number_GridColColumnOption*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridColAttribute_setGridColOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridColAttribute_setOrder(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Number_GridColColumnOption valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Number_GridColColumnOption valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = GridColColumnOption_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Number_GridColColumnOption>(valueValueTempTmpBuf_);
        }
        Opt_Union_Number_GridColColumnOption valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridColModifier()->setOrder(self, static_cast<Opt_Union_Number_GridColColumnOption*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridColAttribute_setOrder, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_GridItem_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getGridItemModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(GridItem_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_GridItemInterface_setGridItemOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GridItemOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = GridItemOptions_serializer::read(thisDeserializer);
        }
        Opt_GridItemOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setGridItemOptions(self, static_cast<Opt_GridItemOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemInterface_setGridItemOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridItemAttribute_setRowStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setRowStart(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemAttribute_setRowStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridItemAttribute_setRowEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setRowEnd(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemAttribute_setRowEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridItemAttribute_setColumnStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setColumnStart(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemAttribute_setColumnStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridItemAttribute_setColumnEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setColumnEnd(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemAttribute_setColumnEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridItemAttribute_setSelectable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setSelectable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemAttribute_setSelectable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridItemAttribute_setSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setSelected(self, static_cast<Opt_Union_Boolean_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemAttribute_setSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridItemAttribute_setOnSelect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isSelected)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isSelected)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridItemModifier()->setOnSelect(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridItemAttribute_setOnSelect, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_GridRow_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getGridRowModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(GridRow_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_GridRowInterface_setGridRowOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GridRowOptions optionValueTempTmpBuf = {};
        optionValueTempTmpBuf.tag = optionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionValueTempTmpBuf.value = GridRowOptions_serializer::read(thisDeserializer);
        }
        Opt_GridRowOptions optionValueTemp = optionValueTempTmpBuf;;
        GetNodeModifiers()->getGridRowModifier()->setGridRowOptions(self, static_cast<Opt_GridRowOptions*>(&optionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridRowInterface_setGridRowOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridRowAttribute_setOnBreakpointChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String breakpoints)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String breakpoints)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridRowModifier()->setOnBreakpointChange(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridRowAttribute_setOnBreakpointChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GridRowAttribute_setAlignItems(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ItemAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ItemAlign>(thisDeserializer.readInt32());
        }
        Opt_ItemAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getGridRowModifier()->setAlignItems(self, static_cast<Opt_ItemAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GridRowAttribute_setAlignItems, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Hyperlink_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getHyperlinkModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Hyperlink_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_HyperlinkInterface_setHyperlinkOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto addressValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource addressValueTempTmpBuf = {};
        addressValueTempTmpBuf.tag = addressValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((addressValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 addressValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource addressValueTempTmpBuf_ = {};
            addressValueTempTmpBuf_.selector = addressValueTempTmpBuf_UnionSelector;
            if (addressValueTempTmpBuf_UnionSelector == 0) {
                addressValueTempTmpBuf_.selector = 0;
                addressValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (addressValueTempTmpBuf_UnionSelector == 1) {
                addressValueTempTmpBuf_.selector = 1;
                addressValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for addressValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            addressValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(addressValueTempTmpBuf_);
        }
        Opt_Union_String_Resource addressValueTemp = addressValueTempTmpBuf;;
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 contentValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource contentValueTempTmpBuf_ = {};
            contentValueTempTmpBuf_.selector = contentValueTempTmpBuf_UnionSelector;
            if (contentValueTempTmpBuf_UnionSelector == 0) {
                contentValueTempTmpBuf_.selector = 0;
                contentValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (contentValueTempTmpBuf_UnionSelector == 1) {
                contentValueTempTmpBuf_.selector = 1;
                contentValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for contentValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            contentValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(contentValueTempTmpBuf_);
        }
        Opt_Union_String_Resource contentValueTemp = contentValueTempTmpBuf;;
        GetNodeModifiers()->getHyperlinkModifier()->setHyperlinkOptions(self, static_cast<Opt_Union_String_Resource*>(&addressValueTemp), static_cast<Opt_Union_String_Resource*>(&contentValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HyperlinkInterface_setHyperlinkOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_HyperlinkAttribute_setColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Color_I32_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Color_I32_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Color_I32_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_Color_I32_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getHyperlinkModifier()->setColor(self, static_cast<Opt_Union_Color_I32_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HyperlinkAttribute_setColor, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Image_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getImageModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Image_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ImageInterface_setImageOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 srcValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_PixelMap_ResourceStr_DrawableDescriptor_ImageContent srcValueTempTmpBuf = {};
        srcValueTempTmpBuf.selector = srcValueTempTmpBufUnionSelector;
        if (srcValueTempTmpBufUnionSelector == 0) {
            srcValueTempTmpBuf.selector = 0;
            srcValueTempTmpBuf.value0 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else if (srcValueTempTmpBufUnionSelector == 1) {
            srcValueTempTmpBuf.selector = 1;
            const Ark_Int8 srcValueTempTmpBufBufUUnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr srcValueTempTmpBufBufU = {};
            srcValueTempTmpBufBufU.selector = srcValueTempTmpBufBufUUnionSelector;
            if (srcValueTempTmpBufBufUUnionSelector == 0) {
                srcValueTempTmpBufBufU.selector = 0;
                srcValueTempTmpBufBufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (srcValueTempTmpBufBufUUnionSelector == 1) {
                srcValueTempTmpBufBufU.selector = 1;
                srcValueTempTmpBufBufU.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for srcValueTempTmpBufBufU has to be chosen through deserialisation.");
            }
            srcValueTempTmpBuf.value1 = static_cast<Ark_ResourceStr>(srcValueTempTmpBufBufU);
        } else if (srcValueTempTmpBufUnionSelector == 2) {
            srcValueTempTmpBuf.selector = 2;
            srcValueTempTmpBuf.value2 = static_cast<Ark_DrawableDescriptor>(DrawableDescriptor_serializer::read(thisDeserializer));
        } else if (srcValueTempTmpBufUnionSelector == 3) {
            srcValueTempTmpBuf.selector = 3;
            srcValueTempTmpBuf.value3 = static_cast<Ark_ImageContent>(thisDeserializer.readInt32());
        } else {
            INTEROP_FATAL("One of the branches for srcValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_PixelMap_ResourceStr_DrawableDescriptor_ImageContent srcValueTemp = static_cast<Ark_Union_PixelMap_ResourceStr_DrawableDescriptor_ImageContent>(srcValueTempTmpBuf);;
        const auto imageAIOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageAIOptions imageAIOptionsValueTempTmpBuf = {};
        imageAIOptionsValueTempTmpBuf.tag = imageAIOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((imageAIOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            imageAIOptionsValueTempTmpBuf.value = ImageAIOptions_serializer::read(thisDeserializer);
        }
        Opt_ImageAIOptions imageAIOptionsValueTemp = imageAIOptionsValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setImageOptions(self, static_cast<Ark_Union_PixelMap_ResourceStr_DrawableDescriptor_ImageContent*>(&srcValueTemp), static_cast<Opt_ImageAIOptions*>(&imageAIOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageInterface_setImageOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setAlt(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource_PixelMap valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource_PixelMap valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource_PixelMap>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_Resource_PixelMap valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setAlt(self, static_cast<Opt_Union_String_Resource_PixelMap*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setAlt, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setMatchTextDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setMatchTextDirection(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setMatchTextDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setFitOriginalSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setFitOriginalSize(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setFitOriginalSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setFillColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_ColorContent_ColorMetrics valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_ColorContent_ColorMetrics valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_ColorContent>(ColorContent_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_ColorMetrics>(ColorMetrics_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_ColorContent_ColorMetrics>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_ColorContent_ColorMetrics valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setFillColor(self, static_cast<Opt_Union_ResourceColor_ColorContent_ColorMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setFillColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setObjectFit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageFit valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageFit>(thisDeserializer.readInt32());
        }
        Opt_ImageFit valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setObjectFit(self, static_cast<Opt_ImageFit*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setObjectFit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setImageMatrix(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_matrix4_Matrix4Transit valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_matrix4_Matrix4Transit>(matrix4_Matrix4Transit_serializer::read(thisDeserializer));
        }
        Opt_matrix4_Matrix4Transit valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setImageMatrix(self, static_cast<Opt_matrix4_Matrix4Transit*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setImageMatrix, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setObjectRepeat(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageRepeat valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageRepeat>(thisDeserializer.readInt32());
        }
        Opt_ImageRepeat valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setObjectRepeat(self, static_cast<Opt_ImageRepeat*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setObjectRepeat, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setAutoResize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setAutoResize(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setAutoResize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setRenderMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageRenderMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageRenderMode>(thisDeserializer.readInt32());
        }
        Opt_ImageRenderMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setRenderMode(self, static_cast<Opt_ImageRenderMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setRenderMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setDynamicRangeMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DynamicRangeMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_DynamicRangeMode>(thisDeserializer.readInt32());
        }
        Opt_DynamicRangeMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setDynamicRangeMode(self, static_cast<Opt_DynamicRangeMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setDynamicRangeMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setInterpolation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageInterpolation valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageInterpolation>(thisDeserializer.readInt32());
        }
        Opt_ImageInterpolation valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setInterpolation(self, static_cast<Opt_ImageInterpolation*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setInterpolation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setSourceSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageSourceSize valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ImageSourceSize_serializer::read(thisDeserializer);
        }
        Opt_ImageSourceSize valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setSourceSize(self, static_cast<Opt_ImageSourceSize*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setSourceSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setSyncLoad(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setSyncLoad(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setSyncLoad, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setColorFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ColorFilter_DrawingColorFilter valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ColorFilter_DrawingColorFilter valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ColorFilter>(ColorFilter_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_drawing_ColorFilter>(drawing_ColorFilter_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ColorFilter_DrawingColorFilter>(valueValueTempTmpBuf_);
        }
        Opt_Union_ColorFilter_DrawingColorFilter valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setColorFilter(self, static_cast<Opt_Union_ColorFilter_DrawingColorFilter*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setColorFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setCopyOption(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CopyOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CopyOptions>(thisDeserializer.readInt32());
        }
        Opt_CopyOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setCopyOption(self, static_cast<Opt_CopyOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setCopyOption, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setDraggable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setDraggable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setDraggable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setPointLight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PointLightStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PointLightStyle_serializer::read(thisDeserializer);
        }
        Opt_PointLightStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setPointLight(self, static_cast<Opt_PointLightStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setPointLight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setEdgeAntialiasing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setEdgeAntialiasing(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setEdgeAntialiasing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setOnComplete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageOnCompleteCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_ImageCompleteEvent loadEvent)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ImageOnCompleteCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_ImageCompleteEvent loadEvent)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ImageOnCompleteCallback))))};
        }
        Opt_ImageOnCompleteCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setOnComplete(self, static_cast<Opt_ImageOnCompleteCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setOnComplete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setOnError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageErrorCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ImageError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ImageErrorCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ImageError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ImageErrorCallback))))};
        }
        Opt_ImageErrorCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setOnError(self, static_cast<Opt_ImageErrorCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setOnError, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setOnFinish(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setOnFinish(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setOnFinish, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setEnableAnalyzer(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setEnableAnalyzer(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setEnableAnalyzer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setAnalyzerConfig(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageAnalyzerConfig valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ImageAnalyzerConfig_serializer::read(thisDeserializer);
        }
        Opt_ImageAnalyzerConfig valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setAnalyzerConfig(self, static_cast<Opt_ImageAnalyzerConfig*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setAnalyzerConfig, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setResizable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResizableOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ResizableOptions_serializer::read(thisDeserializer);
        }
        Opt_ResizableOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setResizable(self, static_cast<Opt_ResizableOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setResizable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setPrivacySensitive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setPrivacySensitive(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setPrivacySensitive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setEnhancedImageQuality(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_image_ResolutionQuality valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_image_ResolutionQuality>(thisDeserializer.readInt32());
        }
        Opt_image_ResolutionQuality valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setEnhancedImageQuality(self, static_cast<Opt_image_ResolutionQuality*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setEnhancedImageQuality, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAttribute_setOrientation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageRotateOrientation valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageRotateOrientation>(thisDeserializer.readInt32());
        }
        Opt_ImageRotateOrientation valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageModifier()->setOrientation(self, static_cast<Opt_ImageRotateOrientation*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAttribute_setOrientation, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ImageAnimator_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getImageAnimatorModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ImageAnimator_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ImageAnimatorInterface_setImageAnimatorOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getImageAnimatorModifier()->setImageAnimatorOptions(self);
}
KOALA_INTEROP_DIRECT_V1(ImageAnimatorInterface_setImageAnimatorOptions, Ark_NativePointer)
void impl_ImageAnimatorAttribute_setImages(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ImageFrameInfo valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ImageFrameInfo valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = ImageFrameInfo_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ImageFrameInfo valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setImages(self, static_cast<Opt_Array_ImageFrameInfo*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setImages, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AnimationStatus valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AnimationStatus>(thisDeserializer.readInt32());
        }
        Opt_AnimationStatus valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setState(self, static_cast<Opt_AnimationStatus*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setState, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setDuration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setDuration(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setDuration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setReverse(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setReverse(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setReverse, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setFixedSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setFixedSize(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setFixedSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setFillMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FillMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FillMode>(thisDeserializer.readInt32());
        }
        Opt_FillMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setFillMode(self, static_cast<Opt_FillMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setFillMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setIterations(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setIterations(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setIterations, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setMonitorInvisibleArea(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setMonitorInvisibleArea(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setMonitorInvisibleArea, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setOnStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setOnStart(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setOnStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setOnPause(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setOnPause(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setOnPause, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setOnRepeat(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setOnRepeat(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setOnRepeat, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setOnCancel(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setOnCancel(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setOnCancel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageAnimatorAttribute_setOnFinish(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageAnimatorModifier()->setOnFinish(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageAnimatorAttribute_setOnFinish, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ImageSpan_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getImageSpanModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ImageSpan_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ImageSpanInterface_setImageSpanOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_ResourceStr_PixelMap valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            const Ark_Int8 valueValueTempTmpBufBufUUnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBufBufU = {};
            valueValueTempTmpBufBufU.selector = valueValueTempTmpBufBufUUnionSelector;
            if (valueValueTempTmpBufBufUUnionSelector == 0) {
                valueValueTempTmpBufBufU.selector = 0;
                valueValueTempTmpBufBufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBufBufUUnionSelector == 1) {
                valueValueTempTmpBufBufU.selector = 1;
                valueValueTempTmpBufBufU.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBufBufU has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value0 = static_cast<Ark_ResourceStr>(valueValueTempTmpBufBufU);
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_ResourceStr_PixelMap valueValueTemp = static_cast<Ark_Union_ResourceStr_PixelMap>(valueValueTempTmpBuf);;
        GetNodeModifiers()->getImageSpanModifier()->setImageSpanOptions(self, static_cast<Ark_Union_ResourceStr_PixelMap*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageSpanInterface_setImageSpanOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageSpanAttribute_setVerticalAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageSpanAlignment valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageSpanAlignment>(thisDeserializer.readInt32());
        }
        Opt_ImageSpanAlignment valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageSpanModifier()->setVerticalAlign(self, static_cast<Opt_ImageSpanAlignment*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageSpanAttribute_setVerticalAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageSpanAttribute_setColorFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ColorFilter_DrawingColorFilter valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ColorFilter_DrawingColorFilter valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ColorFilter>(ColorFilter_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_drawing_ColorFilter>(drawing_ColorFilter_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ColorFilter_DrawingColorFilter>(valueValueTempTmpBuf_);
        }
        Opt_Union_ColorFilter_DrawingColorFilter valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageSpanModifier()->setColorFilter(self, static_cast<Opt_Union_ColorFilter_DrawingColorFilter*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageSpanAttribute_setColorFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageSpanAttribute_setObjectFit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageFit valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageFit>(thisDeserializer.readInt32());
        }
        Opt_ImageFit valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageSpanModifier()->setObjectFit(self, static_cast<Opt_ImageFit*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageSpanAttribute_setObjectFit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageSpanAttribute_setOnComplete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageCompleteCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ImageLoadResult result)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ImageCompleteCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ImageLoadResult result)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ImageCompleteCallback))))};
        }
        Opt_ImageCompleteCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageSpanModifier()->setOnComplete(self, static_cast<Opt_ImageCompleteCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageSpanAttribute_setOnComplete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageSpanAttribute_setOnError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageErrorCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ImageError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ImageErrorCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ImageError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ImageErrorCallback))))};
        }
        Opt_ImageErrorCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageSpanModifier()->setOnError(self, static_cast<Opt_ImageErrorCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageSpanAttribute_setOnError, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ImageSpanAttribute_setAlt(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_image_PixelMap valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        }
        Opt_image_PixelMap valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getImageSpanModifier()->setAlt(self, static_cast<Opt_image_PixelMap*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageSpanAttribute_setAlt, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_IndicatorComponent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getIndicatorComponentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(IndicatorComponent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_IndicatorComponentInterface_setIndicatorComponentOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto controllerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_IndicatorComponentController controllerValueTempTmpBuf = {};
        controllerValueTempTmpBuf.tag = controllerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((controllerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            controllerValueTempTmpBuf.value = static_cast<Ark_IndicatorComponentController>(IndicatorComponentController_serializer::read(thisDeserializer));
        }
        Opt_IndicatorComponentController controllerValueTemp = controllerValueTempTmpBuf;;
        GetNodeModifiers()->getIndicatorComponentModifier()->setIndicatorComponentOptions(self, static_cast<Opt_IndicatorComponentController*>(&controllerValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentInterface_setIndicatorComponentOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_IndicatorComponentAttribute_setInitialIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getIndicatorComponentModifier()->setInitialIndex(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentAttribute_setInitialIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_IndicatorComponentAttribute_setCount(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getIndicatorComponentModifier()->setCount(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentAttribute_setCount, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_IndicatorComponentAttribute_setStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_DotIndicator_DigitIndicator valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_DotIndicator_DigitIndicator valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = DotIndicator_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = DigitIndicator_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_DotIndicator_DigitIndicator>(valueValueTempTmpBuf_);
        }
        Opt_Union_DotIndicator_DigitIndicator valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getIndicatorComponentModifier()->setStyle(self, static_cast<Opt_Union_DotIndicator_DigitIndicator*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentAttribute_setStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_IndicatorComponentAttribute_setLoop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getIndicatorComponentModifier()->setLoop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentAttribute_setLoop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_IndicatorComponentAttribute_setVertical(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getIndicatorComponentModifier()->setVertical(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentAttribute_setVertical, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_IndicatorComponentAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getIndicatorComponentModifier()->setOnChange(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LazyGridLayoutAttribute_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getLazyGridLayoutAttributeModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(LazyGridLayoutAttribute_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_LazyGridLayoutAttribute_setRowsGap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetrics valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LengthMetrics>(LengthMetrics_serializer::read(thisDeserializer));
        }
        Opt_LengthMetrics valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLazyGridLayoutAttributeModifier()->setRowsGap(self, static_cast<Opt_LengthMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LazyGridLayoutAttribute_setRowsGap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LazyGridLayoutAttribute_setColumnsGap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetrics valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LengthMetrics>(LengthMetrics_serializer::read(thisDeserializer));
        }
        Opt_LengthMetrics valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLazyGridLayoutAttributeModifier()->setColumnsGap(self, static_cast<Opt_LengthMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LazyGridLayoutAttribute_setColumnsGap, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LazyVGridLayout_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getLazyVGridLayoutModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(LazyVGridLayout_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_LazyVGridLayoutInterface_setLazyVGridLayoutOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getLazyVGridLayoutModifier()->setLazyVGridLayoutOptions(self);
}
KOALA_INTEROP_DIRECT_V1(LazyVGridLayoutInterface_setLazyVGridLayoutOptions, Ark_NativePointer)
void impl_LazyVGridLayoutAttribute_setColumnsTemplate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLazyVGridLayoutModifier()->setColumnsTemplate(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LazyVGridLayoutAttribute_setColumnsTemplate, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Line_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getLineModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Line_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_LineInterface_setLineOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = LineOptions_serializer::read(thisDeserializer);
        }
        Opt_LineOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getLineModifier()->setLineOptions(self, static_cast<Opt_LineOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LineInterface_setLineOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LineAttribute_setStartPoint(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ShapePoint valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            Ark_ShapePoint valueValueTempTmpBuf_ = {};
            const Ark_Int8 valueValueTempTmpBuf_Value0TempBufUnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_Value0TempBuf = {};
            valueValueTempTmpBuf_Value0TempBuf.selector = valueValueTempTmpBuf_Value0TempBufUnionSelector;
            if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 0) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 0;
                valueValueTempTmpBuf_Value0TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 1) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 1;
                valueValueTempTmpBuf_Value0TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 2) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 2;
                valueValueTempTmpBuf_Value0TempBuf.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_Value0TempBuf has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_Value0TempBuf);
            const Ark_Int8 valueValueTempTmpBuf_Value1TempBufUnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_Value1TempBuf = {};
            valueValueTempTmpBuf_Value1TempBuf.selector = valueValueTempTmpBuf_Value1TempBufUnionSelector;
            if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 0) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 0;
                valueValueTempTmpBuf_Value1TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 1) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 1;
                valueValueTempTmpBuf_Value1TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 2) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 2;
                valueValueTempTmpBuf_Value1TempBuf.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_Value1TempBuf has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf_.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_Value1TempBuf);
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_ShapePoint valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLineModifier()->setStartPoint(self, static_cast<Opt_ShapePoint*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LineAttribute_setStartPoint, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LineAttribute_setEndPoint(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ShapePoint valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            Ark_ShapePoint valueValueTempTmpBuf_ = {};
            const Ark_Int8 valueValueTempTmpBuf_Value0TempBufUnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_Value0TempBuf = {};
            valueValueTempTmpBuf_Value0TempBuf.selector = valueValueTempTmpBuf_Value0TempBufUnionSelector;
            if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 0) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 0;
                valueValueTempTmpBuf_Value0TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 1) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 1;
                valueValueTempTmpBuf_Value0TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 2) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 2;
                valueValueTempTmpBuf_Value0TempBuf.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_Value0TempBuf has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_Value0TempBuf);
            const Ark_Int8 valueValueTempTmpBuf_Value1TempBufUnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_Value1TempBuf = {};
            valueValueTempTmpBuf_Value1TempBuf.selector = valueValueTempTmpBuf_Value1TempBufUnionSelector;
            if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 0) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 0;
                valueValueTempTmpBuf_Value1TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 1) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 1;
                valueValueTempTmpBuf_Value1TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 2) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 2;
                valueValueTempTmpBuf_Value1TempBuf.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_Value1TempBuf has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf_.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_Value1TempBuf);
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_ShapePoint valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLineModifier()->setEndPoint(self, static_cast<Opt_ShapePoint*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LineAttribute_setEndPoint, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LinearIndicator_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getLinearIndicatorModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(LinearIndicator_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_LinearIndicatorInterface_setLinearIndicatorOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto countValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number countValueTempTmpBuf = {};
        countValueTempTmpBuf.tag = countValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((countValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            countValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number countValueTemp = countValueTempTmpBuf;;
        const auto controllerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LinearIndicatorController controllerValueTempTmpBuf = {};
        controllerValueTempTmpBuf.tag = controllerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((controllerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            controllerValueTempTmpBuf.value = static_cast<Ark_LinearIndicatorController>(LinearIndicatorController_serializer::read(thisDeserializer));
        }
        Opt_LinearIndicatorController controllerValueTemp = controllerValueTempTmpBuf;;
        GetNodeModifiers()->getLinearIndicatorModifier()->setLinearIndicatorOptions(self, static_cast<Opt_Number*>(&countValueTemp), static_cast<Opt_LinearIndicatorController*>(&controllerValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LinearIndicatorInterface_setLinearIndicatorOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LinearIndicatorAttribute_setIndicatorStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LinearIndicatorStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = LinearIndicatorStyle_serializer::read(thisDeserializer);
        }
        Opt_LinearIndicatorStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLinearIndicatorModifier()->setIndicatorStyle(self, static_cast<Opt_LinearIndicatorStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LinearIndicatorAttribute_setIndicatorStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LinearIndicatorAttribute_setIndicatorLoop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLinearIndicatorModifier()->setIndicatorLoop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LinearIndicatorAttribute_setIndicatorLoop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LinearIndicatorAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnLinearIndicatorChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Number index, const Ark_Number progress)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnLinearIndicatorChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Number index, const Ark_Number progress)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnLinearIndicatorChangeCallback))))};
        }
        Opt_OnLinearIndicatorChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLinearIndicatorModifier()->setOnChange(self, static_cast<Opt_OnLinearIndicatorChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LinearIndicatorAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_List_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getListModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(List_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ListInterface_setListOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ListOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ListOptions_serializer::read(thisDeserializer);
        }
        Opt_ListOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setListOptions(self, static_cast<Opt_ListOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListInterface_setListOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setAlignListItem(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ListItemAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ListItemAlign>(thisDeserializer.readInt32());
        }
        Opt_ListItemAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setAlignListItem(self, static_cast<Opt_ListItemAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setAlignListItem, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setListDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Axis valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Axis>(thisDeserializer.readInt32());
        }
        Opt_Axis valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setListDirection(self, static_cast<Opt_Axis*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setListDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setContentStartOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setContentStartOffset(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setContentStartOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setContentEndOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setContentEndOffset(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setContentEndOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ListDividerOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ListDividerOptions_serializer::read(thisDeserializer);
        }
        Opt_ListDividerOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setDivider(self, static_cast<Opt_ListDividerOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setMultiSelectable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setMultiSelectable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setMultiSelectable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setCachedCount0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setCachedCount0(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setCachedCount0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setChainAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setChainAnimation(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setChainAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setChainAnimationOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ChainAnimationOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ChainAnimationOptions_serializer::read(thisDeserializer);
        }
        Opt_ChainAnimationOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setChainAnimationOptions(self, static_cast<Opt_ChainAnimationOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setChainAnimationOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setSticky(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_StickyStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_StickyStyle>(thisDeserializer.readInt32());
        }
        Opt_StickyStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setSticky(self, static_cast<Opt_StickyStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setSticky, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setScrollSnapAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollSnapAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ScrollSnapAlign>(thisDeserializer.readInt32());
        }
        Opt_ScrollSnapAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setScrollSnapAlign(self, static_cast<Opt_ScrollSnapAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setScrollSnapAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setChildrenMainSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ChildrenMainSize valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ChildrenMainSize>(ChildrenMainSize_serializer::read(thisDeserializer));
        }
        Opt_ChildrenMainSize valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setChildrenMainSize(self, static_cast<Opt_ChildrenMainSize*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setChildrenMainSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setMaintainVisibleContentPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setMaintainVisibleContentPosition(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setMaintainVisibleContentPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setStackFromEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setStackFromEnd(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setStackFromEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnScrollIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 start, const Ark_Int32 end, const Ark_Int32 center)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 start, const Ark_Int32 end, const Ark_Int32 center)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnScrollIndex(self, static_cast<Opt_Callback_I32_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnScrollIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnScrollVisibleContentChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollVisibleContentChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_VisibleListContentInfo start, const Ark_VisibleListContentInfo end)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollVisibleContentChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_VisibleListContentInfo start, const Ark_VisibleListContentInfo end)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollVisibleContentChangeCallback))))};
        }
        Opt_OnScrollVisibleContentChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnScrollVisibleContentChange(self, static_cast<Opt_OnScrollVisibleContentChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnScrollVisibleContentChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnItemMove(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Boolean))))};
        }
        Opt_Callback_I32_I32_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnItemMove(self, static_cast<Opt_Callback_I32_I32_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnItemMove, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnItemDragStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnItemDragStartCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Callback_Opt_CustomBuilder_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnItemDragStartCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Callback_Opt_CustomBuilder_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnItemDragStartCallback))))};
        }
        Opt_OnItemDragStartCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnItemDragStart(self, static_cast<Opt_OnItemDragStartCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnItemDragStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnItemDragEnter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_Void))))};
        }
        Opt_Callback_ItemDragInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnItemDragEnter(self, static_cast<Opt_Callback_ItemDragInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnItemDragEnter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnItemDragMove(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_I32_I32_Void))))};
        }
        Opt_Callback_ItemDragInfo_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnItemDragMove(self, static_cast<Opt_Callback_ItemDragInfo_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnItemDragMove, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnItemDragLeave(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_I32_Void))))};
        }
        Opt_Callback_ItemDragInfo_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnItemDragLeave(self, static_cast<Opt_Callback_ItemDragInfo_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnItemDragLeave, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnItemDrop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ItemDragInfo_I32_I32_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex, const Ark_Boolean isSuccess)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ItemDragInfo_I32_I32_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ItemDragInfo event, const Ark_Int32 itemIndex, const Ark_Int32 insertIndex, const Ark_Boolean isSuccess)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ItemDragInfo_I32_I32_Boolean_Void))))};
        }
        Opt_Callback_ItemDragInfo_I32_I32_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnItemDrop(self, static_cast<Opt_Callback_ItemDragInfo_I32_I32_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnItemDrop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnScrollFrameBegin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollFrameBeginCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollFrameBeginCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollFrameBeginCallback))))};
        }
        Opt_OnScrollFrameBeginCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnScrollFrameBegin(self, static_cast<Opt_OnScrollFrameBeginCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnScrollFrameBegin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnWillScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnWillScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_ScrollResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnWillScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_ScrollResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnWillScrollCallback))))};
        }
        Opt_OnWillScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnWillScroll(self, static_cast<Opt_OnWillScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnWillScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setOnDidScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollCallback))))};
        }
        Opt_OnScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setOnDidScroll(self, static_cast<Opt_OnScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setOnDidScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setLanes(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_LengthConstrain valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_LengthConstrain valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = LengthConstrain_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_LengthConstrain>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_LengthConstrain valueValueTemp = valueValueTempTmpBuf;;
        const auto gutterValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension gutterValueTempTmpBuf = {};
        gutterValueTempTmpBuf.tag = gutterValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((gutterValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 gutterValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension gutterValueTempTmpBuf_ = {};
            gutterValueTempTmpBuf_.selector = gutterValueTempTmpBuf_UnionSelector;
            if (gutterValueTempTmpBuf_UnionSelector == 0) {
                gutterValueTempTmpBuf_.selector = 0;
                gutterValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (gutterValueTempTmpBuf_UnionSelector == 1) {
                gutterValueTempTmpBuf_.selector = 1;
                gutterValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (gutterValueTempTmpBuf_UnionSelector == 2) {
                gutterValueTempTmpBuf_.selector = 2;
                gutterValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for gutterValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            gutterValueTempTmpBuf.value = static_cast<Ark_Dimension>(gutterValueTempTmpBuf_);
        }
        Opt_Dimension gutterValueTemp = gutterValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setLanes(self, static_cast<Opt_Union_I32_LengthConstrain*>(&valueValueTemp), static_cast<Opt_Dimension*>(&gutterValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setLanes, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListAttribute_setCachedCount1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto countValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 countValueTempTmpBuf = {};
        countValueTempTmpBuf.tag = countValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((countValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            countValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 countValueTemp = countValueTempTmpBuf;;
        const auto showValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean showValueTempTmpBuf = {};
        showValueTempTmpBuf.tag = showValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((showValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            showValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean showValueTemp = showValueTempTmpBuf;;
        GetNodeModifiers()->getListModifier()->setCachedCount1(self, static_cast<Opt_Int32*>(&countValueTemp), static_cast<Opt_Boolean*>(&showValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListAttribute_setCachedCount1, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ListItem_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getListItemModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ListItem_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ListItemInterface_setListItemOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ListItemOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ListItemOptions_serializer::read(thisDeserializer);
        }
        Opt_ListItemOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListItemModifier()->setListItemOptions(self, static_cast<Opt_ListItemOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemInterface_setListItemOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListItemAttribute_setSelectable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListItemModifier()->setSelectable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemAttribute_setSelectable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListItemAttribute_setSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListItemModifier()->setSelected(self, static_cast<Opt_Union_Boolean_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemAttribute_setSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListItemAttribute_setSwipeAction(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SwipeActionOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SwipeActionOptions_serializer::read(thisDeserializer);
        }
        Opt_SwipeActionOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListItemModifier()->setSwipeAction(self, static_cast<Opt_SwipeActionOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemAttribute_setSwipeAction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListItemAttribute_setOnSelect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isSelected)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isSelected)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListItemModifier()->setOnSelect(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemAttribute_setOnSelect, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ListItemGroup_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getListItemGroupModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ListItemGroup_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ListItemGroupInterface_setListItemGroupOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ListItemGroupOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ListItemGroupOptions_serializer::read(thisDeserializer);
        }
        Opt_ListItemGroupOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getListItemGroupModifier()->setListItemGroupOptions(self, static_cast<Opt_ListItemGroupOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemGroupInterface_setListItemGroupOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListItemGroupAttribute_setDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ListDividerOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ListDividerOptions_serializer::read(thisDeserializer);
        }
        Opt_ListDividerOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListItemGroupModifier()->setDivider(self, static_cast<Opt_ListDividerOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemGroupAttribute_setDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ListItemGroupAttribute_setChildrenMainSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ChildrenMainSize valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ChildrenMainSize>(ChildrenMainSize_serializer::read(thisDeserializer));
        }
        Opt_ChildrenMainSize valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getListItemGroupModifier()->setChildrenMainSize(self, static_cast<Opt_ChildrenMainSize*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListItemGroupAttribute_setChildrenMainSize, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LoadingProgress_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getLoadingProgressModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(LoadingProgress_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_LoadingProgressInterface_setLoadingProgressOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getLoadingProgressModifier()->setLoadingProgressOptions(self);
}
KOALA_INTEROP_DIRECT_V1(LoadingProgressInterface_setLoadingProgressOptions, Ark_NativePointer)
void impl_LoadingProgressAttribute_setColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLoadingProgressModifier()->setColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LoadingProgressAttribute_setColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LoadingProgressAttribute_setEnableLoading(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getLoadingProgressModifier()->setEnableLoading(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LoadingProgressAttribute_setEnableLoading, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Marquee_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getMarqueeModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Marquee_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_MarqueeInterface_setMarqueeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_MarqueeOptions optionsValueTemp = MarqueeOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getMarqueeModifier()->setMarqueeOptions(self, static_cast<Ark_MarqueeOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeInterface_setMarqueeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setFontSize(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setAllowScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setAllowScale(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setAllowScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setFontFamily(self, static_cast<Opt_Union_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setMarqueeUpdateStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MarqueeUpdateStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_MarqueeUpdateStrategy>(thisDeserializer.readInt32());
        }
        Opt_MarqueeUpdateStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setMarqueeUpdateStrategy(self, static_cast<Opt_MarqueeUpdateStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setMarqueeUpdateStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setOnStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setOnStart(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setOnStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setOnBounce(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setOnBounce(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setOnBounce, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MarqueeAttribute_setOnFinish(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMarqueeModifier()->setOnFinish(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MarqueeAttribute_setOnFinish, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_MediaCachedImage_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getMediaCachedImageModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(MediaCachedImage_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_MediaCachedImageInterface_setMediaCachedImageOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 srcValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Image_PixelMap_ResourceStr_DrawableDescriptor_ASTCResource srcValueTempTmpBuf = {};
        srcValueTempTmpBuf.selector = srcValueTempTmpBufUnionSelector;
        if (srcValueTempTmpBufUnionSelector == 0) {
            srcValueTempTmpBuf.selector = 0;
            srcValueTempTmpBuf.value0 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else if (srcValueTempTmpBufUnionSelector == 1) {
            srcValueTempTmpBuf.selector = 1;
            const Ark_Int8 srcValueTempTmpBufBufUUnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr srcValueTempTmpBufBufU = {};
            srcValueTempTmpBufBufU.selector = srcValueTempTmpBufBufUUnionSelector;
            if (srcValueTempTmpBufBufUUnionSelector == 0) {
                srcValueTempTmpBufBufU.selector = 0;
                srcValueTempTmpBufBufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (srcValueTempTmpBufBufUUnionSelector == 1) {
                srcValueTempTmpBufBufU.selector = 1;
                srcValueTempTmpBufBufU.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for srcValueTempTmpBufBufU has to be chosen through deserialisation.");
            }
            srcValueTempTmpBuf.value1 = static_cast<Ark_ResourceStr>(srcValueTempTmpBufBufU);
        } else if (srcValueTempTmpBufUnionSelector == 2) {
            srcValueTempTmpBuf.selector = 2;
            srcValueTempTmpBuf.value2 = static_cast<Ark_DrawableDescriptor>(DrawableDescriptor_serializer::read(thisDeserializer));
        } else if (srcValueTempTmpBufUnionSelector == 3) {
            srcValueTempTmpBuf.selector = 3;
            srcValueTempTmpBuf.value3 = ASTCResource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for srcValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Image_PixelMap_ResourceStr_DrawableDescriptor_ASTCResource srcValueTemp = static_cast<Ark_Union_Image_PixelMap_ResourceStr_DrawableDescriptor_ASTCResource>(srcValueTempTmpBuf);;
        GetNodeModifiers()->getMediaCachedImageModifier()->setMediaCachedImageOptions(self, static_cast<Ark_Union_Image_PixelMap_ResourceStr_DrawableDescriptor_ASTCResource*>(&srcValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MediaCachedImageInterface_setMediaCachedImageOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Menu_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getMenuModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Menu_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_MenuInterface_setMenuOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getMenuModifier()->setMenuOptions(self);
}
KOALA_INTEROP_DIRECT_V1(MenuInterface_setMenuOptions, Ark_NativePointer)
void impl_MenuAttribute_setFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuModifier()->setFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuAttribute_setFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuAttribute_setRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Dimension_BorderRadiuses valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Dimension_BorderRadiuses valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = BorderRadiuses_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Dimension_BorderRadiuses>(valueValueTempTmpBuf_);
        }
        Opt_Union_Dimension_BorderRadiuses valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuModifier()->setRadius(self, static_cast<Opt_Union_Dimension_BorderRadiuses*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuAttribute_setRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuAttribute_setMenuItemDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DividerStyleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DividerStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_DividerStyleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuModifier()->setMenuItemDivider(self, static_cast<Opt_DividerStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuAttribute_setMenuItemDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuAttribute_setMenuItemGroupDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DividerStyleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DividerStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_DividerStyleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuModifier()->setMenuItemGroupDivider(self, static_cast<Opt_DividerStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuAttribute_setMenuItemGroupDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuAttribute_setSubMenuExpandingMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SubMenuExpandingMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SubMenuExpandingMode>(thisDeserializer.readInt32());
        }
        Opt_SubMenuExpandingMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuModifier()->setSubMenuExpandingMode(self, static_cast<Opt_SubMenuExpandingMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuAttribute_setSubMenuExpandingMode, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_MenuItem_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getMenuItemModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(MenuItem_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_MenuItemInterface_setMenuItemOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_MenuItemOptions_CustomBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_MenuItemOptions_CustomBuilder valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = MenuItemOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_MenuItemOptions_CustomBuilder>(valueValueTempTmpBuf_);
        }
        Opt_Union_MenuItemOptions_CustomBuilder valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setMenuItemOptions(self, static_cast<Opt_Union_MenuItemOptions_CustomBuilder*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemInterface_setMenuItemOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuItemAttribute_setSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setSelected(self, static_cast<Opt_Union_Boolean_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemAttribute_setSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuItemAttribute_setSelectIcon(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_ResourceStr_SymbolGlyphModifier valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_ResourceStr_SymbolGlyphModifier valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value1 = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_SymbolGlyphModifier>(SymbolGlyphModifier_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_ResourceStr_SymbolGlyphModifier>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_ResourceStr_SymbolGlyphModifier valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setSelectIcon(self, static_cast<Opt_Union_Boolean_ResourceStr_SymbolGlyphModifier*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemAttribute_setSelectIcon, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuItemAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean selected)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean selected)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setOnChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuItemAttribute_setContentFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setContentFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemAttribute_setContentFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuItemAttribute_setContentFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setContentFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemAttribute_setContentFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuItemAttribute_setLabelFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setLabelFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemAttribute_setLabelFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MenuItemAttribute_setLabelFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemModifier()->setLabelFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemAttribute_setLabelFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_MenuItemGroup_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getMenuItemGroupModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(MenuItemGroup_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_MenuItemGroupInterface_setMenuItemGroupOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MenuItemGroupOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = MenuItemGroupOptions_serializer::read(thisDeserializer);
        }
        Opt_MenuItemGroupOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getMenuItemGroupModifier()->setMenuItemGroupOptions(self, static_cast<Opt_MenuItemGroupOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MenuItemGroupInterface_setMenuItemGroupOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_NavDestination_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getNavDestinationModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(NavDestination_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_NavDestinationInterface_setNavDestinationOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getNavDestinationModifier()->setNavDestinationOptions(self);
}
KOALA_INTEROP_DIRECT_V1(NavDestinationInterface_setNavDestinationOptions, Ark_NativePointer)
void impl_NavDestinationAttribute_setHideTitleBar0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setHideTitleBar0(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setHideTitleBar0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setHideBackButton(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setHideBackButton(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setHideBackButton, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnShown(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnShown(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnShown, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnHidden(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnHidden(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnHidden, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnBackPressed(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean))))};
        }
        Opt_Callback_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnBackPressed(self, static_cast<Opt_Callback_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnBackPressed, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnResult(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void))))};
        }
        Opt_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnResult(self, static_cast<Opt_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnResult, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavDestinationMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_NavDestinationMode>(thisDeserializer.readInt32());
        }
        Opt_NavDestinationMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setMode(self, static_cast<Opt_NavDestinationMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnReady(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_NavDestinationContext_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NavDestinationContext value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_NavDestinationContext_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NavDestinationContext value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_NavDestinationContext_Void))))};
        }
        Opt_Callback_NavDestinationContext_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnReady(self, static_cast<Opt_Callback_NavDestinationContext_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnReady, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnWillAppear(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnWillAppear(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnWillAppear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnWillDisappear(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnWillDisappear(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnWillDisappear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnWillShow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnWillShow(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnWillShow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnWillHide(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnWillHide(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnWillHide, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setSystemBarStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_window_SystemBarStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = window_SystemBarStyle_serializer::read(thisDeserializer);
        }
        Opt_window_SystemBarStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setSystemBarStyle(self, static_cast<Opt_window_SystemBarStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setSystemBarStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setRecoverable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setRecoverable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setRecoverable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setSystemTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationSystemTransitionType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_NavigationSystemTransitionType>(thisDeserializer.readInt32());
        }
        Opt_NavigationSystemTransitionType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setSystemTransition(self, static_cast<Opt_NavigationSystemTransitionType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setSystemTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setBindToScrollable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Scroller valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Scroller valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_Scroller>(Scroller_serializer::read(thisDeserializer));
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_Scroller valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setBindToScrollable(self, static_cast<Opt_Array_Scroller*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setBindToScrollable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setBindToNestedScrollable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_NestedScrollInfo valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_NestedScrollInfo valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = NestedScrollInfo_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_NestedScrollInfo valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setBindToNestedScrollable(self, static_cast<Opt_Array_NestedScrollInfo*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setBindToNestedScrollable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnActive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_NavDestinationActiveReason_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_NavDestinationActiveReason value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_NavDestinationActiveReason_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_NavDestinationActiveReason value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_NavDestinationActiveReason_Void))))};
        }
        Opt_Callback_NavDestinationActiveReason_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnActive(self, static_cast<Opt_Callback_NavDestinationActiveReason_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnActive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnInactive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_NavDestinationActiveReason_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_NavDestinationActiveReason value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_NavDestinationActiveReason_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_NavDestinationActiveReason value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_NavDestinationActiveReason_Void))))};
        }
        Opt_Callback_NavDestinationActiveReason_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnInactive(self, static_cast<Opt_Callback_NavDestinationActiveReason_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnInactive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setCustomTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavDestinationTransitionDelegate valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_NavigationOperation operation, const Ark_Boolean isEnter, const Callback_Opt_Array_NavDestinationTransition_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_NavDestinationTransitionDelegate)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_NavigationOperation operation, const Ark_Boolean isEnter, const Callback_Opt_Array_NavDestinationTransition_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_NavDestinationTransitionDelegate))))};
        }
        Opt_NavDestinationTransitionDelegate valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setCustomTransition(self, static_cast<Opt_NavDestinationTransitionDelegate*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setCustomTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setOnNewParam(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void))))};
        }
        Opt_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setOnNewParam(self, static_cast<Opt_Callback_Union_Object_Idlize_Stdlib_Null_Undefined_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setOnNewParam, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setPreferredOrientation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_window_Orientation valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_window_Orientation>(thisDeserializer.readInt32());
        }
        Opt_window_Orientation valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setPreferredOrientation(self, static_cast<Opt_window_Orientation*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setPreferredOrientation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setEnableNavigationIndicator(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setEnableNavigationIndicator(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setEnableNavigationIndicator, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setTitle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_CustomBuilder_NavDestinationCommonTitle_NavDestinationCustomTitle_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_CustomBuilder_NavDestinationCommonTitle_NavDestinationCustomTitle_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = NavDestinationCommonTitle_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = NavDestinationCustomTitle_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 4) {
                valueValueTempTmpBuf_.selector = 4;
                valueValueTempTmpBuf_.value4 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_CustomBuilder_NavDestinationCommonTitle_NavDestinationCustomTitle_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_CustomBuilder_NavDestinationCommonTitle_NavDestinationCustomTitle_Resource valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationTitleOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationTitleOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationTitleOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setTitle(self, static_cast<Opt_Union_String_CustomBuilder_NavDestinationCommonTitle_NavDestinationCustomTitle_Resource*>(&valueValueTemp), static_cast<Opt_NavigationTitleOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setTitle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setHideTitleBar1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto hideValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean hideValueTempTmpBuf = {};
        hideValueTempTmpBuf.tag = hideValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((hideValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            hideValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean hideValueTemp = hideValueTempTmpBuf;;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setHideTitleBar1(self, static_cast<Opt_Boolean*>(&hideValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setHideTitleBar1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setBackButtonIcon(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto iconValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceStr_PixelMap_SymbolGlyphModifier iconValueTempTmpBuf = {};
        iconValueTempTmpBuf.tag = iconValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((iconValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 iconValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceStr_PixelMap_SymbolGlyphModifier iconValueTempTmpBuf_ = {};
            iconValueTempTmpBuf_.selector = iconValueTempTmpBuf_UnionSelector;
            if (iconValueTempTmpBuf_UnionSelector == 0) {
                iconValueTempTmpBuf_.selector = 0;
                const Ark_Int8 iconValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr iconValueTempTmpBuf_BufU = {};
                iconValueTempTmpBuf_BufU.selector = iconValueTempTmpBuf_BufUUnionSelector;
                if (iconValueTempTmpBuf_BufUUnionSelector == 0) {
                    iconValueTempTmpBuf_BufU.selector = 0;
                    iconValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (iconValueTempTmpBuf_BufUUnionSelector == 1) {
                    iconValueTempTmpBuf_BufU.selector = 1;
                    iconValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for iconValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                iconValueTempTmpBuf_.value0 = static_cast<Ark_ResourceStr>(iconValueTempTmpBuf_BufU);
            } else if (iconValueTempTmpBuf_UnionSelector == 1) {
                iconValueTempTmpBuf_.selector = 1;
                iconValueTempTmpBuf_.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
            } else if (iconValueTempTmpBuf_UnionSelector == 2) {
                iconValueTempTmpBuf_.selector = 2;
                iconValueTempTmpBuf_.value2 = static_cast<Ark_SymbolGlyphModifier>(SymbolGlyphModifier_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for iconValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            iconValueTempTmpBuf.value = static_cast<Ark_Union_ResourceStr_PixelMap_SymbolGlyphModifier>(iconValueTempTmpBuf_);
        }
        Opt_Union_ResourceStr_PixelMap_SymbolGlyphModifier iconValueTemp = iconValueTempTmpBuf;;
        const auto accessibilityTextValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr accessibilityTextValueTempTmpBuf = {};
        accessibilityTextValueTempTmpBuf.tag = accessibilityTextValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((accessibilityTextValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 accessibilityTextValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr accessibilityTextValueTempTmpBuf_ = {};
            accessibilityTextValueTempTmpBuf_.selector = accessibilityTextValueTempTmpBuf_UnionSelector;
            if (accessibilityTextValueTempTmpBuf_UnionSelector == 0) {
                accessibilityTextValueTempTmpBuf_.selector = 0;
                accessibilityTextValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (accessibilityTextValueTempTmpBuf_UnionSelector == 1) {
                accessibilityTextValueTempTmpBuf_.selector = 1;
                accessibilityTextValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for accessibilityTextValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            accessibilityTextValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(accessibilityTextValueTempTmpBuf_);
        }
        Opt_ResourceStr accessibilityTextValueTemp = accessibilityTextValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setBackButtonIcon(self, static_cast<Opt_Union_ResourceStr_PixelMap_SymbolGlyphModifier*>(&iconValueTemp), static_cast<Opt_ResourceStr*>(&accessibilityTextValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setBackButtonIcon, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setMenus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto itemsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_NavigationMenuItem_CustomBuilder itemsValueTempTmpBuf = {};
        itemsValueTempTmpBuf.tag = itemsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((itemsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 itemsValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_NavigationMenuItem_CustomBuilder itemsValueTempTmpBuf_ = {};
            itemsValueTempTmpBuf_.selector = itemsValueTempTmpBuf_UnionSelector;
            if (itemsValueTempTmpBuf_UnionSelector == 0) {
                itemsValueTempTmpBuf_.selector = 0;
                const Ark_Int32 itemsValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_NavigationMenuItem itemsValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(itemsValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*itemsValueTempTmpBuf_BufU.array)>::type>(&itemsValueTempTmpBuf_BufU, itemsValueTempTmpBuf_BufULength);
                for (int itemsValueTempTmpBuf_BufUBufCounterI = 0; itemsValueTempTmpBuf_BufUBufCounterI < itemsValueTempTmpBuf_BufULength; itemsValueTempTmpBuf_BufUBufCounterI++) {
                    itemsValueTempTmpBuf_BufU.array[itemsValueTempTmpBuf_BufUBufCounterI] = NavigationMenuItem_serializer::read(thisDeserializer);
                }
                itemsValueTempTmpBuf_.value0 = itemsValueTempTmpBuf_BufU;
            } else if (itemsValueTempTmpBuf_UnionSelector == 1) {
                itemsValueTempTmpBuf_.selector = 1;
                itemsValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else {
                INTEROP_FATAL("One of the branches for itemsValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            itemsValueTempTmpBuf.value = static_cast<Ark_Union_Array_NavigationMenuItem_CustomBuilder>(itemsValueTempTmpBuf_);
        }
        Opt_Union_Array_NavigationMenuItem_CustomBuilder itemsValueTemp = itemsValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationMenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationMenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setMenus(self, static_cast<Opt_Union_Array_NavigationMenuItem_CustomBuilder*>(&itemsValueTemp), static_cast<Opt_NavigationMenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setMenus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setToolbarConfiguration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto toolbarParamValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_ToolbarItem_CustomBuilder toolbarParamValueTempTmpBuf = {};
        toolbarParamValueTempTmpBuf.tag = toolbarParamValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((toolbarParamValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 toolbarParamValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_ToolbarItem_CustomBuilder toolbarParamValueTempTmpBuf_ = {};
            toolbarParamValueTempTmpBuf_.selector = toolbarParamValueTempTmpBuf_UnionSelector;
            if (toolbarParamValueTempTmpBuf_UnionSelector == 0) {
                toolbarParamValueTempTmpBuf_.selector = 0;
                const Ark_Int32 toolbarParamValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_ToolbarItem toolbarParamValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(toolbarParamValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*toolbarParamValueTempTmpBuf_BufU.array)>::type>(&toolbarParamValueTempTmpBuf_BufU, toolbarParamValueTempTmpBuf_BufULength);
                for (int toolbarParamValueTempTmpBuf_BufUBufCounterI = 0; toolbarParamValueTempTmpBuf_BufUBufCounterI < toolbarParamValueTempTmpBuf_BufULength; toolbarParamValueTempTmpBuf_BufUBufCounterI++) {
                    toolbarParamValueTempTmpBuf_BufU.array[toolbarParamValueTempTmpBuf_BufUBufCounterI] = ToolbarItem_serializer::read(thisDeserializer);
                }
                toolbarParamValueTempTmpBuf_.value0 = toolbarParamValueTempTmpBuf_BufU;
            } else if (toolbarParamValueTempTmpBuf_UnionSelector == 1) {
                toolbarParamValueTempTmpBuf_.selector = 1;
                toolbarParamValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else {
                INTEROP_FATAL("One of the branches for toolbarParamValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            toolbarParamValueTempTmpBuf.value = static_cast<Ark_Union_Array_ToolbarItem_CustomBuilder>(toolbarParamValueTempTmpBuf_);
        }
        Opt_Union_Array_ToolbarItem_CustomBuilder toolbarParamValueTemp = toolbarParamValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationToolbarOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationToolbarOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationToolbarOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setToolbarConfiguration(self, static_cast<Opt_Union_Array_ToolbarItem_CustomBuilder*>(&toolbarParamValueTemp), static_cast<Opt_NavigationToolbarOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setToolbarConfiguration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setHideToolBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto hideValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean hideValueTempTmpBuf = {};
        hideValueTempTmpBuf.tag = hideValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((hideValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            hideValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean hideValueTemp = hideValueTempTmpBuf;;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setHideToolBar(self, static_cast<Opt_Boolean*>(&hideValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setHideToolBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setIgnoreLayoutSafeArea(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto typesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_LayoutSafeAreaType typesValueTempTmpBuf = {};
        typesValueTempTmpBuf.tag = typesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 typesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_LayoutSafeAreaType typesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(typesValueTempTmpBuf_)>::type,
        std::decay<decltype(*typesValueTempTmpBuf_.array)>::type>(&typesValueTempTmpBuf_, typesValueTempTmpBuf_Length);
            for (int typesValueTempTmpBuf_BufCounterI = 0; typesValueTempTmpBuf_BufCounterI < typesValueTempTmpBuf_Length; typesValueTempTmpBuf_BufCounterI++) {
                typesValueTempTmpBuf_.array[typesValueTempTmpBuf_BufCounterI] = static_cast<Ark_LayoutSafeAreaType>(thisDeserializer.readInt32());
            }
            typesValueTempTmpBuf.value = typesValueTempTmpBuf_;
        }
        Opt_Array_LayoutSafeAreaType typesValueTemp = typesValueTempTmpBuf;;
        const auto edgesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_LayoutSafeAreaEdge edgesValueTempTmpBuf = {};
        edgesValueTempTmpBuf.tag = edgesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((edgesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 edgesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_LayoutSafeAreaEdge edgesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(edgesValueTempTmpBuf_)>::type,
        std::decay<decltype(*edgesValueTempTmpBuf_.array)>::type>(&edgesValueTempTmpBuf_, edgesValueTempTmpBuf_Length);
            for (int edgesValueTempTmpBuf_BufCounterI = 0; edgesValueTempTmpBuf_BufCounterI < edgesValueTempTmpBuf_Length; edgesValueTempTmpBuf_BufCounterI++) {
                edgesValueTempTmpBuf_.array[edgesValueTempTmpBuf_BufCounterI] = static_cast<Ark_LayoutSafeAreaEdge>(thisDeserializer.readInt32());
            }
            edgesValueTempTmpBuf.value = edgesValueTempTmpBuf_;
        }
        Opt_Array_LayoutSafeAreaEdge edgesValueTemp = edgesValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setIgnoreLayoutSafeArea(self, static_cast<Opt_Array_LayoutSafeAreaType*>(&typesValueTemp), static_cast<Opt_Array_LayoutSafeAreaEdge*>(&edgesValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setIgnoreLayoutSafeArea, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavDestinationAttribute_setEnableStatusBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto enabledValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean enabledValueTempTmpBuf = {};
        enabledValueTempTmpBuf.tag = enabledValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((enabledValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            enabledValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean enabledValueTemp = enabledValueTempTmpBuf;;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetNodeModifiers()->getNavDestinationModifier()->setEnableStatusBar(self, static_cast<Opt_Boolean*>(&enabledValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationAttribute_setEnableStatusBar, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Navigation_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getNavigationModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Navigation_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_NavigationInterface_setNavigationOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto pathInfosValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavPathStack pathInfosValueTempTmpBuf = {};
        pathInfosValueTempTmpBuf.tag = pathInfosValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((pathInfosValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            pathInfosValueTempTmpBuf.value = static_cast<Ark_NavPathStack>(NavPathStack_serializer::read(thisDeserializer));
        }
        Opt_NavPathStack pathInfosValueTemp = pathInfosValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setNavigationOptions(self, static_cast<Opt_NavPathStack*>(&pathInfosValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationInterface_setNavigationOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setNavBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Arkui_Component_Units_Length_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setNavBarWidth(self, static_cast<Opt_Union_Length_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setNavBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setNavBarPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavBarPosition valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_NavBarPosition>(thisDeserializer.readInt32());
        }
        Opt_NavBarPosition valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setNavBarPosition(self, static_cast<Opt_NavBarPosition*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setNavBarPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setNavBarWidthRange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Tuple_Dimension_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            Ark_Tuple_Dimension_Dimension valueValueTempTmpBuf_ = {};
            const Ark_Int8 valueValueTempTmpBuf_Value0TempBufUnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_Value0TempBuf = {};
            valueValueTempTmpBuf_Value0TempBuf.selector = valueValueTempTmpBuf_Value0TempBufUnionSelector;
            if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 0) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 0;
                valueValueTempTmpBuf_Value0TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 1) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 1;
                valueValueTempTmpBuf_Value0TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_Value0TempBufUnionSelector == 2) {
                valueValueTempTmpBuf_Value0TempBuf.selector = 2;
                valueValueTempTmpBuf_Value0TempBuf.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_Value0TempBuf has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_Value0TempBuf);
            const Ark_Int8 valueValueTempTmpBuf_Value1TempBufUnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_Value1TempBuf = {};
            valueValueTempTmpBuf_Value1TempBuf.selector = valueValueTempTmpBuf_Value1TempBufUnionSelector;
            if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 0) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 0;
                valueValueTempTmpBuf_Value1TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 1) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 1;
                valueValueTempTmpBuf_Value1TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_Value1TempBufUnionSelector == 2) {
                valueValueTempTmpBuf_Value1TempBuf.selector = 2;
                valueValueTempTmpBuf_Value1TempBuf.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_Value1TempBuf has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf_.value1 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_Value1TempBuf);
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Tuple_Dimension_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setNavBarWidthRange(self, static_cast<Opt_Tuple_Dimension_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setNavBarWidthRange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setMinContentWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setMinContentWidth(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setMinContentWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_NavigationMode>(thisDeserializer.readInt32());
        }
        Opt_NavigationMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setMode(self, static_cast<Opt_NavigationMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setHideNavBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setHideNavBar(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setHideNavBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setHideTitleBar0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setHideTitleBar0(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setHideTitleBar0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setHideBackButton(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setHideBackButton(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setHideBackButton, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setTitleMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationTitleMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_NavigationTitleMode>(thisDeserializer.readInt32());
        }
        Opt_NavigationTitleMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setTitleMode(self, static_cast<Opt_NavigationTitleMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setTitleMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setHideToolBar0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setHideToolBar0(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setHideToolBar0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setEnableToolBarAdaptation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setEnableToolBarAdaptation(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setEnableToolBarAdaptation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setOnTitleModeChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_NavigationTitleMode_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_NavigationTitleMode titleMode)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_NavigationTitleMode_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_NavigationTitleMode titleMode)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_NavigationTitleMode_Void))))};
        }
        Opt_Callback_NavigationTitleMode_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setOnTitleModeChange(self, static_cast<Opt_Callback_NavigationTitleMode_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setOnTitleModeChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setOnNavBarStateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isVisible)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isVisible)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setOnNavBarStateChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setOnNavBarStateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setOnNavigationModeChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_NavigationMode_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_NavigationMode mode)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_NavigationMode_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_NavigationMode mode)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_NavigationMode_Void))))};
        }
        Opt_Callback_NavigationMode_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setOnNavigationModeChange(self, static_cast<Opt_Callback_NavigationMode_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setOnNavigationModeChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setCustomNavContentTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Type_NavigationAttribute_customNavContentTransition valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NavContentInfo from, const Ark_NavContentInfo to, Ark_NavigationOperation operation, const Callback_Opt_NavigationAnimatedTransition_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Type_NavigationAttribute_customNavContentTransition)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NavContentInfo from, const Ark_NavContentInfo to, Ark_NavigationOperation operation, const Callback_Opt_NavigationAnimatedTransition_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Type_NavigationAttribute_customNavContentTransition))))};
        }
        Opt_Type_NavigationAttribute_customNavContentTransition valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setCustomNavContentTransition(self, static_cast<Opt_Type_NavigationAttribute_customNavContentTransition*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setCustomNavContentTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setSystemBarStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_window_SystemBarStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = window_SystemBarStyle_serializer::read(thisDeserializer);
        }
        Opt_window_SystemBarStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setSystemBarStyle(self, static_cast<Opt_window_SystemBarStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setSystemBarStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setRecoverable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setRecoverable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setRecoverable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setEnableDragBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setEnableDragBar(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setEnableDragBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setEnableModeChangeAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setEnableModeChangeAnimation(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setEnableModeChangeAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setBackButtonIcon(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto iconValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_PixelMap_Resource_SymbolGlyphModifier iconValueTempTmpBuf = {};
        iconValueTempTmpBuf.tag = iconValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((iconValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 iconValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_PixelMap_Resource_SymbolGlyphModifier iconValueTempTmpBuf_ = {};
            iconValueTempTmpBuf_.selector = iconValueTempTmpBuf_UnionSelector;
            if (iconValueTempTmpBuf_UnionSelector == 0) {
                iconValueTempTmpBuf_.selector = 0;
                iconValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (iconValueTempTmpBuf_UnionSelector == 1) {
                iconValueTempTmpBuf_.selector = 1;
                iconValueTempTmpBuf_.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
            } else if (iconValueTempTmpBuf_UnionSelector == 2) {
                iconValueTempTmpBuf_.selector = 2;
                iconValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else if (iconValueTempTmpBuf_UnionSelector == 3) {
                iconValueTempTmpBuf_.selector = 3;
                iconValueTempTmpBuf_.value3 = static_cast<Ark_SymbolGlyphModifier>(SymbolGlyphModifier_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for iconValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            iconValueTempTmpBuf.value = static_cast<Ark_Union_String_PixelMap_Resource_SymbolGlyphModifier>(iconValueTempTmpBuf_);
        }
        Opt_Union_String_PixelMap_Resource_SymbolGlyphModifier iconValueTemp = iconValueTempTmpBuf;;
        const auto accessibilityTextValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr accessibilityTextValueTempTmpBuf = {};
        accessibilityTextValueTempTmpBuf.tag = accessibilityTextValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((accessibilityTextValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 accessibilityTextValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr accessibilityTextValueTempTmpBuf_ = {};
            accessibilityTextValueTempTmpBuf_.selector = accessibilityTextValueTempTmpBuf_UnionSelector;
            if (accessibilityTextValueTempTmpBuf_UnionSelector == 0) {
                accessibilityTextValueTempTmpBuf_.selector = 0;
                accessibilityTextValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (accessibilityTextValueTempTmpBuf_UnionSelector == 1) {
                accessibilityTextValueTempTmpBuf_.selector = 1;
                accessibilityTextValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for accessibilityTextValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            accessibilityTextValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(accessibilityTextValueTempTmpBuf_);
        }
        Opt_ResourceStr accessibilityTextValueTemp = accessibilityTextValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setBackButtonIcon(self, static_cast<Opt_Union_String_PixelMap_Resource_SymbolGlyphModifier*>(&iconValueTemp), static_cast<Opt_ResourceStr*>(&accessibilityTextValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setBackButtonIcon, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setTitle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceStr_CustomBuilder_NavigationCommonTitle_NavigationCustomTitle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceStr_CustomBuilder_NavigationCommonTitle_NavigationCustomTitle valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = NavigationCommonTitle_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = NavigationCustomTitle_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceStr_CustomBuilder_NavigationCommonTitle_NavigationCustomTitle>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceStr_CustomBuilder_NavigationCommonTitle_NavigationCustomTitle valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationTitleOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationTitleOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationTitleOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setTitle(self, static_cast<Opt_Union_ResourceStr_CustomBuilder_NavigationCommonTitle_NavigationCustomTitle*>(&valueValueTemp), static_cast<Opt_NavigationTitleOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setTitle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setHideTitleBar1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto hideValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean hideValueTempTmpBuf = {};
        hideValueTempTmpBuf.tag = hideValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((hideValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            hideValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean hideValueTemp = hideValueTempTmpBuf;;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setHideTitleBar1(self, static_cast<Opt_Boolean*>(&hideValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setHideTitleBar1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setMenus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto itemsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_NavigationMenuItem_CustomBuilder itemsValueTempTmpBuf = {};
        itemsValueTempTmpBuf.tag = itemsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((itemsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 itemsValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_NavigationMenuItem_CustomBuilder itemsValueTempTmpBuf_ = {};
            itemsValueTempTmpBuf_.selector = itemsValueTempTmpBuf_UnionSelector;
            if (itemsValueTempTmpBuf_UnionSelector == 0) {
                itemsValueTempTmpBuf_.selector = 0;
                const Ark_Int32 itemsValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_NavigationMenuItem itemsValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(itemsValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*itemsValueTempTmpBuf_BufU.array)>::type>(&itemsValueTempTmpBuf_BufU, itemsValueTempTmpBuf_BufULength);
                for (int itemsValueTempTmpBuf_BufUBufCounterI = 0; itemsValueTempTmpBuf_BufUBufCounterI < itemsValueTempTmpBuf_BufULength; itemsValueTempTmpBuf_BufUBufCounterI++) {
                    itemsValueTempTmpBuf_BufU.array[itemsValueTempTmpBuf_BufUBufCounterI] = NavigationMenuItem_serializer::read(thisDeserializer);
                }
                itemsValueTempTmpBuf_.value0 = itemsValueTempTmpBuf_BufU;
            } else if (itemsValueTempTmpBuf_UnionSelector == 1) {
                itemsValueTempTmpBuf_.selector = 1;
                itemsValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else {
                INTEROP_FATAL("One of the branches for itemsValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            itemsValueTempTmpBuf.value = static_cast<Ark_Union_Array_NavigationMenuItem_CustomBuilder>(itemsValueTempTmpBuf_);
        }
        Opt_Union_Array_NavigationMenuItem_CustomBuilder itemsValueTemp = itemsValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationMenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationMenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setMenus(self, static_cast<Opt_Union_Array_NavigationMenuItem_CustomBuilder*>(&itemsValueTemp), static_cast<Opt_NavigationMenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setMenus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setToolbarConfiguration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Array_ToolbarItem_CustomBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Array_ToolbarItem_CustomBuilder valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_ToolbarItem valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = ToolbarItem_serializer::read(thisDeserializer);
                }
                valueValueTempTmpBuf_.value0 = valueValueTempTmpBuf_BufU;
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Array_ToolbarItem_CustomBuilder>(valueValueTempTmpBuf_);
        }
        Opt_Union_Array_ToolbarItem_CustomBuilder valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationToolbarOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationToolbarOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationToolbarOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setToolbarConfiguration(self, static_cast<Opt_Union_Array_ToolbarItem_CustomBuilder*>(&valueValueTemp), static_cast<Opt_NavigationToolbarOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setToolbarConfiguration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setHideToolBar1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto hideValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean hideValueTempTmpBuf = {};
        hideValueTempTmpBuf.tag = hideValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((hideValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            hideValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean hideValueTemp = hideValueTempTmpBuf;;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setHideToolBar1(self, static_cast<Opt_Boolean*>(&hideValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setHideToolBar1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavigationAttribute_setIgnoreLayoutSafeArea(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto typesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_LayoutSafeAreaType typesValueTempTmpBuf = {};
        typesValueTempTmpBuf.tag = typesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 typesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_LayoutSafeAreaType typesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(typesValueTempTmpBuf_)>::type,
        std::decay<decltype(*typesValueTempTmpBuf_.array)>::type>(&typesValueTempTmpBuf_, typesValueTempTmpBuf_Length);
            for (int typesValueTempTmpBuf_BufCounterI = 0; typesValueTempTmpBuf_BufCounterI < typesValueTempTmpBuf_Length; typesValueTempTmpBuf_BufCounterI++) {
                typesValueTempTmpBuf_.array[typesValueTempTmpBuf_BufCounterI] = static_cast<Ark_LayoutSafeAreaType>(thisDeserializer.readInt32());
            }
            typesValueTempTmpBuf.value = typesValueTempTmpBuf_;
        }
        Opt_Array_LayoutSafeAreaType typesValueTemp = typesValueTempTmpBuf;;
        const auto edgesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_LayoutSafeAreaEdge edgesValueTempTmpBuf = {};
        edgesValueTempTmpBuf.tag = edgesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((edgesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 edgesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_LayoutSafeAreaEdge edgesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(edgesValueTempTmpBuf_)>::type,
        std::decay<decltype(*edgesValueTempTmpBuf_.array)>::type>(&edgesValueTempTmpBuf_, edgesValueTempTmpBuf_Length);
            for (int edgesValueTempTmpBuf_BufCounterI = 0; edgesValueTempTmpBuf_BufCounterI < edgesValueTempTmpBuf_Length; edgesValueTempTmpBuf_BufCounterI++) {
                edgesValueTempTmpBuf_.array[edgesValueTempTmpBuf_BufCounterI] = static_cast<Ark_LayoutSafeAreaEdge>(thisDeserializer.readInt32());
            }
            edgesValueTempTmpBuf.value = edgesValueTempTmpBuf_;
        }
        Opt_Array_LayoutSafeAreaEdge edgesValueTemp = edgesValueTempTmpBuf;;
        GetNodeModifiers()->getNavigationModifier()->setIgnoreLayoutSafeArea(self, static_cast<Opt_Array_LayoutSafeAreaType*>(&typesValueTemp), static_cast<Opt_Array_LayoutSafeAreaEdge*>(&edgesValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationAttribute_setIgnoreLayoutSafeArea, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_NodeContainer_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getNodeContainerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(NodeContainer_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_NodeContainerInterface_setNodeContainerOptions(Ark_NativePointer thisPtr, Ark_NativePointer controller) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getNodeContainerModifier()->setNodeContainerOptions(self, static_cast<Ark_NodeController>(controller));
}
KOALA_INTEROP_DIRECT_V2(NodeContainerInterface_setNodeContainerOptions, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_PasteButton_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getPasteButtonModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(PasteButton_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_PasteButtonInterface_setPasteButtonOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PasteButtonOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = PasteButtonOptions_serializer::read(thisDeserializer);
        }
        Opt_PasteButtonOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getPasteButtonModifier()->setPasteButtonOptions(self, static_cast<Opt_PasteButtonOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PasteButtonInterface_setPasteButtonOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PasteButtonAttribute_setOnClick(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PasteButtonCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ClickEvent event, Ark_PasteButtonOnClickResult result, const Opt_BusinessError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_PasteButtonCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ClickEvent event, Ark_PasteButtonOnClickResult result, const Opt_BusinessError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_PasteButtonCallback))))};
        }
        Opt_PasteButtonCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPasteButtonModifier()->setOnClick(self, static_cast<Opt_PasteButtonCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PasteButtonAttribute_setOnClick, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Path_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getPathModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Path_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_PathInterface_setPathOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PathOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = PathOptions_serializer::read(thisDeserializer);
        }
        Opt_PathOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getPathModifier()->setPathOptions(self, static_cast<Opt_PathOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PathInterface_setPathOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PathAttribute_setCommands(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPathModifier()->setCommands(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PathAttribute_setCommands, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_PatternLock_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getPatternLockModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(PatternLock_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_PatternLockInterface_setPatternLockOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto controllerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PatternLockController controllerValueTempTmpBuf = {};
        controllerValueTempTmpBuf.tag = controllerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((controllerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            controllerValueTempTmpBuf.value = static_cast<Ark_PatternLockController>(PatternLockController_serializer::read(thisDeserializer));
        }
        Opt_PatternLockController controllerValueTemp = controllerValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setPatternLockOptions(self, static_cast<Opt_PatternLockController*>(&controllerValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockInterface_setPatternLockOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setSideLength(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setSideLength(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setSideLength, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setCircleRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setCircleRadius(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setCircleRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setRegularColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setRegularColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setRegularColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setSelectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setSelectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setSelectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setActiveColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setActiveColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setActiveColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setPathColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setPathColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setPathColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setPathStrokeWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setPathStrokeWidth(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setPathStrokeWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setOnPatternComplete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Array_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Array_Int32 input)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Array_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Array_Int32 input)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Array_I32_Void))))};
        }
        Opt_Callback_Array_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setOnPatternComplete(self, static_cast<Opt_Callback_Array_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setOnPatternComplete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setAutoReset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setAutoReset(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setAutoReset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setOnDotConnect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Number_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Number value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Number_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Number value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Number_Void))))};
        }
        Opt_Callback_Number_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setOnDotConnect(self, static_cast<Opt_Callback_Number_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setOnDotConnect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setActivateCircleStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CircleStyleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = CircleStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_CircleStyleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setActivateCircleStyle(self, static_cast<Opt_CircleStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setActivateCircleStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PatternLockAttribute_setSkipUnselectedPoint(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPatternLockModifier()->setSkipUnselectedPoint(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PatternLockAttribute_setSkipUnselectedPoint, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_PluginComponent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getPluginComponentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(PluginComponent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_PluginComponentInterface_setPluginComponentOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PluginComponentOptions optionsValueTemp = PluginComponentOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getPluginComponentModifier()->setPluginComponentOptions(self, static_cast<Ark_PluginComponentOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PluginComponentInterface_setPluginComponentOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PluginComponentAttribute_setOnComplete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPluginComponentModifier()->setOnComplete(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PluginComponentAttribute_setOnComplete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PluginComponentAttribute_setOnError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PluginErrorCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PluginErrorData info)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_PluginErrorCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PluginErrorData info)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_PluginErrorCallback))))};
        }
        Opt_PluginErrorCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPluginComponentModifier()->setOnError(self, static_cast<Opt_PluginErrorCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PluginComponentAttribute_setOnError, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Polygon_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getPolygonModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Polygon_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_PolygonInterface_setPolygonOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PolygonOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = PolygonOptions_serializer::read(thisDeserializer);
        }
        Opt_PolygonOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getPolygonModifier()->setPolygonOptions(self, static_cast<Opt_PolygonOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PolygonInterface_setPolygonOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PolygonAttribute_setPoints(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ShapePoint valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ShapePoint valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                Ark_ShapePoint valueValueTempTmpBuf_TempBuf = {};
                const Ark_Int8 valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_TempBufValue0TempBuf = {};
                valueValueTempTmpBuf_TempBufValue0TempBuf.selector = valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBufValue0TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBufValue0TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBufValue0TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBufValue0TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBufValue0TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBufValue0TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBufValue0TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_TempBuf.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_TempBufValue0TempBuf);
                const Ark_Int8 valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_TempBufValue1TempBuf = {};
                valueValueTempTmpBuf_TempBufValue1TempBuf.selector = valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBufValue1TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBufValue1TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBufValue1TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBufValue1TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBufValue1TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBufValue1TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBufValue1TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_TempBuf.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_TempBufValue1TempBuf);
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = valueValueTempTmpBuf_TempBuf;
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ShapePoint valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPolygonModifier()->setPoints(self, static_cast<Opt_Array_ShapePoint*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PolygonAttribute_setPoints, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Polyline_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getPolylineModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Polyline_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_PolylineInterface_setPolylineOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PolylineOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = PolylineOptions_serializer::read(thisDeserializer);
        }
        Opt_PolylineOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getPolylineModifier()->setPolylineOptions(self, static_cast<Opt_PolylineOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PolylineInterface_setPolylineOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PolylineAttribute_setPoints(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ShapePoint valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ShapePoint valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                Ark_ShapePoint valueValueTempTmpBuf_TempBuf = {};
                const Ark_Int8 valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_TempBufValue0TempBuf = {};
                valueValueTempTmpBuf_TempBufValue0TempBuf.selector = valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBufValue0TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBufValue0TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBufValue0TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBufValue0TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufValue0TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBufValue0TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBufValue0TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBufValue0TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_TempBuf.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_TempBufValue0TempBuf);
                const Ark_Int8 valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_TempBufValue1TempBuf = {};
                valueValueTempTmpBuf_TempBufValue1TempBuf.selector = valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBufValue1TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBufValue1TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBufValue1TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBufValue1TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufValue1TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBufValue1TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBufValue1TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBufValue1TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_TempBuf.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_TempBufValue1TempBuf);
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = valueValueTempTmpBuf_TempBuf;
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ShapePoint valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getPolylineModifier()->setPoints(self, static_cast<Opt_Array_ShapePoint*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PolylineAttribute_setPoints, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Progress_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getProgressModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Progress_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ProgressInterface_setProgressOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ProgressOptions optionsValueTemp = ProgressOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getProgressModifier()->setProgressOptions(self, static_cast<Ark_ProgressOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ProgressInterface_setProgressOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ProgressAttribute_setValue(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getProgressModifier()->setValue(self, static_cast<Opt_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ProgressAttribute_setValue, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ProgressAttribute_setColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_LinearGradient valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_LinearGradient valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LinearGradient>(LinearGradient_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_LinearGradient>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_LinearGradient valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getProgressModifier()->setColor(self, static_cast<Opt_Union_ResourceColor_LinearGradient*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ProgressAttribute_setColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ProgressAttribute_setStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_LinearStyleOptions_RingStyleOptions_CapsuleStyleOptions_ProgressStyleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_LinearStyleOptions_RingStyleOptions_CapsuleStyleOptions_ProgressStyleOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = LinearStyleOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = RingStyleOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = CapsuleStyleOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = ProgressStyleOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_LinearStyleOptions_RingStyleOptions_CapsuleStyleOptions_ProgressStyleOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_LinearStyleOptions_RingStyleOptions_CapsuleStyleOptions_ProgressStyleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getProgressModifier()->setStyle(self, static_cast<Opt_Union_LinearStyleOptions_RingStyleOptions_CapsuleStyleOptions_ProgressStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ProgressAttribute_setStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ProgressAttribute_setPrivacySensitive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getProgressModifier()->setPrivacySensitive(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ProgressAttribute_setPrivacySensitive, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_QRCode_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getQRCodeModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(QRCode_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_QRCodeInterface_setQRCodeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceStr valueValueTemp = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf);;
        GetNodeModifiers()->getQRCodeModifier()->setQRCodeOptions(self, static_cast<Ark_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(QRCodeInterface_setQRCodeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_QRCodeAttribute_setColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getQRCodeModifier()->setColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(QRCodeAttribute_setColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_QRCodeAttribute_setBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getQRCodeModifier()->setBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(QRCodeAttribute_setBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_QRCodeAttribute_setContentOpacity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getQRCodeModifier()->setContentOpacity(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(QRCodeAttribute_setContentOpacity, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Radio_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRadioModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Radio_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RadioInterface_setRadioOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RadioOptions optionsValueTemp = RadioOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getRadioModifier()->setRadioOptions(self, static_cast<Ark_RadioOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RadioInterface_setRadioOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RadioAttribute_setChecked(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRadioModifier()->setChecked(self, static_cast<Opt_Union_Boolean_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RadioAttribute_setChecked, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RadioAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnRadioChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isChecked)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnRadioChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isChecked)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnRadioChangeCallback))))};
        }
        Opt_OnRadioChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRadioModifier()->setOnChange(self, static_cast<Opt_OnRadioChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RadioAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RadioAttribute_setRadioStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RadioStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = RadioStyle_serializer::read(thisDeserializer);
        }
        Opt_RadioStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRadioModifier()->setRadioStyle(self, static_cast<Opt_RadioStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RadioAttribute_setRadioStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Rating_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRatingModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Rating_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RatingInterface_setRatingOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RatingOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = RatingOptions_serializer::read(thisDeserializer);
        }
        Opt_RatingOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getRatingModifier()->setRatingOptions(self, static_cast<Opt_RatingOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RatingInterface_setRatingOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RatingAttribute_setStars(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRatingModifier()->setStars(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RatingAttribute_setStars, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RatingAttribute_setStepSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRatingModifier()->setStepSize(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RatingAttribute_setStepSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RatingAttribute_setStarStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_StarStyleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = StarStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_StarStyleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRatingModifier()->setStarStyle(self, static_cast<Opt_StarStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RatingAttribute_setStarStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RatingAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnRatingChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 rating)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnRatingChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 rating)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnRatingChangeCallback))))};
        }
        Opt_OnRatingChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRatingModifier()->setOnChange(self, static_cast<Opt_OnRatingChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RatingAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Rect_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRectModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Rect_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RectInterface_setRectOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_RectOptions_RoundedRectOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 optionsValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_RectOptions_RoundedRectOptions optionsValueTempTmpBuf_ = {};
            optionsValueTempTmpBuf_.selector = optionsValueTempTmpBuf_UnionSelector;
            if (optionsValueTempTmpBuf_UnionSelector == 0) {
                optionsValueTempTmpBuf_.selector = 0;
                optionsValueTempTmpBuf_.value0 = RectOptions_serializer::read(thisDeserializer);
            } else if (optionsValueTempTmpBuf_UnionSelector == 1) {
                optionsValueTempTmpBuf_.selector = 1;
                optionsValueTempTmpBuf_.value1 = RoundedRectOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for optionsValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            optionsValueTempTmpBuf.value = static_cast<Ark_Union_RectOptions_RoundedRectOptions>(optionsValueTempTmpBuf_);
        }
        Opt_Union_RectOptions_RoundedRectOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getRectModifier()->setRectOptions(self, static_cast<Opt_Union_RectOptions_RoundedRectOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RectInterface_setRectOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RectAttribute_setRadiusWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRectModifier()->setRadiusWidth(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RectAttribute_setRadiusWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RectAttribute_setRadiusHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRectModifier()->setRadiusHeight(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RectAttribute_setRadiusHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RectAttribute_setRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_Array_RadiusItem valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_Array_RadiusItem valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_RadiusItem valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    Ark_RadiusItem valueValueTempTmpBuf_BufUTempBuf = {};
                    const Ark_Int8 valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector = thisDeserializer.readInt8();
                    Ark_Length valueValueTempTmpBuf_BufUTempBufValue0TempBuf = {};
                    valueValueTempTmpBuf_BufUTempBufValue0TempBuf.selector = valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector;
                    if (valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector == 0) {
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.selector = 0;
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                    } else if (valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector == 1) {
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.selector = 1;
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                    } else if (valueValueTempTmpBuf_BufUTempBufValue0TempBufUnionSelector == 2) {
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.selector = 2;
                        valueValueTempTmpBuf_BufUTempBufValue0TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                    } else {
                        INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufUTempBufValue0TempBuf has to be chosen through deserialisation.");
                    }
                    valueValueTempTmpBuf_BufUTempBuf.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufUTempBufValue0TempBuf);
                    const Ark_Int8 valueValueTempTmpBuf_BufUTempBufValue1TempBufUnionSelector = thisDeserializer.readInt8();
                    Ark_Length valueValueTempTmpBuf_BufUTempBufValue1TempBuf = {};
                    valueValueTempTmpBuf_BufUTempBufValue1TempBuf.selector = valueValueTempTmpBuf_BufUTempBufValue1TempBufUnionSelector;
                    if (valueValueTempTmpBuf_BufUTempBufValue1TempBufUnionSelector == 0) {
                        valueValueTempTmpBuf_BufUTempBufValue1TempBuf.selector = 0;
                        valueValueTempTmpBuf_BufUTempBufValue1TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                    } else if (valueValueTempTmpBuf_BufUTempBufValue1TempBufUnionSelector == 1) {
                        valueValueTempTmpBuf_BufUTempBufValue1TempBuf.selector = 1;
                        valueValueTempTmpBuf_BufUTempBufValue1TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                    } else if (valueValueTempTmpBuf_BufUTempBufValue1TempBufUnionSelector == 2) {
                        valueValueTempTmpBuf_BufUTempBufValue1TempBuf.selector = 2;
                        valueValueTempTmpBuf_BufUTempBufValue1TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                    } else {
                        INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufUTempBufValue1TempBuf has to be chosen through deserialisation.");
                    }
                    valueValueTempTmpBuf_BufUTempBuf.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufUTempBufValue1TempBuf);
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = valueValueTempTmpBuf_BufUTempBuf;
                }
                valueValueTempTmpBuf_.value1 = valueValueTempTmpBuf_BufU;
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_Array_RadiusItem>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_Array_RadiusItem valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRectModifier()->setRadius(self, static_cast<Opt_Union_Length_Array_RadiusItem*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RectAttribute_setRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Refresh_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRefreshModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Refresh_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RefreshInterface_setRefreshOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RefreshOptions valueValueTemp = RefreshOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getRefreshModifier()->setRefreshOptions(self, static_cast<Ark_RefreshOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RefreshInterface_setRefreshOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RefreshAttribute_setOnStateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_RefreshStatus_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_RefreshStatus state)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RefreshStatus_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_RefreshStatus state)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RefreshStatus_Void))))};
        }
        Opt_Callback_RefreshStatus_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRefreshModifier()->setOnStateChange(self, static_cast<Opt_Callback_RefreshStatus_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RefreshAttribute_setOnStateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RefreshAttribute_setOnRefreshing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRefreshModifier()->setOnRefreshing(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RefreshAttribute_setOnRefreshing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RefreshAttribute_setRefreshOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRefreshModifier()->setRefreshOffset(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RefreshAttribute_setRefreshOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RefreshAttribute_setPullToRefresh(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRefreshModifier()->setPullToRefresh(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RefreshAttribute_setPullToRefresh, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RefreshAttribute_setOnOffsetChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_F64_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_F64_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_F64_Void))))};
        }
        Opt_Callback_F64_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRefreshModifier()->setOnOffsetChange(self, static_cast<Opt_Callback_F64_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RefreshAttribute_setOnOffsetChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RefreshAttribute_setPullDownRatio(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRefreshModifier()->setPullDownRatio(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RefreshAttribute_setPullDownRatio, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RelativeContainer_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRelativeContainerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(RelativeContainer_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RelativeContainerInterface_setRelativeContainerOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getRelativeContainerModifier()->setRelativeContainerOptions(self);
}
KOALA_INTEROP_DIRECT_V1(RelativeContainerInterface_setRelativeContainerOptions, Ark_NativePointer)
void impl_RelativeContainerAttribute_setGuideLine(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_GuideLineStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_GuideLineStyle valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = GuideLineStyle_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_GuideLineStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRelativeContainerModifier()->setGuideLine(self, static_cast<Opt_Array_GuideLineStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RelativeContainerAttribute_setGuideLine, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RelativeContainerAttribute_setBarrier(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_BarrierStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_BarrierStyle valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = BarrierStyle_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_BarrierStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRelativeContainerModifier()->setBarrier(self, static_cast<Opt_Array_BarrierStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RelativeContainerAttribute_setBarrier, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RemoteWindow_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRemoteWindowModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(RemoteWindow_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RemoteWindowInterface_setRemoteWindowOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_WindowAnimationTarget targetValueTemp = WindowAnimationTarget_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getRemoteWindowModifier()->setRemoteWindowOptions(self, static_cast<Ark_WindowAnimationTarget*>(&targetValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RemoteWindowInterface_setRemoteWindowOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RichEditor_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRichEditorModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(RichEditor_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RichEditorInterface_setRichEditorOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 optionsValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_RichEditorOptions_RichEditorStyledStringOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.selector = optionsValueTempTmpBufUnionSelector;
        if (optionsValueTempTmpBufUnionSelector == 0) {
            optionsValueTempTmpBuf.selector = 0;
            optionsValueTempTmpBuf.value0 = RichEditorOptions_serializer::read(thisDeserializer);
        } else if (optionsValueTempTmpBufUnionSelector == 1) {
            optionsValueTempTmpBuf.selector = 1;
            optionsValueTempTmpBuf.value1 = RichEditorStyledStringOptions_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for optionsValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_RichEditorOptions_RichEditorStyledStringOptions optionsValueTemp = static_cast<Ark_Union_RichEditorOptions_RichEditorStyledStringOptions>(optionsValueTempTmpBuf);;
        GetNodeModifiers()->getRichEditorModifier()->setRichEditorOptions(self, static_cast<Ark_Union_RichEditorOptions_RichEditorStyledStringOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorInterface_setRichEditorOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnReady(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnReady(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnReady, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnSelect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_RichEditorSelection_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_RichEditorSelection value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RichEditorSelection_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_RichEditorSelection value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RichEditorSelection_Void))))};
        }
        Opt_Callback_RichEditorSelection_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnSelect(self, static_cast<Opt_Callback_RichEditorSelection_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnSelect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnSelectionChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_RichEditorRange_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_RichEditorRange value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RichEditorRange_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_RichEditorRange value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RichEditorRange_Void))))};
        }
        Opt_Callback_RichEditorRange_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnSelectionChange(self, static_cast<Opt_Callback_RichEditorRange_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnSelectionChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setAboutToIMEInput(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_RichEditorInsertValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_RichEditorInsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RichEditorInsertValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_RichEditorInsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RichEditorInsertValue_Boolean))))};
        }
        Opt_Callback_RichEditorInsertValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setAboutToIMEInput(self, static_cast<Opt_Callback_RichEditorInsertValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setAboutToIMEInput, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnIMEInputComplete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_RichEditorTextSpanResult_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_RichEditorTextSpanResult value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RichEditorTextSpanResult_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_RichEditorTextSpanResult value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RichEditorTextSpanResult_Void))))};
        }
        Opt_Callback_RichEditorTextSpanResult_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnIMEInputComplete(self, static_cast<Opt_Callback_RichEditorTextSpanResult_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnIMEInputComplete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnDidIMEInput(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TextRange_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TextRange value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TextRange_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TextRange value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TextRange_Void))))};
        }
        Opt_Callback_TextRange_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnDidIMEInput(self, static_cast<Opt_Callback_TextRange_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnDidIMEInput, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setAboutToDelete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_RichEditorDeleteValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_RichEditorDeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RichEditorDeleteValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_RichEditorDeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RichEditorDeleteValue_Boolean))))};
        }
        Opt_Callback_RichEditorDeleteValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setAboutToDelete(self, static_cast<Opt_Callback_RichEditorDeleteValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setAboutToDelete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnDeleteComplete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnDeleteComplete(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnDeleteComplete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setCopyOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CopyOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CopyOptions>(thisDeserializer.readInt32());
        }
        Opt_CopyOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setCopyOptions(self, static_cast<Opt_CopyOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setCopyOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnPaste(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PasteEventCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_PasteEventCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_PasteEventCallback))))};
        }
        Opt_PasteEventCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnPaste(self, static_cast<Opt_PasteEventCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnPaste, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setEnableDataDetector(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setEnableDataDetector(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setEnableDataDetector, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setEnablePreviewText(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setEnablePreviewText(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setEnablePreviewText, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setDataDetectorConfig(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextDataDetectorConfig valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextDataDetectorConfig_serializer::read(thisDeserializer);
        }
        Opt_TextDataDetectorConfig valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setDataDetectorConfig(self, static_cast<Opt_TextDataDetectorConfig*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setDataDetectorConfig, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setCaretColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setCaretColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setCaretColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setSelectedBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setSelectedBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setSelectedBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnEditingChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnEditingChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnEditingChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setEnterKeyType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EnterKeyType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EnterKeyType>(thisDeserializer.readInt32());
        }
        Opt_EnterKeyType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setEnterKeyType(self, static_cast<Opt_EnterKeyType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setEnterKeyType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnSubmit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SubmitCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_EnterKeyType enterKey, const Ark_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_SubmitCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_EnterKeyType enterKey, const Ark_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_SubmitCallback))))};
        }
        Opt_SubmitCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnSubmit(self, static_cast<Opt_SubmitCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnSubmit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnWillChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_RichEditorChangeValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_RichEditorChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RichEditorChangeValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_RichEditorChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RichEditorChangeValue_Boolean))))};
        }
        Opt_Callback_RichEditorChangeValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnWillChange(self, static_cast<Opt_Callback_RichEditorChangeValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnWillChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnDidChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnDidChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TextRange rangeBefore, const Ark_TextRange rangeAfter)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnDidChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TextRange rangeBefore, const Ark_TextRange rangeAfter)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnDidChangeCallback))))};
        }
        Opt_OnDidChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnDidChange(self, static_cast<Opt_OnDidChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnDidChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnCut(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_CutEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_CutEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_CutEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_CutEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_CutEvent_Void))))};
        }
        Opt_Callback_CutEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnCut(self, static_cast<Opt_Callback_CutEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnCut, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setOnCopy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_CopyEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_CopyEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_CopyEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_CopyEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_CopyEvent_Void))))};
        }
        Opt_Callback_CopyEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setOnCopy(self, static_cast<Opt_Callback_CopyEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setOnCopy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setEditMenuOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditMenuOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = EditMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_EditMenuOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setEditMenuOptions(self, static_cast<Opt_EditMenuOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setEditMenuOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setEnableKeyboardOnFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setEnableKeyboardOnFocus(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setEnableKeyboardOnFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setBarState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarState valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarState>(thisDeserializer.readInt32());
        }
        Opt_BarState valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setBarState(self, static_cast<Opt_BarState*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setBarState, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setMaxLength(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Int32>(thisDeserializer.readInt32());
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setMaxLength(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setMaxLength, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setMaxLines(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Int32>(thisDeserializer.readInt32());
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setMaxLines(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setMaxLines, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setKeyboardAppearance(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardAppearance valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_KeyboardAppearance>(thisDeserializer.readInt32());
        }
        Opt_KeyboardAppearance valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setKeyboardAppearance(self, static_cast<Opt_KeyboardAppearance*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setKeyboardAppearance, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setStopBackPress(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setStopBackPress(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setStopBackPress, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setBindSelectionMenu(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto spanTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorSpanType spanTypeValueTempTmpBuf = {};
        spanTypeValueTempTmpBuf.tag = spanTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((spanTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            spanTypeValueTempTmpBuf.value = static_cast<Ark_RichEditorSpanType>(thisDeserializer.readInt32());
        }
        Opt_RichEditorSpanType spanTypeValueTemp = spanTypeValueTempTmpBuf;;
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            contentValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder contentValueTemp = contentValueTempTmpBuf;;
        const auto responseTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResponseType_RichEditorResponseType responseTypeValueTempTmpBuf = {};
        responseTypeValueTempTmpBuf.tag = responseTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((responseTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 responseTypeValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResponseType_RichEditorResponseType responseTypeValueTempTmpBuf_ = {};
            responseTypeValueTempTmpBuf_.selector = responseTypeValueTempTmpBuf_UnionSelector;
            if (responseTypeValueTempTmpBuf_UnionSelector == 0) {
                responseTypeValueTempTmpBuf_.selector = 0;
                responseTypeValueTempTmpBuf_.value0 = static_cast<Ark_ResponseType>(thisDeserializer.readInt32());
            } else if (responseTypeValueTempTmpBuf_UnionSelector == 1) {
                responseTypeValueTempTmpBuf_.selector = 1;
                responseTypeValueTempTmpBuf_.value1 = static_cast<Ark_RichEditorResponseType>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for responseTypeValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            responseTypeValueTempTmpBuf.value = static_cast<Ark_Union_ResponseType_RichEditorResponseType>(responseTypeValueTempTmpBuf_);
        }
        Opt_Union_ResponseType_RichEditorResponseType responseTypeValueTemp = responseTypeValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionMenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_SelectionMenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setBindSelectionMenu(self, static_cast<Opt_RichEditorSpanType*>(&spanTypeValueTemp), static_cast<Opt_CustomNodeBuilder*>(&contentValueTemp), static_cast<Opt_Union_ResponseType_RichEditorResponseType*>(&responseTypeValueTemp), static_cast<Opt_SelectionMenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setBindSelectionMenu, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setCustomKeyboard(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = KeyboardOptions_serializer::read(thisDeserializer);
        }
        Opt_KeyboardOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setCustomKeyboard(self, static_cast<Opt_CustomNodeBuilder*>(&valueValueTemp), static_cast<Opt_KeyboardOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setCustomKeyboard, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorAttribute_setPlaceholder(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        const auto styleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PlaceholderStyle styleValueTempTmpBuf = {};
        styleValueTempTmpBuf.tag = styleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((styleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            styleValueTempTmpBuf.value = PlaceholderStyle_serializer::read(thisDeserializer);
        }
        Opt_PlaceholderStyle styleValueTemp = styleValueTempTmpBuf;;
        GetNodeModifiers()->getRichEditorModifier()->setPlaceholder(self, static_cast<Opt_ResourceStr*>(&valueValueTemp), static_cast<Opt_PlaceholderStyle*>(&styleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorAttribute_setPlaceholder, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RichText_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRichTextModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(RichText_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RichTextInterface_setRichTextOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 contentValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_Resource contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.selector = contentValueTempTmpBufUnionSelector;
        if (contentValueTempTmpBufUnionSelector == 0) {
            contentValueTempTmpBuf.selector = 0;
            contentValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (contentValueTempTmpBufUnionSelector == 1) {
            contentValueTempTmpBuf.selector = 1;
            contentValueTempTmpBuf.value1 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for contentValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_Resource contentValueTemp = static_cast<Ark_Union_String_Resource>(contentValueTempTmpBuf);;
        GetNodeModifiers()->getRichTextModifier()->setRichTextOptions(self, static_cast<Ark_Union_String_Resource*>(&contentValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichTextInterface_setRichTextOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichTextAttribute_setOnStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichTextModifier()->setOnStart(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichTextAttribute_setOnStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichTextAttribute_setOnComplete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRichTextModifier()->setOnComplete(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichTextAttribute_setOnComplete, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RootScene_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRootSceneModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(RootScene_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RootSceneInterface_setRootSceneOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RootSceneSession sessionValueTemp = RootSceneSession_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getRootSceneModifier()->setRootSceneOptions(self, static_cast<Ark_RootSceneSession*>(&sessionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RootSceneInterface_setRootSceneOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Row_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRowModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Row_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RowInterface_setRowOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_RowOptions_RowOptionsV2 optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 optionsValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_RowOptions_RowOptionsV2 optionsValueTempTmpBuf_ = {};
            optionsValueTempTmpBuf_.selector = optionsValueTempTmpBuf_UnionSelector;
            if (optionsValueTempTmpBuf_UnionSelector == 0) {
                optionsValueTempTmpBuf_.selector = 0;
                optionsValueTempTmpBuf_.value0 = RowOptions_serializer::read(thisDeserializer);
            } else if (optionsValueTempTmpBuf_UnionSelector == 1) {
                optionsValueTempTmpBuf_.selector = 1;
                optionsValueTempTmpBuf_.value1 = RowOptionsV2_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for optionsValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            optionsValueTempTmpBuf.value = static_cast<Ark_Union_RowOptions_RowOptionsV2>(optionsValueTempTmpBuf_);
        }
        Opt_Union_RowOptions_RowOptionsV2 optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getRowModifier()->setRowOptions(self, static_cast<Opt_Union_RowOptions_RowOptionsV2*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RowInterface_setRowOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RowAttribute_setAlignItems(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VerticalAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_VerticalAlign>(thisDeserializer.readInt32());
        }
        Opt_VerticalAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRowModifier()->setAlignItems(self, static_cast<Opt_VerticalAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RowAttribute_setAlignItems, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RowAttribute_setJustifyContent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FlexAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FlexAlign>(thisDeserializer.readInt32());
        }
        Opt_FlexAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRowModifier()->setJustifyContent(self, static_cast<Opt_FlexAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RowAttribute_setJustifyContent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RowAttribute_setReverse(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRowModifier()->setReverse(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RowAttribute_setReverse, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RowSplit_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRowSplitModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(RowSplit_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_RowSplitInterface_setRowSplitOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getRowSplitModifier()->setRowSplitOptions(self);
}
KOALA_INTEROP_DIRECT_V1(RowSplitInterface_setRowSplitOptions, Ark_NativePointer)
void impl_RowSplitAttribute_setResizeable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getRowSplitModifier()->setResizeable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RowSplitAttribute_setResizeable, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SaveButton_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSaveButtonModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(SaveButton_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SaveButtonInterface_setSaveButtonOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SaveButtonOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SaveButtonOptions_serializer::read(thisDeserializer);
        }
        Opt_SaveButtonOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getSaveButtonModifier()->setSaveButtonOptions(self, static_cast<Opt_SaveButtonOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SaveButtonInterface_setSaveButtonOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SaveButtonAttribute_setOnClick(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SaveButtonCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ClickEvent event, Ark_SaveButtonOnClickResult result, const Opt_BusinessError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_SaveButtonCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ClickEvent event, Ark_SaveButtonOnClickResult result, const Opt_BusinessError error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_SaveButtonCallback))))};
        }
        Opt_SaveButtonCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSaveButtonModifier()->setOnClick(self, static_cast<Opt_SaveButtonCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SaveButtonAttribute_setOnClick, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SaveButtonAttribute_setSetIcon(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Resource_serializer::read(thisDeserializer);
        }
        Opt_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSaveButtonModifier()->setSetIcon(self, static_cast<Opt_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SaveButtonAttribute_setSetIcon, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SaveButtonAttribute_setSetText(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSaveButtonModifier()->setSetText(self, static_cast<Opt_Union_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SaveButtonAttribute_setSetText, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SaveButtonAttribute_setIconSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Dimension_SizeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Dimension_SizeOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = SizeOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Dimension_SizeOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_Dimension_SizeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSaveButtonModifier()->setIconSize(self, static_cast<Opt_Union_Dimension_SizeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SaveButtonAttribute_setIconSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SaveButtonAttribute_setIconBorderRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Dimension_BorderRadiuses valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Dimension_BorderRadiuses valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = BorderRadiuses_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Dimension_BorderRadiuses>(valueValueTempTmpBuf_);
        }
        Opt_Union_Dimension_BorderRadiuses valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSaveButtonModifier()->setIconBorderRadius(self, static_cast<Opt_Union_Dimension_BorderRadiuses*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SaveButtonAttribute_setIconBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SaveButtonAttribute_setStateEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSaveButtonModifier()->setStateEffect(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SaveButtonAttribute_setStateEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Screen_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getScreenModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Screen_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ScreenInterface_setScreenOptions(Ark_NativePointer thisPtr, KInteropNumber screenId) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getScreenModifier()->setScreenOptions(self, (const Ark_Number*) (&screenId));
}
KOALA_INTEROP_DIRECT_V2(ScreenInterface_setScreenOptions, Ark_NativePointer, KInteropNumber)
Ark_NativePointer impl_Scroll_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getScrollModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Scroll_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ScrollInterface_setScrollOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scrollerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Scroller scrollerValueTempTmpBuf = {};
        scrollerValueTempTmpBuf.tag = scrollerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scrollerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scrollerValueTempTmpBuf.value = static_cast<Ark_Scroller>(Scroller_serializer::read(thisDeserializer));
        }
        Opt_Scroller scrollerValueTemp = scrollerValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setScrollOptions(self, static_cast<Opt_Scroller*>(&scrollerValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollInterface_setScrollOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setScrollable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollDirection valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ScrollDirection>(thisDeserializer.readInt32());
        }
        Opt_ScrollDirection valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setScrollable(self, static_cast<Opt_ScrollDirection*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setScrollable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setOnWillScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollOnWillScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 xOffset, const Ark_Float64 yOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_OffsetResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ScrollOnWillScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 xOffset, const Ark_Float64 yOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_OffsetResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ScrollOnWillScrollCallback))))};
        }
        Opt_ScrollOnWillScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setOnWillScroll(self, static_cast<Opt_ScrollOnWillScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setOnWillScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setOnDidScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollOnScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 xOffset, const Ark_Float64 yOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ScrollOnScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 xOffset, const Ark_Float64 yOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ScrollOnScrollCallback))))};
        }
        Opt_ScrollOnScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setOnDidScroll(self, static_cast<Opt_ScrollOnScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setOnDidScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setOnScrollEdge(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollEdgeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_Edge side)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollEdgeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_Edge side)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollEdgeCallback))))};
        }
        Opt_OnScrollEdgeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setOnScrollEdge(self, static_cast<Opt_OnScrollEdgeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setOnScrollEdge, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setOnScrollStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setOnScrollStart(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setOnScrollStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setOnScrollStop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setOnScrollStop(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setOnScrollStop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setScrollBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarState valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarState>(thisDeserializer.readInt32());
        }
        Opt_BarState valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setScrollBar(self, static_cast<Opt_BarState*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setScrollBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setScrollBarColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Color_I32_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Color_I32_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Color_I32_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_Color_I32_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setScrollBarColor(self, static_cast<Opt_Union_Color_I32_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setScrollBarColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setScrollBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setScrollBarWidth(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setScrollBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setOnScrollFrameBegin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollFrameBeginCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollFrameBeginCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollFrameBeginCallback))))};
        }
        Opt_OnScrollFrameBeginCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setOnScrollFrameBegin(self, static_cast<Opt_OnScrollFrameBeginCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setOnScrollFrameBegin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setNestedScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NestedScrollOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = NestedScrollOptions_serializer::read(thisDeserializer);
        }
        Opt_NestedScrollOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setNestedScroll(self, static_cast<Opt_NestedScrollOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setNestedScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setEnableScrollInteraction(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setEnableScrollInteraction(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setEnableScrollInteraction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setFriction(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setFriction(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setFriction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setScrollSnap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollSnapOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ScrollSnapOptions_serializer::read(thisDeserializer);
        }
        Opt_ScrollSnapOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setScrollSnap(self, static_cast<Opt_ScrollSnapOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setScrollSnap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setEnablePaging(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setEnablePaging(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setEnablePaging, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setInitialOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OffsetOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = OffsetOptions_serializer::read(thisDeserializer);
        }
        Opt_OffsetOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setInitialOffset(self, static_cast<Opt_OffsetOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setInitialOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollAttribute_setEdgeEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto edgeEffectValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffect edgeEffectValueTempTmpBuf = {};
        edgeEffectValueTempTmpBuf.tag = edgeEffectValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((edgeEffectValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            edgeEffectValueTempTmpBuf.value = static_cast<Ark_EdgeEffect>(thisDeserializer.readInt32());
        }
        Opt_EdgeEffect edgeEffectValueTemp = edgeEffectValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffectOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = EdgeEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_EdgeEffectOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getScrollModifier()->setEdgeEffect(self, static_cast<Opt_EdgeEffect*>(&edgeEffectValueTemp), static_cast<Opt_EdgeEffectOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollAttribute_setEdgeEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ScrollBar_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getScrollBarModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ScrollBar_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ScrollBarInterface_setScrollBarOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ScrollBarOptions valueValueTemp = ScrollBarOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getScrollBarModifier()->setScrollBarOptions(self, static_cast<Ark_ScrollBarOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollBarInterface_setScrollBarOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScrollBarAttribute_setEnableNestedScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getScrollBarModifier()->setEnableNestedScroll(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScrollBarAttribute_setEnableNestedScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Search_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSearchModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Search_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SearchInterface_setSearchOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SearchOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SearchOptions_serializer::read(thisDeserializer);
        }
        Opt_SearchOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setSearchOptions(self, static_cast<Opt_SearchOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchInterface_setSearchOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setSearchIcon(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_IconOptions_SymbolGlyphModifier valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_IconOptions_SymbolGlyphModifier valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = IconOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_SymbolGlyphModifier>(SymbolGlyphModifier_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_IconOptions_SymbolGlyphModifier>(valueValueTempTmpBuf_);
        }
        Opt_Union_IconOptions_SymbolGlyphModifier valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setSearchIcon(self, static_cast<Opt_Union_IconOptions_SymbolGlyphModifier*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setSearchIcon, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setCancelButton(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_CancelButtonOptions_CancelButtonSymbolOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_CancelButtonOptions_CancelButtonSymbolOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = CancelButtonOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = CancelButtonSymbolOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_CancelButtonOptions_CancelButtonSymbolOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_CancelButtonOptions_CancelButtonSymbolOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setCancelButton(self, static_cast<Opt_Union_CancelButtonOptions_CancelButtonSymbolOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setCancelButton, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setTextIndent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setTextIndent(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setTextIndent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnEditChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnEditChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnEditChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setSelectedBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setSelectedBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setSelectedBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setCaretStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CaretStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = CaretStyle_serializer::read(thisDeserializer);
        }
        Opt_CaretStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setCaretStyle(self, static_cast<Opt_CaretStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setCaretStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setPlaceholderColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setPlaceholderColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setPlaceholderColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setPlaceholderFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setPlaceholderFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setPlaceholderFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setTextFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setTextFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setTextFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setEnterKeyType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EnterKeyType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EnterKeyType>(thisDeserializer.readInt32());
        }
        Opt_EnterKeyType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setEnterKeyType(self, static_cast<Opt_EnterKeyType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setEnterKeyType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnSubmit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SearchSubmitCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String searchContent, const Opt_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_SearchSubmitCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String searchContent, const Opt_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_SearchSubmitCallback))))};
        }
        Opt_SearchSubmitCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnSubmit(self, static_cast<Opt_SearchSubmitCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnSubmit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditableTextOnChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value, const Opt_PreviewText previewText, const Opt_TextChangeOptions options)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_EditableTextOnChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value, const Opt_PreviewText previewText, const Opt_TextChangeOptions options)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_EditableTextOnChangeCallback))))};
        }
        Opt_EditableTextOnChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnChange(self, static_cast<Opt_EditableTextOnChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnTextSelectionChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTextSelectionChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTextSelectionChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTextSelectionChangeCallback))))};
        }
        Opt_OnTextSelectionChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnTextSelectionChange(self, static_cast<Opt_OnTextSelectionChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnTextSelectionChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnContentScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnContentScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 totalOffsetX, const Ark_Float64 totalOffsetY)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnContentScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 totalOffsetX, const Ark_Float64 totalOffsetY)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnContentScrollCallback))))};
        }
        Opt_OnContentScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnContentScroll(self, static_cast<Opt_OnContentScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnContentScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnCopy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnCopy(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnCopy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnCut(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnCut(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnCut, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnPaste(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnPasteCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String content, const Ark_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnPasteCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String content, const Ark_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnPasteCallback))))};
        }
        Opt_OnPasteCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnPaste(self, static_cast<Opt_OnPasteCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnPaste, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setCopyOption(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CopyOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CopyOptions>(thisDeserializer.readInt32());
        }
        Opt_CopyOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setCopyOption(self, static_cast<Opt_CopyOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setCopyOption, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setMaxLength(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setMaxLength(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setMaxLength, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setTextAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextAlign>(thisDeserializer.readInt32());
        }
        Opt_TextAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setTextAlign(self, static_cast<Opt_TextAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setTextAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setEnableKeyboardOnFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setEnableKeyboardOnFocus(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setEnableKeyboardOnFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setSelectionMenuHidden(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setSelectionMenuHidden(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setSelectionMenuHidden, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setMinFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setMinFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setMinFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setMaxFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setMaxFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setMaxFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setMinFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setMinFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setMinFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setMaxFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setMaxFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setMaxFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setDecoration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextDecorationOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextDecorationOptions_serializer::read(thisDeserializer);
        }
        Opt_TextDecorationOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setDecoration(self, static_cast<Opt_TextDecorationOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setDecoration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setLetterSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setLetterSpacing(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setLetterSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setLineHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setLineHeight(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setLineHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SearchType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SearchType>(thisDeserializer.readInt32());
        }
        Opt_SearchType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setType(self, static_cast<Opt_SearchType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setFontFeature(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setFontFeature(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setFontFeature, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnWillInsert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_InsertValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_InsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_InsertValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_InsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_InsertValue_Boolean))))};
        }
        Opt_Callback_InsertValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnWillInsert(self, static_cast<Opt_Callback_InsertValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnWillInsert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnDidInsert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_InsertValue_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_InsertValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_InsertValue_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_InsertValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_InsertValue_Void))))};
        }
        Opt_Callback_InsertValue_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnDidInsert(self, static_cast<Opt_Callback_InsertValue_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnDidInsert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnWillDelete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DeleteValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DeleteValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DeleteValue_Boolean))))};
        }
        Opt_Callback_DeleteValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnWillDelete(self, static_cast<Opt_Callback_DeleteValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnWillDelete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnDidDelete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DeleteValue_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DeleteValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DeleteValue_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DeleteValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DeleteValue_Void))))};
        }
        Opt_Callback_DeleteValue_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnDidDelete(self, static_cast<Opt_Callback_DeleteValue_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnDidDelete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setEditMenuOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditMenuOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = EditMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_EditMenuOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setEditMenuOptions(self, static_cast<Opt_EditMenuOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setEditMenuOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setEnablePreviewText(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setEnablePreviewText(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setEnablePreviewText, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setAutoCapitalizationMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AutoCapitalizationMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AutoCapitalizationMode>(thisDeserializer.readInt32());
        }
        Opt_AutoCapitalizationMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setAutoCapitalizationMode(self, static_cast<Opt_AutoCapitalizationMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setAutoCapitalizationMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setHalfLeading(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setHalfLeading(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setHalfLeading, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setStopBackPress(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setStopBackPress(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setStopBackPress, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setOnWillChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_EditableTextChangeValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_EditableTextChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_EditableTextChangeValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_EditableTextChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_EditableTextChangeValue_Boolean))))};
        }
        Opt_Callback_EditableTextChangeValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setOnWillChange(self, static_cast<Opt_Callback_EditableTextChangeValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setOnWillChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setKeyboardAppearance(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardAppearance valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_KeyboardAppearance>(thisDeserializer.readInt32());
        }
        Opt_KeyboardAppearance valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setKeyboardAppearance(self, static_cast<Opt_KeyboardAppearance*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setKeyboardAppearance, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setSearchButton(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        const auto optionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SearchButtonOptions optionValueTempTmpBuf = {};
        optionValueTempTmpBuf.tag = optionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionValueTempTmpBuf.value = SearchButtonOptions_serializer::read(thisDeserializer);
        }
        Opt_SearchButtonOptions optionValueTemp = optionValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setSearchButton(self, static_cast<Opt_String*>(&valueValueTemp), static_cast<Opt_SearchButtonOptions*>(&optionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setSearchButton, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setInputFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        const auto errorValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void errorValueTempTmpBuf = {};
        errorValueTempTmpBuf.tag = errorValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((errorValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            errorValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void errorValueTemp = errorValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setInputFilter(self, static_cast<Opt_ResourceStr*>(&valueValueTemp), static_cast<Opt_Callback_String_Void*>(&errorValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setInputFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SearchAttribute_setCustomKeyboard(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = KeyboardOptions_serializer::read(thisDeserializer);
        }
        Opt_KeyboardOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getSearchModifier()->setCustomKeyboard(self, static_cast<Opt_CustomNodeBuilder*>(&valueValueTemp), static_cast<Opt_KeyboardOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SearchAttribute_setCustomKeyboard, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SecurityComponentMethod_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSecurityComponentMethodModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(SecurityComponentMethod_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SecurityComponentMethod_setIconSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setIconSize(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setIconSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setLayoutDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SecurityComponentLayoutDirection valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SecurityComponentLayoutDirection>(thisDeserializer.readInt32());
        }
        Opt_SecurityComponentLayoutDirection valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setLayoutDirection(self, static_cast<Opt_SecurityComponentLayoutDirection*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setLayoutDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Position valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Position_serializer::read(thisDeserializer);
        }
        Opt_Position valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setPosition(self, static_cast<Opt_Position*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setMarkAnchor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Position valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Position_serializer::read(thisDeserializer);
        }
        Opt_Position valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setMarkAnchor(self, static_cast<Opt_Position*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setMarkAnchor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Position_Edges_LocalizedEdges valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Position_Edges_LocalizedEdges valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Position_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Edges_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdges_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Position_Edges_LocalizedEdges>(valueValueTempTmpBuf_);
        }
        Opt_Union_Position_Edges_LocalizedEdges valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setOffset(self, static_cast<Opt_Union_Position_Edges_LocalizedEdges*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setFontSize(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setFontFamily(self, static_cast<Opt_Union_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setIconColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setIconColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setIconColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setBorderStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BorderStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BorderStyle>(thisDeserializer.readInt32());
        }
        Opt_BorderStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setBorderStyle(self, static_cast<Opt_BorderStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setBorderStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setBorderWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setBorderWidth(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setBorderWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setBorderColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setBorderColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setBorderColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setBorderRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto radiusValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Dimension_BorderRadiuses radiusValueTempTmpBuf = {};
        radiusValueTempTmpBuf.tag = radiusValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((radiusValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 radiusValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Dimension_BorderRadiuses radiusValueTempTmpBuf_ = {};
            radiusValueTempTmpBuf_.selector = radiusValueTempTmpBuf_UnionSelector;
            if (radiusValueTempTmpBuf_UnionSelector == 0) {
                radiusValueTempTmpBuf_.selector = 0;
                const Ark_Int8 radiusValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension radiusValueTempTmpBuf_BufU = {};
                radiusValueTempTmpBuf_BufU.selector = radiusValueTempTmpBuf_BufUUnionSelector;
                if (radiusValueTempTmpBuf_BufUUnionSelector == 0) {
                    radiusValueTempTmpBuf_BufU.selector = 0;
                    radiusValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (radiusValueTempTmpBuf_BufUUnionSelector == 1) {
                    radiusValueTempTmpBuf_BufU.selector = 1;
                    radiusValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (radiusValueTempTmpBuf_BufUUnionSelector == 2) {
                    radiusValueTempTmpBuf_BufU.selector = 2;
                    radiusValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for radiusValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                radiusValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(radiusValueTempTmpBuf_BufU);
            } else if (radiusValueTempTmpBuf_UnionSelector == 1) {
                radiusValueTempTmpBuf_.selector = 1;
                radiusValueTempTmpBuf_.value1 = BorderRadiuses_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for radiusValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            radiusValueTempTmpBuf.value = static_cast<Ark_Union_Dimension_BorderRadiuses>(radiusValueTempTmpBuf_);
        }
        Opt_Union_Dimension_BorderRadiuses radiusValueTemp = radiusValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setBorderRadius(self, static_cast<Opt_Union_Dimension_BorderRadiuses*>(&radiusValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setPadding(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Padding_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Padding_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Padding_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_BufU);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Padding_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Union_Padding_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setPadding(self, static_cast<Opt_Union_Padding_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setPadding, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setTextIconSpace(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setTextIconSpace(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setTextIconSpace, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setKey(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setKey(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setKey, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setHeight(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SizeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SizeOptions_serializer::read(thisDeserializer);
        }
        Opt_SizeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setSize(self, static_cast<Opt_SizeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setConstraintSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ConstraintSizeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ConstraintSizeOptions_serializer::read(thisDeserializer);
        }
        Opt_ConstraintSizeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setConstraintSize(self, static_cast<Opt_ConstraintSizeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setConstraintSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto alignTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Alignment alignTypeValueTempTmpBuf = {};
        alignTypeValueTempTmpBuf.tag = alignTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((alignTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            alignTypeValueTempTmpBuf.value = static_cast<Ark_Alignment>(thisDeserializer.readInt32());
        }
        Opt_Alignment alignTypeValueTemp = alignTypeValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setAlign(self, static_cast<Opt_Alignment*>(&alignTypeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setAlignRules(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto alignRuleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_AlignRuleOption_LocalizedAlignRuleOptions alignRuleValueTempTmpBuf = {};
        alignRuleValueTempTmpBuf.tag = alignRuleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((alignRuleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 alignRuleValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_AlignRuleOption_LocalizedAlignRuleOptions alignRuleValueTempTmpBuf_ = {};
            alignRuleValueTempTmpBuf_.selector = alignRuleValueTempTmpBuf_UnionSelector;
            if (alignRuleValueTempTmpBuf_UnionSelector == 0) {
                alignRuleValueTempTmpBuf_.selector = 0;
                alignRuleValueTempTmpBuf_.value0 = AlignRuleOption_serializer::read(thisDeserializer);
            } else if (alignRuleValueTempTmpBuf_UnionSelector == 1) {
                alignRuleValueTempTmpBuf_.selector = 1;
                alignRuleValueTempTmpBuf_.value1 = LocalizedAlignRuleOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for alignRuleValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            alignRuleValueTempTmpBuf.value = static_cast<Ark_Union_AlignRuleOption_LocalizedAlignRuleOptions>(alignRuleValueTempTmpBuf_);
        }
        Opt_Union_AlignRuleOption_LocalizedAlignRuleOptions alignRuleValueTemp = alignRuleValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setAlignRules(self, static_cast<Opt_Union_AlignRuleOption_LocalizedAlignRuleOptions*>(&alignRuleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setAlignRules, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto descriptionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String descriptionValueTempTmpBuf = {};
        descriptionValueTempTmpBuf.tag = descriptionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((descriptionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            descriptionValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String descriptionValueTemp = descriptionValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setId(self, static_cast<Opt_String*>(&descriptionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setId, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setChainMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto directionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Axis directionValueTempTmpBuf = {};
        directionValueTempTmpBuf.tag = directionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((directionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            directionValueTempTmpBuf.value = static_cast<Ark_Axis>(thisDeserializer.readInt32());
        }
        Opt_Axis directionValueTemp = directionValueTempTmpBuf;;
        const auto styleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ChainStyle styleValueTempTmpBuf = {};
        styleValueTempTmpBuf.tag = styleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((styleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            styleValueTempTmpBuf.value = static_cast<Ark_ChainStyle>(thisDeserializer.readInt32());
        }
        Opt_ChainStyle styleValueTemp = styleValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setChainMode(self, static_cast<Opt_Axis*>(&directionValueTemp), static_cast<Opt_ChainStyle*>(&styleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setChainMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setMinFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scaleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource scaleValueTempTmpBuf = {};
        scaleValueTempTmpBuf.tag = scaleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scaleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 scaleValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource scaleValueTempTmpBuf_ = {};
            scaleValueTempTmpBuf_.selector = scaleValueTempTmpBuf_UnionSelector;
            if (scaleValueTempTmpBuf_UnionSelector == 0) {
                scaleValueTempTmpBuf_.selector = 0;
                scaleValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (scaleValueTempTmpBuf_UnionSelector == 1) {
                scaleValueTempTmpBuf_.selector = 1;
                scaleValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for scaleValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            scaleValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(scaleValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource scaleValueTemp = scaleValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setMinFontScale(self, static_cast<Opt_Union_F64_Resource*>(&scaleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setMinFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setMaxFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scaleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource scaleValueTempTmpBuf = {};
        scaleValueTempTmpBuf.tag = scaleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scaleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 scaleValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource scaleValueTempTmpBuf_ = {};
            scaleValueTempTmpBuf_.selector = scaleValueTempTmpBuf_UnionSelector;
            if (scaleValueTempTmpBuf_UnionSelector == 0) {
                scaleValueTempTmpBuf_.selector = 0;
                scaleValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (scaleValueTempTmpBuf_UnionSelector == 1) {
                scaleValueTempTmpBuf_.selector = 1;
                scaleValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for scaleValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            scaleValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(scaleValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource scaleValueTemp = scaleValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setMaxFontScale(self, static_cast<Opt_Union_F64_Resource*>(&scaleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setMaxFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setMaxLines(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto lineValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_Resource lineValueTempTmpBuf = {};
        lineValueTempTmpBuf.tag = lineValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((lineValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 lineValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_Resource lineValueTempTmpBuf_ = {};
            lineValueTempTmpBuf_.selector = lineValueTempTmpBuf_UnionSelector;
            if (lineValueTempTmpBuf_UnionSelector == 0) {
                lineValueTempTmpBuf_.selector = 0;
                lineValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (lineValueTempTmpBuf_UnionSelector == 1) {
                lineValueTempTmpBuf_.selector = 1;
                lineValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for lineValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            lineValueTempTmpBuf.value = static_cast<Ark_Union_I32_Resource>(lineValueTempTmpBuf_);
        }
        Opt_Union_I32_Resource lineValueTemp = lineValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setMaxLines(self, static_cast<Opt_Union_I32_Resource*>(&lineValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setMaxLines, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setMinFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto minSizeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource minSizeValueTempTmpBuf = {};
        minSizeValueTempTmpBuf.tag = minSizeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((minSizeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 minSizeValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource minSizeValueTempTmpBuf_ = {};
            minSizeValueTempTmpBuf_.selector = minSizeValueTempTmpBuf_UnionSelector;
            if (minSizeValueTempTmpBuf_UnionSelector == 0) {
                minSizeValueTempTmpBuf_.selector = 0;
                minSizeValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (minSizeValueTempTmpBuf_UnionSelector == 1) {
                minSizeValueTempTmpBuf_.selector = 1;
                minSizeValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (minSizeValueTempTmpBuf_UnionSelector == 2) {
                minSizeValueTempTmpBuf_.selector = 2;
                minSizeValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for minSizeValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            minSizeValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(minSizeValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource minSizeValueTemp = minSizeValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setMinFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&minSizeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setMinFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setMaxFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto maxSizeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource maxSizeValueTempTmpBuf = {};
        maxSizeValueTempTmpBuf.tag = maxSizeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((maxSizeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 maxSizeValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource maxSizeValueTempTmpBuf_ = {};
            maxSizeValueTempTmpBuf_.selector = maxSizeValueTempTmpBuf_UnionSelector;
            if (maxSizeValueTempTmpBuf_UnionSelector == 0) {
                maxSizeValueTempTmpBuf_.selector = 0;
                maxSizeValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (maxSizeValueTempTmpBuf_UnionSelector == 1) {
                maxSizeValueTempTmpBuf_.selector = 1;
                maxSizeValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (maxSizeValueTempTmpBuf_UnionSelector == 2) {
                maxSizeValueTempTmpBuf_.selector = 2;
                maxSizeValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for maxSizeValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            maxSizeValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(maxSizeValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource maxSizeValueTemp = maxSizeValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setMaxFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&maxSizeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setMaxFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setHeightAdaptivePolicy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto policyValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextHeightAdaptivePolicy policyValueTempTmpBuf = {};
        policyValueTempTmpBuf.tag = policyValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((policyValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            policyValueTempTmpBuf.value = static_cast<Ark_TextHeightAdaptivePolicy>(thisDeserializer.readInt32());
        }
        Opt_TextHeightAdaptivePolicy policyValueTemp = policyValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setHeightAdaptivePolicy(self, static_cast<Opt_TextHeightAdaptivePolicy*>(&policyValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setHeightAdaptivePolicy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SecurityComponentMethod_setEnabled(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto respondValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean respondValueTempTmpBuf = {};
        respondValueTempTmpBuf.tag = respondValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((respondValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            respondValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean respondValueTemp = respondValueTempTmpBuf;;
        GetNodeModifiers()->getSecurityComponentMethodModifier()->setEnabled(self, static_cast<Opt_Boolean*>(&respondValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SecurityComponentMethod_setEnabled, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Select_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSelectModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Select_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SelectInterface_setSelectOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 optionsValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_SelectOption optionsValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(optionsValueTempTmpBuf)>::type,
        std::decay<decltype(*optionsValueTempTmpBuf.array)>::type>(&optionsValueTempTmpBuf, optionsValueTempTmpBufLength);
        for (int optionsValueTempTmpBufBufCounterI = 0; optionsValueTempTmpBufBufCounterI < optionsValueTempTmpBufLength; optionsValueTempTmpBufBufCounterI++) {
            optionsValueTempTmpBuf.array[optionsValueTempTmpBufBufCounterI] = SelectOption_serializer::read(thisDeserializer);
        }
        Array_SelectOption optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setSelectOptions(self, static_cast<Array_SelectOption*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectInterface_setSelectOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_Resource_Bindable_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_Resource_Bindable_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Bindable_I32_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Bindable_Global_Resource_Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_Resource_Bindable_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_Resource_Bindable_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setSelected(self, static_cast<Opt_Union_I32_Resource_Bindable_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setValue(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceStr_Bindable_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceStr_Bindable_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_String_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Bindable_Global_Resource_Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceStr_Bindable_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceStr_Bindable_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setValue(self, static_cast<Opt_Union_ResourceStr_Bindable_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setValue, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setSelectedOptionBgColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setSelectedOptionBgColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setSelectedOptionBgColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setSelectedOptionFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setSelectedOptionFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setSelectedOptionFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setSelectedOptionFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setSelectedOptionFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setSelectedOptionFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setOptionBgColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setOptionBgColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setOptionBgColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setOptionFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setOptionFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setOptionFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setOptionFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setOptionFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setOptionFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setOnSelect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnSelectCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_String selectStr)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnSelectCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_String selectStr)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnSelectCallback))))};
        }
        Opt_OnSelectCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setOnSelect(self, static_cast<Opt_OnSelectCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setOnSelect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setSpace(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setSpace(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setSpace, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setArrowPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ArrowPosition valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ArrowPosition>(thisDeserializer.readInt32());
        }
        Opt_ArrowPosition valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setArrowPosition(self, static_cast<Opt_ArrowPosition*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setArrowPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setOptionWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Dimension_OptionWidthMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Dimension_OptionWidthMode valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Dimension valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Dimension>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_OptionWidthMode>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Dimension_OptionWidthMode>(valueValueTempTmpBuf_);
        }
        Opt_Union_Dimension_OptionWidthMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setOptionWidth(self, static_cast<Opt_Union_Dimension_OptionWidthMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setOptionWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setOptionHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setOptionHeight(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setOptionHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setMenuBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setMenuBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setMenuBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setMenuBackgroundBlurStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BlurStyle>(thisDeserializer.readInt32());
        }
        Opt_BlurStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setMenuBackgroundBlurStyle(self, static_cast<Opt_BlurStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setMenuBackgroundBlurStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setControlSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ControlSize valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ControlSize>(thisDeserializer.readInt32());
        }
        Opt_ControlSize valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setControlSize(self, static_cast<Opt_ControlSize*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setControlSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DividerOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DividerOptions_serializer::read(thisDeserializer);
        }
        Opt_DividerOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setDivider(self, static_cast<Opt_DividerOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setTextModifier(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextModifier valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextModifier>(TextModifier_serializer::read(thisDeserializer));
        }
        Opt_TextModifier valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setTextModifier(self, static_cast<Opt_TextModifier*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setTextModifier, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setArrowModifier(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolGlyphModifier valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SymbolGlyphModifier>(SymbolGlyphModifier_serializer::read(thisDeserializer));
        }
        Opt_SymbolGlyphModifier valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setArrowModifier(self, static_cast<Opt_SymbolGlyphModifier*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setArrowModifier, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setOptionTextModifier(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextModifier valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextModifier>(TextModifier_serializer::read(thisDeserializer));
        }
        Opt_TextModifier valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setOptionTextModifier(self, static_cast<Opt_TextModifier*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setOptionTextModifier, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setSelectedOptionTextModifier(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextModifier valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextModifier>(TextModifier_serializer::read(thisDeserializer));
        }
        Opt_TextModifier valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setSelectedOptionTextModifier(self, static_cast<Opt_TextModifier*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setSelectedOptionTextModifier, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setDividerStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DividerStyleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DividerStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_DividerStyleOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setDividerStyle(self, static_cast<Opt_DividerStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setDividerStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setAvoidance(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AvoidanceMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AvoidanceMode>(thisDeserializer.readInt32());
        }
        Opt_AvoidanceMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setAvoidance(self, static_cast<Opt_AvoidanceMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setAvoidance, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setMenuOutline(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MenuOutlineOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = MenuOutlineOptions_serializer::read(thisDeserializer);
        }
        Opt_MenuOutlineOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setMenuOutline(self, static_cast<Opt_MenuOutlineOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setMenuOutline, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SelectAttribute_setMenuAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto alignTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MenuAlignType alignTypeValueTempTmpBuf = {};
        alignTypeValueTempTmpBuf.tag = alignTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((alignTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            alignTypeValueTempTmpBuf.value = static_cast<Ark_MenuAlignType>(thisDeserializer.readInt32());
        }
        Opt_MenuAlignType alignTypeValueTemp = alignTypeValueTempTmpBuf;;
        const auto offsetValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Offset offsetValueTempTmpBuf = {};
        offsetValueTempTmpBuf.tag = offsetValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((offsetValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            offsetValueTempTmpBuf.value = Offset_serializer::read(thisDeserializer);
        }
        Opt_Offset offsetValueTemp = offsetValueTempTmpBuf;;
        GetNodeModifiers()->getSelectModifier()->setMenuAlign(self, static_cast<Opt_MenuAlignType*>(&alignTypeValueTemp), static_cast<Opt_Offset*>(&offsetValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SelectAttribute_setMenuAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Shape_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getShapeModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Shape_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ShapeInterface_setShapeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_image_PixelMap valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        }
        Opt_image_PixelMap valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setShapeOptions(self, static_cast<Opt_image_PixelMap*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeInterface_setShapeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setViewPort(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ViewportRect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ViewportRect_serializer::read(thisDeserializer);
        }
        Opt_ViewportRect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setViewPort(self, static_cast<Opt_ViewportRect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setViewPort, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStroke(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStroke(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStroke, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setFill(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setFill(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setFill, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStrokeDashOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStrokeDashOffset(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStrokeDashOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStrokeDashArray(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Length valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                const Ark_Int8 valueValueTempTmpBuf_TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_TempBuf = {};
                valueValueTempTmpBuf_TempBuf.selector = valueValueTempTmpBuf_TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBuf.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_Length>(valueValueTempTmpBuf_TempBuf);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStrokeDashArray(self, static_cast<Opt_Array_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStrokeDashArray, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStrokeLineCap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineCapStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineCapStyle>(thisDeserializer.readInt32());
        }
        Opt_LineCapStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStrokeLineCap(self, static_cast<Opt_LineCapStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStrokeLineCap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStrokeLineJoin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineJoinStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineJoinStyle>(thisDeserializer.readInt32());
        }
        Opt_LineJoinStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStrokeLineJoin(self, static_cast<Opt_LineJoinStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStrokeLineJoin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStrokeMiterLimit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStrokeMiterLimit(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStrokeMiterLimit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStrokeOpacity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStrokeOpacity(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStrokeOpacity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setFillOpacity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setFillOpacity(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setFillOpacity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setStrokeWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setStrokeWidth(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setStrokeWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setAntiAlias(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setAntiAlias(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setAntiAlias, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ShapeAttribute_setMesh(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Float64 valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = thisDeserializer.readFloat64();
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_Float64 valueValueTemp = valueValueTempTmpBuf;;
        const auto columnValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 columnValueTempTmpBuf = {};
        columnValueTempTmpBuf.tag = columnValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((columnValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            columnValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 columnValueTemp = columnValueTempTmpBuf;;
        const auto rowValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 rowValueTempTmpBuf = {};
        rowValueTempTmpBuf.tag = rowValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rowValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rowValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 rowValueTemp = rowValueTempTmpBuf;;
        GetNodeModifiers()->getShapeModifier()->setMesh(self, static_cast<Opt_Array_Float64*>(&valueValueTemp), static_cast<Opt_Int32*>(&columnValueTemp), static_cast<Opt_Int32*>(&rowValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ShapeAttribute_setMesh, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SideBarContainer_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSideBarContainerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(SideBarContainer_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SideBarContainerInterface_setSideBarContainerOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SideBarContainerType typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_SideBarContainerType>(thisDeserializer.readInt32());
        }
        Opt_SideBarContainerType typeValueTemp = typeValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setSideBarContainerOptions(self, static_cast<Opt_SideBarContainerType*>(&typeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerInterface_setSideBarContainerOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setShowSideBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Boolean_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Boolean_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readBoolean();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Boolean_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Boolean_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Boolean_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setShowSideBar(self, static_cast<Opt_Union_Boolean_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setShowSideBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setControlButton(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ButtonStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ButtonStyle_serializer::read(thisDeserializer);
        }
        Opt_ButtonStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setControlButton(self, static_cast<Opt_ButtonStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setControlButton, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setShowControlButton(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setShowControlButton(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setShowControlButton, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setOnChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setSideBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_Arkui_Component_Units_Length_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setSideBarWidth(self, static_cast<Opt_Union_Length_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setSideBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setMinSideBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setMinSideBarWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setMinSideBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setMaxSideBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setMaxSideBarWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setMaxSideBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setAutoHide(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setAutoHide(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setAutoHide, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setSideBarPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SideBarPosition valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SideBarPosition>(thisDeserializer.readInt32());
        }
        Opt_SideBarPosition valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setSideBarPosition(self, static_cast<Opt_SideBarPosition*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setSideBarPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DividerStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DividerStyle_serializer::read(thisDeserializer);
        }
        Opt_DividerStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setDivider(self, static_cast<Opt_DividerStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SideBarContainerAttribute_setMinContentWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSideBarContainerModifier()->setMinContentWidth(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SideBarContainerAttribute_setMinContentWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Slider_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSliderModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Slider_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SliderInterface_setSliderOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SliderOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SliderOptions_serializer::read(thisDeserializer);
        }
        Opt_SliderOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setSliderOptions(self, static_cast<Opt_SliderOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderInterface_setSliderOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setBlockColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setBlockColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setBlockColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setTrackColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_LinearGradient valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_LinearGradient valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LinearGradient>(LinearGradient_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_LinearGradient>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_LinearGradient valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setTrackColor(self, static_cast<Opt_Union_ResourceColor_LinearGradient*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setTrackColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setSelectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_LinearGradient valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_LinearGradient valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LinearGradient>(LinearGradient_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_LinearGradient>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_LinearGradient valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setSelectedColor(self, static_cast<Opt_Union_ResourceColor_LinearGradient*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setSelectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setShowSteps(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setShowSteps(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setShowSteps, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setTrackThickness(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setTrackThickness(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setTrackThickness, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_F64_SliderChangeMode_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 value, Ark_SliderChangeMode mode)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_F64_SliderChangeMode_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 value, Ark_SliderChangeMode mode)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_F64_SliderChangeMode_Void))))};
        }
        Opt_Callback_F64_SliderChangeMode_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setOnChange(self, static_cast<Opt_Callback_F64_SliderChangeMode_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setBlockBorderColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setBlockBorderColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setBlockBorderColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setBlockBorderWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setBlockBorderWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setBlockBorderWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setStepColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setStepColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setStepColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setTrackBorderRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setTrackBorderRadius(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setTrackBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setSelectedBorderRadius(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setSelectedBorderRadius(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setSelectedBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setBlockSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SizeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SizeOptions_serializer::read(thisDeserializer);
        }
        Opt_SizeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setBlockSize(self, static_cast<Opt_SizeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setBlockSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setBlockStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SliderBlockStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SliderBlockStyle_serializer::read(thisDeserializer);
        }
        Opt_SliderBlockStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setBlockStyle(self, static_cast<Opt_SliderBlockStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setBlockStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setStepSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setStepSize(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setStepSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setSliderInteractionMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SliderInteraction valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SliderInteraction>(thisDeserializer.readInt32());
        }
        Opt_SliderInteraction valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setSliderInteractionMode(self, static_cast<Opt_SliderInteraction*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setSliderInteractionMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setMinResponsiveDistance(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setMinResponsiveDistance(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setMinResponsiveDistance, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setSlideRange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SlideRange valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SlideRange_serializer::read(thisDeserializer);
        }
        Opt_SlideRange valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setSlideRange(self, static_cast<Opt_SlideRange*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setSlideRange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setDigitalCrownSensitivity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CrownSensitivity valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CrownSensitivity>(thisDeserializer.readInt32());
        }
        Opt_CrownSensitivity valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setDigitalCrownSensitivity(self, static_cast<Opt_CrownSensitivity*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setDigitalCrownSensitivity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SliderAttribute_setShowTips(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 contentValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr contentValueTempTmpBuf_ = {};
            contentValueTempTmpBuf_.selector = contentValueTempTmpBuf_UnionSelector;
            if (contentValueTempTmpBuf_UnionSelector == 0) {
                contentValueTempTmpBuf_.selector = 0;
                contentValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (contentValueTempTmpBuf_UnionSelector == 1) {
                contentValueTempTmpBuf_.selector = 1;
                contentValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for contentValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            contentValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(contentValueTempTmpBuf_);
        }
        Opt_ResourceStr contentValueTemp = contentValueTempTmpBuf;;
        GetNodeModifiers()->getSliderModifier()->setShowTips(self, static_cast<Opt_Boolean*>(&valueValueTemp), static_cast<Opt_ResourceStr*>(&contentValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SliderAttribute_setShowTips, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BaseSpan_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getBaseSpanModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(BaseSpan_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_BaseSpan_setTextBackgroundStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextBackgroundStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextBackgroundStyle_serializer::read(thisDeserializer);
        }
        Opt_TextBackgroundStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getBaseSpanModifier()->setTextBackgroundStyle(self, static_cast<Opt_TextBackgroundStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseSpan_setTextBackgroundStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_BaseSpan_setBaselineOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetrics valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LengthMetrics>(LengthMetrics_serializer::read(thisDeserializer));
        }
        Opt_LengthMetrics valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getBaseSpanModifier()->setBaselineOffset(self, static_cast<Opt_LengthMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseSpan_setBaselineOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Span_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSpanModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Span_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SpanInterface_setSpanOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_Resource valueValueTemp = static_cast<Ark_Union_String_Resource>(valueValueTempTmpBuf);;
        GetNodeModifiers()->getSpanModifier()->setSpanOptions(self, static_cast<Ark_Union_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanInterface_setSpanOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setFontFamily(self, static_cast<Opt_Union_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setDecoration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DecorationStyleInterface valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DecorationStyleInterface_serializer::read(thisDeserializer);
        }
        Opt_DecorationStyleInterface valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setDecoration(self, static_cast<Opt_DecorationStyleInterface*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setDecoration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setLetterSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setLetterSpacing(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setLetterSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setTextCase(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextCase valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextCase>(thisDeserializer.readInt32());
        }
        Opt_TextCase valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setTextCase(self, static_cast<Opt_TextCase*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setTextCase, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setLineHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setLineHeight(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setLineHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SpanAttribute_setTextShadow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = ShadowOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_ShadowOptions valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = ShadowOptions_serializer::read(thisDeserializer);
                }
                valueValueTempTmpBuf_.value1 = valueValueTempTmpBuf_BufU;
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ShadowOptions_Array_ShadowOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSpanModifier()->setTextShadow(self, static_cast<Opt_Union_ShadowOptions_Array_ShadowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SpanAttribute_setTextShadow, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Stack_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getStackModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Stack_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_StackInterface_setStackOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_StackOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = StackOptions_serializer::read(thisDeserializer);
        }
        Opt_StackOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getStackModifier()->setStackOptions(self, static_cast<Opt_StackOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StackInterface_setStackOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StackAttribute_setAlignContent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Alignment valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_Alignment>(thisDeserializer.readInt32());
        }
        Opt_Alignment valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStackModifier()->setAlignContent(self, static_cast<Opt_Alignment*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StackAttribute_setAlignContent, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Stepper_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getStepperModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Stepper_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_StepperInterface_setStepperOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_StepperOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = StepperOptions_serializer::read(thisDeserializer);
        }
        Opt_StepperOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperModifier()->setStepperOptions(self, static_cast<Opt_StepperOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperInterface_setStepperOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StepperAttribute_setOnFinish(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperModifier()->setOnFinish(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperAttribute_setOnFinish, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StepperAttribute_setOnSkip(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperModifier()->setOnSkip(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperAttribute_setOnSkip, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StepperAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 prevIndex, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 prevIndex, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperModifier()->setOnChange(self, static_cast<Opt_Callback_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StepperAttribute_setOnNext(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 prevIndex, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 prevIndex, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperModifier()->setOnNext(self, static_cast<Opt_Callback_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperAttribute_setOnNext, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StepperAttribute_setOnPrevious(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 prevIndex, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 prevIndex, const Ark_Int32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperModifier()->setOnPrevious(self, static_cast<Opt_Callback_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperAttribute_setOnPrevious, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_StepperItem_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getStepperItemModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(StepperItem_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_StepperItemInterface_setStepperItemOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getStepperItemModifier()->setStepperItemOptions(self);
}
KOALA_INTEROP_DIRECT_V1(StepperItemInterface_setStepperItemOptions, Ark_NativePointer)
void impl_StepperItemAttribute_setPrevLabel(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperItemModifier()->setPrevLabel(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperItemAttribute_setPrevLabel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StepperItemAttribute_setNextLabel(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperItemModifier()->setNextLabel(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperItemAttribute_setNextLabel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StepperItemAttribute_setStatus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ItemState valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ItemState>(thisDeserializer.readInt32());
        }
        Opt_ItemState valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getStepperItemModifier()->setStatus(self, static_cast<Opt_ItemState*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StepperItemAttribute_setStatus, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Swiper_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSwiperModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Swiper_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SwiperInterface_setSwiperOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto controllerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SwiperController controllerValueTempTmpBuf = {};
        controllerValueTempTmpBuf.tag = controllerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((controllerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            controllerValueTempTmpBuf.value = static_cast<Ark_SwiperController>(SwiperController_serializer::read(thisDeserializer));
        }
        Opt_SwiperController controllerValueTemp = controllerValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setSwiperOptions(self, static_cast<Opt_SwiperController*>(&controllerValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperInterface_setSwiperOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_Bindable valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_Bindable valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Bindable_I32_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_Bindable>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_Bindable valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setIndex(self, static_cast<Opt_Union_I32_Bindable*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setAutoPlay0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setAutoPlay0(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setAutoPlay0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setInterval(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setInterval(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setInterval, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setIndicator(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_IndicatorComponentController_DotIndicator_DigitIndicator_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_IndicatorComponentController_DotIndicator_DigitIndicator_Boolean valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_IndicatorComponentController>(IndicatorComponentController_serializer::read(thisDeserializer));
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = DotIndicator_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = DigitIndicator_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = thisDeserializer.readBoolean();
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_IndicatorComponentController_DotIndicator_DigitIndicator_Boolean>(valueValueTempTmpBuf_);
        }
        Opt_Union_IndicatorComponentController_DotIndicator_DigitIndicator_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setIndicator(self, static_cast<Opt_Union_IndicatorComponentController_DotIndicator_DigitIndicator_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setIndicator, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setLoop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setLoop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setLoop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setDuration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setDuration(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setDuration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setVertical(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setVertical(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setVertical, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setItemSpace(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setItemSpace(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setItemSpace, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setDisplayMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SwiperDisplayMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SwiperDisplayMode>(thisDeserializer.readInt32());
        }
        Opt_SwiperDisplayMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setDisplayMode(self, static_cast<Opt_SwiperDisplayMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setDisplayMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setCachedCount0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setCachedCount0(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setCachedCount0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setEffectMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EdgeEffect>(thisDeserializer.readInt32());
        }
        Opt_EdgeEffect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setEffectMode(self, static_cast<Opt_EdgeEffect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setEffectMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setDisableSwipe(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setDisableSwipe(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setDisableSwipe, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setCurve(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Curve_String_ICurve valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Curve_String_ICurve valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_curves_Curve>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_curves_ICurve>(curves_ICurve_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Curve_String_ICurve>(valueValueTempTmpBuf_);
        }
        Opt_Union_Curve_String_ICurve valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setCurve(self, static_cast<Opt_Union_Curve_String_ICurve*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setCurve, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnChange(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnSelected(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnUnselected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnUnselected(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnUnselected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnAnimationStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnSwiperAnimationStartCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_Int32 targetIndex, const Ark_SwiperAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnSwiperAnimationStartCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_Int32 targetIndex, const Ark_SwiperAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnSwiperAnimationStartCallback))))};
        }
        Opt_OnSwiperAnimationStartCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnAnimationStart(self, static_cast<Opt_OnSwiperAnimationStartCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnAnimationStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnAnimationEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnSwiperAnimationEndCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_SwiperAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnSwiperAnimationEndCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_SwiperAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnSwiperAnimationEndCallback))))};
        }
        Opt_OnSwiperAnimationEndCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnAnimationEnd(self, static_cast<Opt_OnSwiperAnimationEndCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnAnimationEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnGestureSwipe(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnSwiperGestureSwipeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_SwiperAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnSwiperGestureSwipeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_SwiperAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnSwiperGestureSwipeCallback))))};
        }
        Opt_OnSwiperGestureSwipeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnGestureSwipe(self, static_cast<Opt_OnSwiperGestureSwipeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnGestureSwipe, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setNestedScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SwiperNestedScrollMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SwiperNestedScrollMode>(thisDeserializer.readInt32());
        }
        Opt_SwiperNestedScrollMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setNestedScroll(self, static_cast<Opt_SwiperNestedScrollMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setNestedScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setCustomContentTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SwiperContentAnimatedTransition valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SwiperContentAnimatedTransition_serializer::read(thisDeserializer);
        }
        Opt_SwiperContentAnimatedTransition valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setCustomContentTransition(self, static_cast<Opt_SwiperContentAnimatedTransition*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setCustomContentTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnContentDidScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ContentDidScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 selectedIndex, const Ark_Int32 index, const Ark_Float64 position, const Ark_Float64 mainAxisLength)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ContentDidScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 selectedIndex, const Ark_Int32 index, const Ark_Float64 position, const Ark_Float64 mainAxisLength)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ContentDidScrollCallback))))};
        }
        Opt_ContentDidScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnContentDidScroll(self, static_cast<Opt_ContentDidScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnContentDidScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setIndicatorInteractive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setIndicatorInteractive(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setIndicatorInteractive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setPageFlipMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PageFlipMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_PageFlipMode>(thisDeserializer.readInt32());
        }
        Opt_PageFlipMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setPageFlipMode(self, static_cast<Opt_PageFlipMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setPageFlipMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setOnContentWillScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ContentWillScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_SwiperContentWillScrollResult result, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ContentWillScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_SwiperContentWillScrollResult result, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ContentWillScrollCallback))))};
        }
        Opt_ContentWillScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setOnContentWillScroll(self, static_cast<Opt_ContentWillScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setOnContentWillScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setAutoPlay1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto autoPlayValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean autoPlayValueTempTmpBuf = {};
        autoPlayValueTempTmpBuf.tag = autoPlayValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((autoPlayValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            autoPlayValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean autoPlayValueTemp = autoPlayValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AutoPlayOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = AutoPlayOptions_serializer::read(thisDeserializer);
        }
        Opt_AutoPlayOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setAutoPlay1(self, static_cast<Opt_Boolean*>(&autoPlayValueTemp), static_cast<Opt_AutoPlayOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setAutoPlay1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setDisplayArrow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ArrowStyle_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ArrowStyle_Boolean valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = ArrowStyle_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = thisDeserializer.readBoolean();
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ArrowStyle_Boolean>(valueValueTempTmpBuf_);
        }
        Opt_Union_ArrowStyle_Boolean valueValueTemp = valueValueTempTmpBuf;;
        const auto isHoverShowValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isHoverShowValueTempTmpBuf = {};
        isHoverShowValueTempTmpBuf.tag = isHoverShowValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isHoverShowValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isHoverShowValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isHoverShowValueTemp = isHoverShowValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setDisplayArrow(self, static_cast<Opt_Union_ArrowStyle_Boolean*>(&valueValueTemp), static_cast<Opt_Boolean*>(&isHoverShowValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setDisplayArrow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setCachedCount1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto countValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 countValueTempTmpBuf = {};
        countValueTempTmpBuf.tag = countValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((countValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            countValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 countValueTemp = countValueTempTmpBuf;;
        const auto isShownValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isShownValueTempTmpBuf = {};
        isShownValueTempTmpBuf.tag = isShownValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isShownValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isShownValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isShownValueTemp = isShownValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setCachedCount1(self, static_cast<Opt_Int32*>(&countValueTemp), static_cast<Opt_Boolean*>(&isShownValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setCachedCount1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setDisplayCount(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_String_SwiperAutoFill valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_String_SwiperAutoFill valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = SwiperAutoFill_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_String_SwiperAutoFill>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_String_SwiperAutoFill valueValueTemp = valueValueTempTmpBuf;;
        const auto swipeByGroupValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean swipeByGroupValueTempTmpBuf = {};
        swipeByGroupValueTempTmpBuf.tag = swipeByGroupValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((swipeByGroupValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            swipeByGroupValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean swipeByGroupValueTemp = swipeByGroupValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setDisplayCount(self, static_cast<Opt_Union_I32_String_SwiperAutoFill*>(&valueValueTemp), static_cast<Opt_Boolean*>(&swipeByGroupValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setDisplayCount, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setPrevMargin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        const auto ignoreBlankValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean ignoreBlankValueTempTmpBuf = {};
        ignoreBlankValueTempTmpBuf.tag = ignoreBlankValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((ignoreBlankValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            ignoreBlankValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean ignoreBlankValueTemp = ignoreBlankValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setPrevMargin(self, static_cast<Opt_Length*>(&valueValueTemp), static_cast<Opt_Boolean*>(&ignoreBlankValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setPrevMargin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperAttribute_setNextMargin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        const auto ignoreBlankValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean ignoreBlankValueTempTmpBuf = {};
        ignoreBlankValueTempTmpBuf.tag = ignoreBlankValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((ignoreBlankValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            ignoreBlankValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean ignoreBlankValueTemp = ignoreBlankValueTempTmpBuf;;
        GetNodeModifiers()->getSwiperModifier()->setNextMargin(self, static_cast<Opt_Length*>(&valueValueTemp), static_cast<Opt_Boolean*>(&ignoreBlankValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperAttribute_setNextMargin, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SymbolGlyph_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSymbolGlyphModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(SymbolGlyph_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SymbolGlyphInterface_setSymbolGlyphOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Resource_serializer::read(thisDeserializer);
        }
        Opt_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setSymbolGlyphOptions(self, static_cast<Opt_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphInterface_setSymbolGlyphOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ResourceColor valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                const Ark_Int8 valueValueTempTmpBuf_TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_TempBuf = {};
                valueValueTempTmpBuf_TempBuf.selector = valueValueTempTmpBuf_TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBuf.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBuf.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 3) {
                    valueValueTempTmpBuf_TempBuf.selector = 3;
                    valueValueTempTmpBuf_TempBuf.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_TempBuf);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setFontColor(self, static_cast<Opt_Array_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setEffectStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolEffectStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SymbolEffectStrategy>(thisDeserializer.readInt32());
        }
        Opt_SymbolEffectStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setEffectStrategy(self, static_cast<Opt_SymbolEffectStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setEffectStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setRenderingStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolRenderingStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SymbolRenderingStrategy>(thisDeserializer.readInt32());
        }
        Opt_SymbolRenderingStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setRenderingStrategy(self, static_cast<Opt_SymbolRenderingStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setRenderingStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setSymbolEffect0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SymbolEffect>(SymbolEffect_serializer::read(thisDeserializer));
        }
        Opt_SymbolEffect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setSymbolEffect0(self, static_cast<Opt_SymbolEffect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setSymbolEffect0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setMinFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setMinFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setMinFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setMaxFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setMaxFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setMaxFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setSymbolEffect1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto symbolEffectValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolEffect symbolEffectValueTempTmpBuf = {};
        symbolEffectValueTempTmpBuf.tag = symbolEffectValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((symbolEffectValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            symbolEffectValueTempTmpBuf.value = static_cast<Ark_SymbolEffect>(SymbolEffect_serializer::read(thisDeserializer));
        }
        Opt_SymbolEffect symbolEffectValueTemp = symbolEffectValueTempTmpBuf;;
        const auto isActiveValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isActiveValueTempTmpBuf = {};
        isActiveValueTempTmpBuf.tag = isActiveValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isActiveValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isActiveValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isActiveValueTemp = isActiveValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setSymbolEffect1(self, static_cast<Opt_SymbolEffect*>(&symbolEffectValueTemp), static_cast<Opt_Boolean*>(&isActiveValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setSymbolEffect1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolGlyphAttribute_setSymbolEffect2(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto symbolEffectValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolEffect symbolEffectValueTempTmpBuf = {};
        symbolEffectValueTempTmpBuf.tag = symbolEffectValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((symbolEffectValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            symbolEffectValueTempTmpBuf.value = static_cast<Ark_SymbolEffect>(SymbolEffect_serializer::read(thisDeserializer));
        }
        Opt_SymbolEffect symbolEffectValueTemp = symbolEffectValueTempTmpBuf;;
        const auto triggerValueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 triggerValueValueTempTmpBuf = {};
        triggerValueValueTempTmpBuf.tag = triggerValueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((triggerValueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            triggerValueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 triggerValueValueTemp = triggerValueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolGlyphModifier()->setSymbolEffect2(self, static_cast<Opt_SymbolEffect*>(&symbolEffectValueTemp), static_cast<Opt_Int32*>(&triggerValueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolGlyphAttribute_setSymbolEffect2, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SymbolSpan_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getSymbolSpanModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(SymbolSpan_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_SymbolSpanInterface_setSymbolSpanOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Resource valueValueTemp = Resource_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getSymbolSpanModifier()->setSymbolSpanOptions(self, static_cast<Ark_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolSpanInterface_setSymbolSpanOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolSpanAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolSpanModifier()->setFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolSpanAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolSpanAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ResourceColor valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                const Ark_Int8 valueValueTempTmpBuf_TempBufUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_TempBuf = {};
                valueValueTempTmpBuf_TempBuf.selector = valueValueTempTmpBuf_TempBufUnionSelector;
                if (valueValueTempTmpBuf_TempBufUnionSelector == 0) {
                    valueValueTempTmpBuf_TempBuf.selector = 0;
                    valueValueTempTmpBuf_TempBuf.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 1) {
                    valueValueTempTmpBuf_TempBuf.selector = 1;
                    valueValueTempTmpBuf_TempBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 2) {
                    valueValueTempTmpBuf_TempBuf.selector = 2;
                    valueValueTempTmpBuf_TempBuf.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_TempBufUnionSelector == 3) {
                    valueValueTempTmpBuf_TempBuf.selector = 3;
                    valueValueTempTmpBuf_TempBuf.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_TempBuf has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_TempBuf);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolSpanModifier()->setFontColor(self, static_cast<Opt_Array_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolSpanAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolSpanAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolSpanModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolSpanAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolSpanAttribute_setEffectStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolEffectStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SymbolEffectStrategy>(thisDeserializer.readInt32());
        }
        Opt_SymbolEffectStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolSpanModifier()->setEffectStrategy(self, static_cast<Opt_SymbolEffectStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolSpanAttribute_setEffectStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SymbolSpanAttribute_setRenderingStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolRenderingStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_SymbolRenderingStrategy>(thisDeserializer.readInt32());
        }
        Opt_SymbolRenderingStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getSymbolSpanModifier()->setRenderingStrategy(self, static_cast<Opt_SymbolRenderingStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SymbolSpanAttribute_setRenderingStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TabContent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTabContentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(TabContent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TabContentInterface_setTabContentOptions(Ark_NativePointer thisPtr) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getTabContentModifier()->setTabContentOptions(self);
}
KOALA_INTEROP_DIRECT_V1(TabContentInterface_setTabContentOptions, Ark_NativePointer)
void impl_TabContentAttribute_setTabBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ComponentContent_SubTabBarStyle_BottomTabBarStyle_String_Resource_CustomBuilder_TabBarOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ComponentContent_SubTabBarStyle_BottomTabBarStyle_String_Resource_CustomBuilder_TabBarOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ComponentContent>(thisDeserializer.readObject());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = SubTabBarStyle_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = BottomTabBarStyle_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 4) {
                valueValueTempTmpBuf_.selector = 4;
                valueValueTempTmpBuf_.value4 = Resource_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 5) {
                valueValueTempTmpBuf_.selector = 5;
                valueValueTempTmpBuf_.value5 = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
            } else if (valueValueTempTmpBuf_UnionSelector == 6) {
                valueValueTempTmpBuf_.selector = 6;
                valueValueTempTmpBuf_.value6 = TabBarOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ComponentContent_SubTabBarStyle_BottomTabBarStyle_String_Resource_CustomBuilder_TabBarOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_ComponentContent_SubTabBarStyle_BottomTabBarStyle_String_Resource_CustomBuilder_TabBarOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabContentModifier()->setTabBar(self, static_cast<Opt_Union_ComponentContent_SubTabBarStyle_BottomTabBarStyle_String_Resource_CustomBuilder_TabBarOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabContentAttribute_setTabBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabContentAttribute_setOnWillShow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabContentModifier()->setOnWillShow(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabContentAttribute_setOnWillShow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabContentAttribute_setOnWillHide(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabContentModifier()->setOnWillHide(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabContentAttribute_setOnWillHide, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Tabs_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTabsModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Tabs_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TabsInterface_setTabsOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TabsOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = TabsOptions_serializer::read(thisDeserializer);
        }
        Opt_TabsOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setTabsOptions(self, static_cast<Opt_TabsOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsInterface_setTabsOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setVertical(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setVertical(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setVertical, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarPosition valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarPosition>(thisDeserializer.readInt32());
        }
        Opt_BarPosition valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarPosition(self, static_cast<Opt_BarPosition*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setScrollable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setScrollable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setScrollable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarWidth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarWidth(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarWidth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarHeight(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setAnimationDuration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setAnimationDuration(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setAnimationDuration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setAnimationMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AnimationMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AnimationMode>(thisDeserializer.readInt32());
        }
        Opt_AnimationMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setAnimationMode(self, static_cast<Opt_AnimationMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setAnimationMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setEdgeEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EdgeEffect valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EdgeEffect>(thisDeserializer.readInt32());
        }
        Opt_EdgeEffect valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setEdgeEffect(self, static_cast<Opt_EdgeEffect*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setEdgeEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnChange(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnSelected(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnTabBarClick(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnTabBarClick(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnTabBarClick, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnUnselected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_Void))))};
        }
        Opt_Callback_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnUnselected(self, static_cast<Opt_Callback_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnUnselected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnAnimationStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTabsAnimationStartCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_Int32 targetIndex, const Ark_TabsAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTabsAnimationStartCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_Int32 targetIndex, const Ark_TabsAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTabsAnimationStartCallback))))};
        }
        Opt_OnTabsAnimationStartCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnAnimationStart(self, static_cast<Opt_OnTabsAnimationStartCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnAnimationStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnAnimationEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTabsAnimationEndCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_TabsAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTabsAnimationEndCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_TabsAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTabsAnimationEndCallback))))};
        }
        Opt_OnTabsAnimationEndCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnAnimationEnd(self, static_cast<Opt_OnTabsAnimationEndCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnAnimationEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnGestureSwipe(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTabsGestureSwipeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_TabsAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTabsGestureSwipeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Ark_TabsAnimationEvent extraInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTabsGestureSwipeCallback))))};
        }
        Opt_OnTabsGestureSwipeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnGestureSwipe(self, static_cast<Opt_OnTabsGestureSwipeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnGestureSwipe, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setFadingEdge(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setFadingEdge(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setFadingEdge, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DividerStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DividerStyle_serializer::read(thisDeserializer);
        }
        Opt_DividerStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setDivider(self, static_cast<Opt_DividerStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarOverlap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarOverlap(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarOverlap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarGridAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarGridColumnOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = BarGridColumnOptions_serializer::read(thisDeserializer);
        }
        Opt_BarGridColumnOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarGridAlign(self, static_cast<Opt_BarGridColumnOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarGridAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setCustomContentTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TabsCustomContentTransitionCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to, const Callback_Opt_TabContentAnimatedTransition_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TabsCustomContentTransitionCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to, const Callback_Opt_TabContentAnimatedTransition_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TabsCustomContentTransitionCallback))))};
        }
        Opt_TabsCustomContentTransitionCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setCustomContentTransition(self, static_cast<Opt_TabsCustomContentTransitionCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setCustomContentTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarBackgroundBlurStyle0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BlurStyle>(thisDeserializer.readInt32());
        }
        Opt_BlurStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarBackgroundBlurStyle0(self, static_cast<Opt_BlurStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarBackgroundBlurStyle0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setPageFlipMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PageFlipMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_PageFlipMode>(thisDeserializer.readInt32());
        }
        Opt_PageFlipMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setPageFlipMode(self, static_cast<Opt_PageFlipMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setPageFlipMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarBackgroundEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundEffectOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = BackgroundEffectOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundEffectOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarBackgroundEffect(self, static_cast<Opt_BackgroundEffectOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarBackgroundEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setOnContentWillChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTabsContentWillChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 currentIndex, const Ark_Int32 comingIndex, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTabsContentWillChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 currentIndex, const Ark_Int32 comingIndex, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTabsContentWillChangeCallback))))};
        }
        Opt_OnTabsContentWillChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setOnContentWillChange(self, static_cast<Opt_OnTabsContentWillChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setOnContentWillChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarMode>(thisDeserializer.readInt32());
        }
        Opt_BarMode valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollableBarModeOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ScrollableBarModeOptions_serializer::read(thisDeserializer);
        }
        Opt_ScrollableBarModeOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarMode(self, static_cast<Opt_BarMode*>(&valueValueTemp), static_cast<Opt_ScrollableBarModeOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setBarBackgroundBlurStyle1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto styleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurStyle styleValueTempTmpBuf = {};
        styleValueTempTmpBuf.tag = styleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((styleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            styleValueTempTmpBuf.value = static_cast<Ark_BlurStyle>(thisDeserializer.readInt32());
        }
        Opt_BlurStyle styleValueTemp = styleValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BackgroundBlurStyleOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = BackgroundBlurStyleOptions_serializer::read(thisDeserializer);
        }
        Opt_BackgroundBlurStyleOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setBarBackgroundBlurStyle1(self, static_cast<Opt_BlurStyle*>(&styleValueTemp), static_cast<Opt_BackgroundBlurStyleOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setBarBackgroundBlurStyle1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsAttribute_setCachedMaxCount(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto countValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 countValueTempTmpBuf = {};
        countValueTempTmpBuf.tag = countValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((countValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            countValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 countValueTemp = countValueTempTmpBuf;;
        const auto modeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TabsCacheMode modeValueTempTmpBuf = {};
        modeValueTempTmpBuf.tag = modeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((modeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            modeValueTempTmpBuf.value = static_cast<Ark_TabsCacheMode>(thisDeserializer.readInt32());
        }
        Opt_TabsCacheMode modeValueTemp = modeValueTempTmpBuf;;
        GetNodeModifiers()->getTabsModifier()->setCachedMaxCount(self, static_cast<Opt_Int32*>(&countValueTemp), static_cast<Opt_TabsCacheMode*>(&modeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsAttribute_setCachedMaxCount, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Text_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTextModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Text_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TextInterface_setTextOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 contentValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource contentValueTempTmpBuf_ = {};
            contentValueTempTmpBuf_.selector = contentValueTempTmpBuf_UnionSelector;
            if (contentValueTempTmpBuf_UnionSelector == 0) {
                contentValueTempTmpBuf_.selector = 0;
                contentValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (contentValueTempTmpBuf_UnionSelector == 1) {
                contentValueTempTmpBuf_.selector = 1;
                contentValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for contentValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            contentValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(contentValueTempTmpBuf_);
        }
        Opt_Union_String_Resource contentValueTemp = contentValueTempTmpBuf;;
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextOptions_serializer::read(thisDeserializer);
        }
        Opt_TextOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setTextOptions(self, static_cast<Opt_Union_String_Resource*>(&contentValueTemp), static_cast<Opt_TextOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInterface_setTextOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setMinFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setMinFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setMinFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setMaxFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setMaxFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setMaxFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setMinFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setMinFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setMinFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setMaxFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setMaxFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setMaxFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setLineSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetrics valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LengthMetrics>(LengthMetrics_serializer::read(thisDeserializer));
        }
        Opt_LengthMetrics valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setLineSpacing(self, static_cast<Opt_LengthMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setLineSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setTextAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextAlign>(thisDeserializer.readInt32());
        }
        Opt_TextAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setTextAlign(self, static_cast<Opt_TextAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setTextAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setLineHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setLineHeight(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setLineHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setTextOverflow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextOverflowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextOverflowOptions_serializer::read(thisDeserializer);
        }
        Opt_TextOverflowOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setTextOverflow(self, static_cast<Opt_TextOverflowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setTextOverflow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setFontFamily(self, static_cast<Opt_Union_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setMaxLines(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setMaxLines(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setMaxLines, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setDecoration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DecorationStyleInterface valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DecorationStyleInterface_serializer::read(thisDeserializer);
        }
        Opt_DecorationStyleInterface valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setDecoration(self, static_cast<Opt_DecorationStyleInterface*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setDecoration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setLetterSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setLetterSpacing(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setLetterSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setTextCase(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextCase valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextCase>(thisDeserializer.readInt32());
        }
        Opt_TextCase valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setTextCase(self, static_cast<Opt_TextCase*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setTextCase, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setBaselineOffset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setBaselineOffset(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setBaselineOffset, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setCopyOption(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CopyOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CopyOptions>(thisDeserializer.readInt32());
        }
        Opt_CopyOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setCopyOption(self, static_cast<Opt_CopyOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setCopyOption, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setDraggable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setDraggable(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setDraggable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setTextShadow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = ShadowOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_ShadowOptions valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = ShadowOptions_serializer::read(thisDeserializer);
                }
                valueValueTempTmpBuf_.value1 = valueValueTempTmpBuf_BufU;
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ShadowOptions_Array_ShadowOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setTextShadow(self, static_cast<Opt_Union_ShadowOptions_Array_ShadowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setTextShadow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setHeightAdaptivePolicy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextHeightAdaptivePolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextHeightAdaptivePolicy>(thisDeserializer.readInt32());
        }
        Opt_TextHeightAdaptivePolicy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setHeightAdaptivePolicy(self, static_cast<Opt_TextHeightAdaptivePolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setHeightAdaptivePolicy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setTextIndent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setTextIndent(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setTextIndent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setWordBreak(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WordBreak valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_WordBreak>(thisDeserializer.readInt32());
        }
        Opt_WordBreak valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setWordBreak(self, static_cast<Opt_WordBreak*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setWordBreak, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setLineBreakStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineBreakStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineBreakStrategy>(thisDeserializer.readInt32());
        }
        Opt_LineBreakStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setLineBreakStrategy(self, static_cast<Opt_LineBreakStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setLineBreakStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setOnCopy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setOnCopy(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setOnCopy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setCaretColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setCaretColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setCaretColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setSelectedBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setSelectedBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setSelectedBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setEllipsisMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EllipsisMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EllipsisMode>(thisDeserializer.readInt32());
        }
        Opt_EllipsisMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setEllipsisMode(self, static_cast<Opt_EllipsisMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setEllipsisMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setEnableDataDetector(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setEnableDataDetector(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setEnableDataDetector, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setDataDetectorConfig(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextDataDetectorConfig valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextDataDetectorConfig_serializer::read(thisDeserializer);
        }
        Opt_TextDataDetectorConfig valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setDataDetectorConfig(self, static_cast<Opt_TextDataDetectorConfig*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setDataDetectorConfig, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setOnTextSelectionChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setOnTextSelectionChange(self, static_cast<Opt_Callback_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setOnTextSelectionChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setFontFeature(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setFontFeature(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setFontFeature, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setMarqueeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextMarqueeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextMarqueeOptions_serializer::read(thisDeserializer);
        }
        Opt_TextMarqueeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setMarqueeOptions(self, static_cast<Opt_TextMarqueeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setMarqueeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setOnMarqueeStateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_MarqueeState_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_MarqueeState value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_MarqueeState_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_MarqueeState value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_MarqueeState_Void))))};
        }
        Opt_Callback_MarqueeState_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setOnMarqueeStateChange(self, static_cast<Opt_Callback_MarqueeState_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setOnMarqueeStateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setPrivacySensitive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setPrivacySensitive(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setPrivacySensitive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setTextSelectable(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextSelectableMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextSelectableMode>(thisDeserializer.readInt32());
        }
        Opt_TextSelectableMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setTextSelectable(self, static_cast<Opt_TextSelectableMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setTextSelectable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setEditMenuOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditMenuOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = EditMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_EditMenuOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setEditMenuOptions(self, static_cast<Opt_EditMenuOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setEditMenuOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setHalfLeading(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setHalfLeading(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setHalfLeading, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto fontValueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font fontValueValueTempTmpBuf = {};
        fontValueValueTempTmpBuf.tag = fontValueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fontValueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fontValueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font fontValueValueTemp = fontValueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontSettingOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = FontSettingOptions_serializer::read(thisDeserializer);
        }
        Opt_FontSettingOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setFont(self, static_cast<Opt_Font*>(&fontValueValueTemp), static_cast<Opt_FontSettingOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto weightValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String weightValueTempTmpBuf = {};
        weightValueTempTmpBuf.tag = weightValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((weightValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 weightValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String weightValueTempTmpBuf_ = {};
            weightValueTempTmpBuf_.selector = weightValueTempTmpBuf_UnionSelector;
            if (weightValueTempTmpBuf_UnionSelector == 0) {
                weightValueTempTmpBuf_.selector = 0;
                weightValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (weightValueTempTmpBuf_UnionSelector == 1) {
                weightValueTempTmpBuf_.selector = 1;
                weightValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (weightValueTempTmpBuf_UnionSelector == 2) {
                weightValueTempTmpBuf_.selector = 2;
                weightValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for weightValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            weightValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(weightValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String weightValueTemp = weightValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontSettingOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = FontSettingOptions_serializer::read(thisDeserializer);
        }
        Opt_FontSettingOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&weightValueTemp), static_cast<Opt_FontSettingOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setSelection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto selectionStartValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 selectionStartValueTempTmpBuf = {};
        selectionStartValueTempTmpBuf.tag = selectionStartValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((selectionStartValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            selectionStartValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 selectionStartValueTemp = selectionStartValueTempTmpBuf;;
        const auto selectionEndValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 selectionEndValueTempTmpBuf = {};
        selectionEndValueTempTmpBuf.tag = selectionEndValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((selectionEndValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            selectionEndValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 selectionEndValueTemp = selectionEndValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setSelection(self, static_cast<Opt_Int32*>(&selectionStartValueTemp), static_cast<Opt_Int32*>(&selectionEndValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setSelection, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAttribute_setBindSelectionMenu(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto spanTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextSpanType spanTypeValueTempTmpBuf = {};
        spanTypeValueTempTmpBuf.tag = spanTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((spanTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            spanTypeValueTempTmpBuf.value = static_cast<Ark_TextSpanType>(thisDeserializer.readInt32());
        }
        Opt_TextSpanType spanTypeValueTemp = spanTypeValueTempTmpBuf;;
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            contentValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder contentValueTemp = contentValueTempTmpBuf;;
        const auto responseTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextResponseType responseTypeValueTempTmpBuf = {};
        responseTypeValueTempTmpBuf.tag = responseTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((responseTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            responseTypeValueTempTmpBuf.value = static_cast<Ark_TextResponseType>(thisDeserializer.readInt32());
        }
        Opt_TextResponseType responseTypeValueTemp = responseTypeValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionMenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_SelectionMenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextModifier()->setBindSelectionMenu(self, static_cast<Opt_TextSpanType*>(&spanTypeValueTemp), static_cast<Opt_CustomNodeBuilder*>(&contentValueTemp), static_cast<Opt_TextResponseType*>(&responseTypeValueTemp), static_cast<Opt_SelectionMenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAttribute_setBindSelectionMenu, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextArea_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTextAreaModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(TextArea_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TextAreaInterface_setTextAreaOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextAreaOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextAreaOptions_serializer::read(thisDeserializer);
        }
        Opt_TextAreaOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setTextAreaOptions(self, static_cast<Opt_TextAreaOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaInterface_setTextAreaOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setPlaceholderColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setPlaceholderColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setPlaceholderColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setPlaceholderFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setPlaceholderFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setPlaceholderFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setEnterKeyType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EnterKeyType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EnterKeyType>(thisDeserializer.readInt32());
        }
        Opt_EnterKeyType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setEnterKeyType(self, static_cast<Opt_EnterKeyType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setEnterKeyType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setTextAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextAlign>(thisDeserializer.readInt32());
        }
        Opt_TextAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setTextAlign(self, static_cast<Opt_TextAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setTextAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setCaretColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setCaretColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setCaretColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setFontSize(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setFontFamily(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setTextOverflow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextOverflow valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextOverflow>(thisDeserializer.readInt32());
        }
        Opt_TextOverflow valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setTextOverflow(self, static_cast<Opt_TextOverflow*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setTextOverflow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setTextIndent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setTextIndent(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setTextIndent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setCaretStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CaretStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = CaretStyle_serializer::read(thisDeserializer);
        }
        Opt_CaretStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setCaretStyle(self, static_cast<Opt_CaretStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setCaretStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setSelectedBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setSelectedBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setSelectedBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnSubmit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextAreaSubmitCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_EnterKeyType enterKeyType, const Opt_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TextAreaSubmitCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_EnterKeyType enterKeyType, const Opt_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TextAreaSubmitCallback))))};
        }
        Opt_TextAreaSubmitCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnSubmit(self, static_cast<Opt_TextAreaSubmitCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnSubmit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditableTextOnChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value, const Opt_PreviewText previewText, const Opt_TextChangeOptions options)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_EditableTextOnChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value, const Opt_PreviewText previewText, const Opt_TextChangeOptions options)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_EditableTextOnChangeCallback))))};
        }
        Opt_EditableTextOnChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnChange(self, static_cast<Opt_EditableTextOnChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnTextSelectionChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnTextSelectionChange(self, static_cast<Opt_Callback_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnTextSelectionChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnContentScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_F64_F64_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 totalOffsetX, const Ark_Float64 totalOffsetY)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_F64_F64_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 totalOffsetX, const Ark_Float64 totalOffsetY)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_F64_F64_Void))))};
        }
        Opt_Callback_F64_F64_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnContentScroll(self, static_cast<Opt_Callback_F64_F64_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnContentScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnEditChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isEditing)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isEditing)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnEditChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnEditChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnCopy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnCopy(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnCopy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnCut(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnCut(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnCut, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnPaste(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_PasteEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value, const Ark_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_PasteEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value, const Ark_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_PasteEvent_Void))))};
        }
        Opt_Callback_String_PasteEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnPaste(self, static_cast<Opt_Callback_String_PasteEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnPaste, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setCopyOption(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CopyOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CopyOptions>(thisDeserializer.readInt32());
        }
        Opt_CopyOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setCopyOption(self, static_cast<Opt_CopyOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setCopyOption, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setEnableKeyboardOnFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setEnableKeyboardOnFocus(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setEnableKeyboardOnFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setMaxLength(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setMaxLength(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setMaxLength, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextContentStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextContentStyle>(thisDeserializer.readInt32());
        }
        Opt_TextContentStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setStyle(self, static_cast<Opt_TextContentStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setBarState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarState valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarState>(thisDeserializer.readInt32());
        }
        Opt_BarState valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setBarState(self, static_cast<Opt_BarState*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setBarState, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setSelectionMenuHidden(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setSelectionMenuHidden(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setSelectionMenuHidden, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setMinFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setMinFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setMinFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setMaxFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setMaxFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setMaxFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setMinFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setMinFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setMinFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setMaxFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setMaxFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setMaxFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setHeightAdaptivePolicy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextHeightAdaptivePolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextHeightAdaptivePolicy>(thisDeserializer.readInt32());
        }
        Opt_TextHeightAdaptivePolicy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setHeightAdaptivePolicy(self, static_cast<Opt_TextHeightAdaptivePolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setHeightAdaptivePolicy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setMaxLines(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setMaxLines(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setMaxLines, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setWordBreak(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WordBreak valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_WordBreak>(thisDeserializer.readInt32());
        }
        Opt_WordBreak valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setWordBreak(self, static_cast<Opt_WordBreak*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setWordBreak, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setLineBreakStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineBreakStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineBreakStrategy>(thisDeserializer.readInt32());
        }
        Opt_LineBreakStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setLineBreakStrategy(self, static_cast<Opt_LineBreakStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setLineBreakStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setDecoration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextDecorationOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextDecorationOptions_serializer::read(thisDeserializer);
        }
        Opt_TextDecorationOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setDecoration(self, static_cast<Opt_TextDecorationOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setDecoration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setLetterSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setLetterSpacing(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setLetterSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setLineSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetrics valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LengthMetrics>(LengthMetrics_serializer::read(thisDeserializer));
        }
        Opt_LengthMetrics valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setLineSpacing(self, static_cast<Opt_LengthMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setLineSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setLineHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setLineHeight(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setLineHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextAreaType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextAreaType>(thisDeserializer.readInt32());
        }
        Opt_TextAreaType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setType(self, static_cast<Opt_TextAreaType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setEnableAutoFill(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setEnableAutoFill(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setEnableAutoFill, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setContentType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ContentType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ContentType>(thisDeserializer.readInt32());
        }
        Opt_ContentType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setContentType(self, static_cast<Opt_ContentType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setContentType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setFontFeature(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setFontFeature(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setFontFeature, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnWillInsert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_InsertValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_InsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_InsertValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_InsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_InsertValue_Boolean))))};
        }
        Opt_Callback_InsertValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnWillInsert(self, static_cast<Opt_Callback_InsertValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnWillInsert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnDidInsert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_InsertValue_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_InsertValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_InsertValue_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_InsertValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_InsertValue_Void))))};
        }
        Opt_Callback_InsertValue_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnDidInsert(self, static_cast<Opt_Callback_InsertValue_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnDidInsert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnWillDelete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DeleteValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DeleteValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DeleteValue_Boolean))))};
        }
        Opt_Callback_DeleteValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnWillDelete(self, static_cast<Opt_Callback_DeleteValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnWillDelete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnDidDelete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DeleteValue_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DeleteValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DeleteValue_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DeleteValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DeleteValue_Void))))};
        }
        Opt_Callback_DeleteValue_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnDidDelete(self, static_cast<Opt_Callback_DeleteValue_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnDidDelete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setEditMenuOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditMenuOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = EditMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_EditMenuOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setEditMenuOptions(self, static_cast<Opt_EditMenuOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setEditMenuOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setEnablePreviewText(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setEnablePreviewText(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setEnablePreviewText, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setAutoCapitalizationMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AutoCapitalizationMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AutoCapitalizationMode>(thisDeserializer.readInt32());
        }
        Opt_AutoCapitalizationMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setAutoCapitalizationMode(self, static_cast<Opt_AutoCapitalizationMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setAutoCapitalizationMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setHalfLeading(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setHalfLeading(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setHalfLeading, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setEllipsisMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EllipsisMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EllipsisMode>(thisDeserializer.readInt32());
        }
        Opt_EllipsisMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setEllipsisMode(self, static_cast<Opt_EllipsisMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setEllipsisMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setStopBackPress(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setStopBackPress(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setStopBackPress, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setOnWillChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_EditableTextChangeValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_EditableTextChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_EditableTextChangeValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_EditableTextChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_EditableTextChangeValue_Boolean))))};
        }
        Opt_Callback_EditableTextChangeValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setOnWillChange(self, static_cast<Opt_Callback_EditableTextChangeValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setOnWillChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setKeyboardAppearance(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardAppearance valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_KeyboardAppearance>(thisDeserializer.readInt32());
        }
        Opt_KeyboardAppearance valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setKeyboardAppearance(self, static_cast<Opt_KeyboardAppearance*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setKeyboardAppearance, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setInputFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        const auto errorValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void errorValueTempTmpBuf = {};
        errorValueTempTmpBuf.tag = errorValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((errorValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            errorValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void errorValueTemp = errorValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setInputFilter(self, static_cast<Opt_ResourceStr*>(&valueValueTemp), static_cast<Opt_Callback_String_Void*>(&errorValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setInputFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setShowCounter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_InputCounterOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = InputCounterOptions_serializer::read(thisDeserializer);
        }
        Opt_InputCounterOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setShowCounter(self, static_cast<Opt_Boolean*>(&valueValueTemp), static_cast<Opt_InputCounterOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setShowCounter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextAreaAttribute_setCustomKeyboard(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = KeyboardOptions_serializer::read(thisDeserializer);
        }
        Opt_KeyboardOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextAreaModifier()->setCustomKeyboard(self, static_cast<Opt_CustomNodeBuilder*>(&valueValueTemp), static_cast<Opt_KeyboardOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextAreaAttribute_setCustomKeyboard, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextClock_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTextClockModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(TextClock_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TextClockInterface_setTextClockOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextClockOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = TextClockOptions_serializer::read(thisDeserializer);
        }
        Opt_TextClockOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setTextClockOptions(self, static_cast<Opt_TextClockOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockInterface_setTextClockOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setFormat(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setFormat(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setFormat, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setOnDateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I64_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int64 value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I64_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int64 value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I64_Void))))};
        }
        Opt_Callback_I64_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setOnDateChange(self, static_cast<Opt_Callback_I64_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setOnDateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setFontSize(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setFontFamily(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setTextShadow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = ShadowOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_ShadowOptions valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = ShadowOptions_serializer::read(thisDeserializer);
                }
                valueValueTempTmpBuf_.value1 = valueValueTempTmpBuf_BufU;
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ShadowOptions_Array_ShadowOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setTextShadow(self, static_cast<Opt_Union_ShadowOptions_Array_ShadowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setTextShadow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setFontFeature(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setFontFeature(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setFontFeature, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextClockAttribute_setDateTimeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_intl_DateTimeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = intl_DateTimeOptions_serializer::read(thisDeserializer);
        }
        Opt_intl_DateTimeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextClockModifier()->setDateTimeOptions(self, static_cast<Opt_intl_DateTimeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextClockAttribute_setDateTimeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextInput_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTextInputModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(TextInput_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TextInputInterface_setTextInputOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextInputOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextInputOptions_serializer::read(thisDeserializer);
        }
        Opt_TextInputOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setTextInputOptions(self, static_cast<Opt_TextInputOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputInterface_setTextInputOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_InputType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_InputType>(thisDeserializer.readInt32());
        }
        Opt_InputType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setType(self, static_cast<Opt_InputType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setContentType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ContentType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ContentType>(thisDeserializer.readInt32());
        }
        Opt_ContentType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setContentType(self, static_cast<Opt_ContentType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setContentType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setPlaceholderColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setPlaceholderColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setPlaceholderColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setTextOverflow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextOverflow valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextOverflow>(thisDeserializer.readInt32());
        }
        Opt_TextOverflow valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setTextOverflow(self, static_cast<Opt_TextOverflow*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setTextOverflow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setTextIndent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setTextIndent(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setTextIndent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setPlaceholderFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Font valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = Font_serializer::read(thisDeserializer);
        }
        Opt_Font valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setPlaceholderFont(self, static_cast<Opt_Font*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setPlaceholderFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setEnterKeyType(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EnterKeyType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EnterKeyType>(thisDeserializer.readInt32());
        }
        Opt_EnterKeyType valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setEnterKeyType(self, static_cast<Opt_EnterKeyType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setEnterKeyType, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setCaretColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setCaretColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setCaretColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnEditChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnEditChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnEditChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnSubmit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnSubmitCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_EnterKeyType enterKey, const Ark_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnSubmitCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_EnterKeyType enterKey, const Ark_SubmitEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnSubmitCallback))))};
        }
        Opt_OnSubmitCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnSubmit(self, static_cast<Opt_OnSubmitCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnSubmit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditableTextOnChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value, const Opt_PreviewText previewText, const Opt_TextChangeOptions options)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_EditableTextOnChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value, const Opt_PreviewText previewText, const Opt_TextChangeOptions options)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_EditableTextOnChangeCallback))))};
        }
        Opt_EditableTextOnChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnChange(self, static_cast<Opt_EditableTextOnChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnTextSelectionChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTextSelectionChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTextSelectionChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 selectionStart, const Ark_Int32 selectionEnd)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTextSelectionChangeCallback))))};
        }
        Opt_OnTextSelectionChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnTextSelectionChange(self, static_cast<Opt_OnTextSelectionChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnTextSelectionChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnContentScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnContentScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 totalOffsetX, const Ark_Float64 totalOffsetY)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnContentScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 totalOffsetX, const Ark_Float64 totalOffsetY)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnContentScrollCallback))))};
        }
        Opt_OnContentScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnContentScroll(self, static_cast<Opt_OnContentScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnContentScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setMaxLength(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setMaxLength(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setMaxLength, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setFontSize(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setFontFamily(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnCopy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnCopy(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnCopy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnCut(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnCut(self, static_cast<Opt_Callback_String_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnCut, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnPaste(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnPasteCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String content, const Ark_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnPasteCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String content, const Ark_PasteEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnPasteCallback))))};
        }
        Opt_OnPasteCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnPaste(self, static_cast<Opt_OnPasteCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnPaste, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setCopyOption(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CopyOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CopyOptions>(thisDeserializer.readInt32());
        }
        Opt_CopyOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setCopyOption(self, static_cast<Opt_CopyOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setCopyOption, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setShowPasswordIcon(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setShowPasswordIcon(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setShowPasswordIcon, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setTextAlign(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextAlign valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextAlign>(thisDeserializer.readInt32());
        }
        Opt_TextAlign valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setTextAlign(self, static_cast<Opt_TextAlign*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setTextAlign, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_TextInputStyle_TextContentStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_TextInputStyle_TextContentStyle valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_TextInputStyle>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_TextContentStyle>(thisDeserializer.readInt32());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_TextInputStyle_TextContentStyle>(valueValueTempTmpBuf_);
        }
        Opt_Union_TextInputStyle_TextContentStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setStyle(self, static_cast<Opt_Union_TextInputStyle_TextContentStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setCaretStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CaretStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = CaretStyle_serializer::read(thisDeserializer);
        }
        Opt_CaretStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setCaretStyle(self, static_cast<Opt_CaretStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setCaretStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setSelectedBackgroundColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setSelectedBackgroundColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setSelectedBackgroundColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setCaretPosition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setCaretPosition(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setCaretPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setEnableKeyboardOnFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setEnableKeyboardOnFocus(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setEnableKeyboardOnFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setPasswordIcon(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PasswordIcon valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PasswordIcon_serializer::read(thisDeserializer);
        }
        Opt_PasswordIcon valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setPasswordIcon(self, static_cast<Opt_PasswordIcon*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setPasswordIcon, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setShowError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setShowError(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setShowError, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setShowUnit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setShowUnit(self, static_cast<Opt_CustomNodeBuilder*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setShowUnit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setShowUnderline(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setShowUnderline(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setShowUnderline, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setUnderlineColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_UnderlineColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_UnderlineColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = UnderlineColor_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_UnderlineColor>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_UnderlineColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setUnderlineColor(self, static_cast<Opt_Union_ResourceColor_UnderlineColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setUnderlineColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setSelectionMenuHidden(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setSelectionMenuHidden(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setSelectionMenuHidden, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setBarState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BarState valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BarState>(thisDeserializer.readInt32());
        }
        Opt_BarState valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setBarState(self, static_cast<Opt_BarState*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setBarState, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setMaxLines(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setMaxLines(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setMaxLines, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setWordBreak(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WordBreak valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_WordBreak>(thisDeserializer.readInt32());
        }
        Opt_WordBreak valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setWordBreak(self, static_cast<Opt_WordBreak*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setWordBreak, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setLineBreakStrategy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LineBreakStrategy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_LineBreakStrategy>(thisDeserializer.readInt32());
        }
        Opt_LineBreakStrategy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setLineBreakStrategy(self, static_cast<Opt_LineBreakStrategy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setLineBreakStrategy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setCancelButton0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CancelButtonOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = CancelButtonOptions_serializer::read(thisDeserializer);
        }
        Opt_CancelButtonOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setCancelButton0(self, static_cast<Opt_CancelButtonOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setCancelButton0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setCancelButton1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CancelButtonSymbolOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = CancelButtonSymbolOptions_serializer::read(thisDeserializer);
        }
        Opt_CancelButtonSymbolOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setCancelButton1(self, static_cast<Opt_CancelButtonSymbolOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setCancelButton1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setSelectAll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setSelectAll(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setSelectAll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setMinFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setMinFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setMinFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setMaxFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setMaxFontSize(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setMaxFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setMinFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setMinFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setMinFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setMaxFontScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setMaxFontScale(self, static_cast<Opt_Union_F64_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setMaxFontScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setHeightAdaptivePolicy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextHeightAdaptivePolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_TextHeightAdaptivePolicy>(thisDeserializer.readInt32());
        }
        Opt_TextHeightAdaptivePolicy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setHeightAdaptivePolicy(self, static_cast<Opt_TextHeightAdaptivePolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setHeightAdaptivePolicy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setEnableAutoFill(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setEnableAutoFill(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setEnableAutoFill, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setDecoration(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextDecorationOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextDecorationOptions_serializer::read(thisDeserializer);
        }
        Opt_TextDecorationOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setDecoration(self, static_cast<Opt_TextDecorationOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setDecoration, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setLetterSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setLetterSpacing(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setLetterSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setLineHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String_Resource valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String_Resource valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String_Resource>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String_Resource valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setLineHeight(self, static_cast<Opt_Union_F64_String_Resource*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setLineHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setPasswordRules(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setPasswordRules(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setPasswordRules, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setFontFeature(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setFontFeature(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setFontFeature, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setShowPassword(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setShowPassword(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setShowPassword, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnSecurityStateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnSecurityStateChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnSecurityStateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnWillInsert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_InsertValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_InsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_InsertValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_InsertValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_InsertValue_Boolean))))};
        }
        Opt_Callback_InsertValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnWillInsert(self, static_cast<Opt_Callback_InsertValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnWillInsert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnDidInsert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_InsertValue_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_InsertValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_InsertValue_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_InsertValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_InsertValue_Void))))};
        }
        Opt_Callback_InsertValue_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnDidInsert(self, static_cast<Opt_Callback_InsertValue_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnDidInsert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnWillDelete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DeleteValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DeleteValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DeleteValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DeleteValue_Boolean))))};
        }
        Opt_Callback_DeleteValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnWillDelete(self, static_cast<Opt_Callback_DeleteValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnWillDelete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnDidDelete(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_DeleteValue_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DeleteValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DeleteValue_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DeleteValue value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DeleteValue_Void))))};
        }
        Opt_Callback_DeleteValue_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnDidDelete(self, static_cast<Opt_Callback_DeleteValue_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnDidDelete, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setEditMenuOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditMenuOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = EditMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_EditMenuOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setEditMenuOptions(self, static_cast<Opt_EditMenuOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setEditMenuOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setEnablePreviewText(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setEnablePreviewText(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setEnablePreviewText, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setAutoCapitalizationMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AutoCapitalizationMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_AutoCapitalizationMode>(thisDeserializer.readInt32());
        }
        Opt_AutoCapitalizationMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setAutoCapitalizationMode(self, static_cast<Opt_AutoCapitalizationMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setAutoCapitalizationMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setHalfLeading(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setHalfLeading(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setHalfLeading, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setEllipsisMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EllipsisMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_EllipsisMode>(thisDeserializer.readInt32());
        }
        Opt_EllipsisMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setEllipsisMode(self, static_cast<Opt_EllipsisMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setEllipsisMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setStopBackPress(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setStopBackPress(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setStopBackPress, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setOnWillChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_EditableTextChangeValue_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_EditableTextChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_EditableTextChangeValue_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_EditableTextChangeValue value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_EditableTextChangeValue_Boolean))))};
        }
        Opt_Callback_EditableTextChangeValue_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setOnWillChange(self, static_cast<Opt_Callback_EditableTextChangeValue_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setOnWillChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setKeyboardAppearance(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardAppearance valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_KeyboardAppearance>(thisDeserializer.readInt32());
        }
        Opt_KeyboardAppearance valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setKeyboardAppearance(self, static_cast<Opt_KeyboardAppearance*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setKeyboardAppearance, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setInputFilter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        const auto errorValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_String_Void errorValueTempTmpBuf = {};
        errorValueTempTmpBuf.tag = errorValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((errorValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            errorValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};
        }
        Opt_Callback_String_Void errorValueTemp = errorValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setInputFilter(self, static_cast<Opt_ResourceStr*>(&valueValueTemp), static_cast<Opt_Callback_String_Void*>(&errorValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setInputFilter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setCustomKeyboard(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_KeyboardOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = KeyboardOptions_serializer::read(thisDeserializer);
        }
        Opt_KeyboardOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setCustomKeyboard(self, static_cast<Opt_CustomNodeBuilder*>(&valueValueTemp), static_cast<Opt_KeyboardOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setCustomKeyboard, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextInputAttribute_setShowCounter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_InputCounterOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = InputCounterOptions_serializer::read(thisDeserializer);
        }
        Opt_InputCounterOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextInputModifier()->setShowCounter(self, static_cast<Opt_Boolean*>(&valueValueTemp), static_cast<Opt_InputCounterOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextInputAttribute_setShowCounter, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextPicker_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTextPickerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(TextPicker_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TextPickerInterface_setTextPickerOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextPickerOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = TextPickerOptions_serializer::read(thisDeserializer);
        }
        Opt_TextPickerOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setTextPickerOptions(self, static_cast<Opt_TextPickerOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerInterface_setTextPickerOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setDefaultPickerItemHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_F64_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_F64_String valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readFloat64();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_String>(thisDeserializer.readString());
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_F64_String>(valueValueTempTmpBuf_);
        }
        Opt_Union_F64_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setDefaultPickerItemHeight(self, static_cast<Opt_Union_F64_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setDefaultPickerItemHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setCanLoop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setCanLoop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setCanLoop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setDisappearTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setDisappearTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setDisappearTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setSelectedTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setSelectedTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setSelectedTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setDisableTextStyleAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setDisableTextStyleAnimation(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setDisableTextStyleAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setDefaultTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextPickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextPickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_TextPickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setDefaultTextStyle(self, static_cast<Opt_TextPickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setDefaultTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTextPickerChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Union_String_Array_String selectItem, const Ark_Union_I32_Array_I32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTextPickerChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Union_String_Array_String selectItem, const Ark_Union_I32_Array_I32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTextPickerChangeCallback))))};
        }
        Opt_OnTextPickerChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setOnChange(self, static_cast<Opt_OnTextPickerChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setOnScrollStop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextPickerScrollStopCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Union_String_Array_String value, const Ark_Union_I32_Array_I32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TextPickerScrollStopCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Union_String_Array_String value, const Ark_Union_I32_Array_I32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TextPickerScrollStopCallback))))};
        }
        Opt_TextPickerScrollStopCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setOnScrollStop(self, static_cast<Opt_TextPickerScrollStopCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setOnScrollStop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setOnEnterSelectedArea(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextPickerEnterSelectedAreaCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Union_String_Array_String value, const Ark_Union_I32_Array_I32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TextPickerEnterSelectedAreaCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Union_String_Array_String value, const Ark_Union_I32_Array_I32 index)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TextPickerEnterSelectedAreaCallback))))};
        }
        Opt_TextPickerEnterSelectedAreaCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setOnEnterSelectedArea(self, static_cast<Opt_TextPickerEnterSelectedAreaCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setOnEnterSelectedArea, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setSelectedIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_Array_I32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_Array_I32 valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_Int32 valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = thisDeserializer.readInt32();
                }
                valueValueTempTmpBuf_.value1 = valueValueTempTmpBuf_BufU;
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_Array_I32>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_Array_I32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setSelectedIndex(self, static_cast<Opt_Union_I32_Array_I32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setSelectedIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setDivider(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_DividerOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = DividerOptions_serializer::read(thisDeserializer);
        }
        Opt_DividerOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setDivider(self, static_cast<Opt_DividerOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setDivider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setGradientHeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Dimension valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Dimension valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Dimension>(valueValueTempTmpBuf_);
        }
        Opt_Dimension valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setGradientHeight(self, static_cast<Opt_Dimension*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setGradientHeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextPickerAttribute_setDigitalCrownSensitivity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CrownSensitivity valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CrownSensitivity>(thisDeserializer.readInt32());
        }
        Opt_CrownSensitivity valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextPickerModifier()->setDigitalCrownSensitivity(self, static_cast<Opt_CrownSensitivity*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextPickerAttribute_setDigitalCrownSensitivity, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextTimer_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTextTimerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(TextTimer_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TextTimerInterface_setTextTimerOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextTimerOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = TextTimerOptions_serializer::read(thisDeserializer);
        }
        Opt_TextTimerOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setTextTimerOptions(self, static_cast<Opt_TextTimerOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerInterface_setTextTimerOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setFormat(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setFormat(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setFormat, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setFontColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setFontColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setFontColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setFontSize(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setFontStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FontStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FontStyle>(thisDeserializer.readInt32());
        }
        Opt_FontStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setFontStyle(self, static_cast<Opt_FontStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setFontStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_I32_FontWeight_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_I32_FontWeight_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = thisDeserializer.readInt32();
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_FontWeight>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceStr valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value2 = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_BufU);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_I32_FontWeight_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_Union_I32_FontWeight_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setFontWeight(self, static_cast<Opt_Union_I32_FontWeight_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setFontFamily(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf_);
        }
        Opt_ResourceStr valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setFontFamily(self, static_cast<Opt_ResourceStr*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setFontFamily, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setOnTimer(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TimerCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int64 utc, const Ark_Int64 elapsedTime)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TimerCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int64 utc, const Ark_Int64 elapsedTime)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TimerCallback))))};
        }
        Opt_TimerCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setOnTimer(self, static_cast<Opt_TimerCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setOnTimer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TextTimerAttribute_setTextShadow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = ShadowOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int32 valueValueTempTmpBuf_BufULength = thisDeserializer.readInt32();
                Array_ShadowOptions valueValueTempTmpBuf_BufU = {};
                thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_BufU)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_BufU.array)>::type>(&valueValueTempTmpBuf_BufU, valueValueTempTmpBuf_BufULength);
                for (int valueValueTempTmpBuf_BufUBufCounterI = 0; valueValueTempTmpBuf_BufUBufCounterI < valueValueTempTmpBuf_BufULength; valueValueTempTmpBuf_BufUBufCounterI++) {
                    valueValueTempTmpBuf_BufU.array[valueValueTempTmpBuf_BufUBufCounterI] = ShadowOptions_serializer::read(thisDeserializer);
                }
                valueValueTempTmpBuf_.value1 = valueValueTempTmpBuf_BufU;
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ShadowOptions_Array_ShadowOptions>(valueValueTempTmpBuf_);
        }
        Opt_Union_ShadowOptions_Array_ShadowOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTextTimerModifier()->setTextShadow(self, static_cast<Opt_Union_ShadowOptions_Array_ShadowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextTimerAttribute_setTextShadow, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TimePicker_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getTimePickerModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(TimePicker_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_TimePickerInterface_setTimePickerOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TimePickerOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = TimePickerOptions_serializer::read(thisDeserializer);
        }
        Opt_TimePickerOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setTimePickerOptions(self, static_cast<Opt_TimePickerOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerInterface_setTimePickerOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setUseMilitaryTime(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setUseMilitaryTime(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setUseMilitaryTime, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setLoop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setLoop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setLoop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setDisappearTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setDisappearTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setDisappearTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setSelectedTextStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PickerTextStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PickerTextStyle_serializer::read(thisDeserializer);
        }
        Opt_PickerTextStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setSelectedTextStyle(self, static_cast<Opt_PickerTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setSelectedTextStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setDateTimeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_intl_DateTimeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = intl_DateTimeOptions_serializer::read(thisDeserializer);
        }
        Opt_intl_DateTimeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setDateTimeOptions(self, static_cast<Opt_intl_DateTimeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setDateTimeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnTimePickerChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TimePickerResult result)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnTimePickerChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TimePickerResult result)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnTimePickerChangeCallback))))};
        }
        Opt_OnTimePickerChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setOnChange(self, static_cast<Opt_OnTimePickerChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setOnEnterSelectedArea(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TimePickerResult_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TimePickerResult value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TimePickerResult_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TimePickerResult value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TimePickerResult_Void))))};
        }
        Opt_Callback_TimePickerResult_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setOnEnterSelectedArea(self, static_cast<Opt_Callback_TimePickerResult_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setOnEnterSelectedArea, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setDigitalCrownSensitivity(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CrownSensitivity valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CrownSensitivity>(thisDeserializer.readInt32());
        }
        Opt_CrownSensitivity valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setDigitalCrownSensitivity(self, static_cast<Opt_CrownSensitivity*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setDigitalCrownSensitivity, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TimePickerAttribute_setEnableCascade(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getTimePickerModifier()->setEnableCascade(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TimePickerAttribute_setEnableCascade, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Toggle_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getToggleModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Toggle_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ToggleInterface_setToggleOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ToggleOptions optionsValueTemp = ToggleOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getToggleModifier()->setToggleOptions(self, static_cast<Ark_ToggleOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ToggleInterface_setToggleOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ToggleAttribute_setOnChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Boolean_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Boolean_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Boolean_Void))))};
        }
        Opt_Callback_Boolean_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getToggleModifier()->setOnChange(self, static_cast<Opt_Callback_Boolean_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ToggleAttribute_setOnChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ToggleAttribute_setSelectedColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getToggleModifier()->setSelectedColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ToggleAttribute_setSelectedColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ToggleAttribute_setSwitchPointColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getToggleModifier()->setSwitchPointColor(self, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ToggleAttribute_setSwitchPointColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ToggleAttribute_setSwitchStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SwitchStyle valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = SwitchStyle_serializer::read(thisDeserializer);
        }
        Opt_SwitchStyle valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getToggleModifier()->setSwitchStyle(self, static_cast<Opt_SwitchStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ToggleAttribute_setSwitchStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ToolBarItem_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getToolBarItemModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ToolBarItem_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ToolBarItemInterface_setToolBarItemOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ToolBarItemOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ToolBarItemOptions_serializer::read(thisDeserializer);
        }
        Opt_ToolBarItemOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getToolBarItemModifier()->setToolBarItemOptions(self, static_cast<Opt_ToolBarItemOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ToolBarItemInterface_setToolBarItemOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_UIExtensionComponent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getUIExtensionComponentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(UIExtensionComponent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_UIExtensionComponentInterface_setUIExtensionComponentOptions(Ark_NativePointer thisPtr, Ark_NativePointer want, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_UIExtensionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = UIExtensionOptions_serializer::read(thisDeserializer);
        }
        Opt_UIExtensionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getUIExtensionComponentModifier()->setUIExtensionComponentOptions(self, static_cast<Ark_Want>(want), static_cast<Opt_UIExtensionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V4(UIExtensionComponentInterface_setUIExtensionComponentOptions, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionComponentAttribute_setOnRemoteReady(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_UIExtensionProxy_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_UIExtensionProxy_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_UIExtensionProxy_Void))))};
        }
        Opt_Callback_UIExtensionProxy_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getUIExtensionComponentModifier()->setOnRemoteReady(self, static_cast<Opt_Callback_UIExtensionProxy_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionComponentAttribute_setOnRemoteReady, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionComponentAttribute_setOnReceive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Map_String_RecordData_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Map_String_Opt_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Map_String_RecordData_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Map_String_Opt_Object value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Map_String_RecordData_Void))))};
        }
        Opt_Callback_Map_String_RecordData_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getUIExtensionComponentModifier()->setOnReceive(self, static_cast<Opt_Callback_Map_String_RecordData_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionComponentAttribute_setOnReceive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionComponentAttribute_setOnError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ErrorCallback_Ohos_Base_BusinessError valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_BusinessError err)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ErrorCallback_Ohos_Base_BusinessError)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_BusinessError err)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ErrorCallback_Ohos_Base_BusinessError))))};
        }
        Opt_ErrorCallback_Ohos_Base_BusinessError valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getUIExtensionComponentModifier()->setOnError(self, static_cast<Opt_ErrorCallback_Ohos_Base_BusinessError*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionComponentAttribute_setOnError, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionComponentAttribute_setOnTerminated(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TerminationInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TerminationInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TerminationInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TerminationInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TerminationInfo_Void))))};
        }
        Opt_Callback_TerminationInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getUIExtensionComponentModifier()->setOnTerminated(self, static_cast<Opt_Callback_TerminationInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionComponentAttribute_setOnTerminated, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionComponentAttribute_setOnDrawReady(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getUIExtensionComponentModifier()->setOnDrawReady(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionComponentAttribute_setOnDrawReady, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Video_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getVideoModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Video_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_VideoInterface_setVideoOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_VideoOptions valueValueTemp = VideoOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getVideoModifier()->setVideoOptions(self, static_cast<Ark_VideoOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoInterface_setVideoOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setMuted(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setMuted(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setMuted, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setAutoPlay(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setAutoPlay(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setAutoPlay, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setControls(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setControls(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setControls, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setLoop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setLoop(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setLoop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setObjectFit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageFit valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_ImageFit>(thisDeserializer.readInt32());
        }
        Opt_ImageFit valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setObjectFit(self, static_cast<Opt_ImageFit*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setObjectFit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnStart(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnPause(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnPause(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnPause, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnFinish(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnFinish(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnFinish, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnFullscreenChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_FullscreenInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_FullscreenInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_FullscreenInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_FullscreenInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_FullscreenInfo_Void))))};
        }
        Opt_Callback_FullscreenInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnFullscreenChange(self, static_cast<Opt_Callback_FullscreenInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnFullscreenChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnPrepared(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_PreparedInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PreparedInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PreparedInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PreparedInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PreparedInfo_Void))))};
        }
        Opt_Callback_PreparedInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnPrepared(self, static_cast<Opt_Callback_PreparedInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnPrepared, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnSeeking(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_PlaybackInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PlaybackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PlaybackInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PlaybackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PlaybackInfo_Void))))};
        }
        Opt_Callback_PlaybackInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnSeeking(self, static_cast<Opt_Callback_PlaybackInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnSeeking, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnSeeked(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_PlaybackInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PlaybackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PlaybackInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PlaybackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PlaybackInfo_Void))))};
        }
        Opt_Callback_PlaybackInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnSeeked(self, static_cast<Opt_Callback_PlaybackInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnSeeked, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnUpdate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_PlaybackInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PlaybackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PlaybackInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PlaybackInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PlaybackInfo_Void))))};
        }
        Opt_Callback_PlaybackInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnUpdate(self, static_cast<Opt_Callback_PlaybackInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnUpdate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnError(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnError(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnError, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setOnStop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setOnStop(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setOnStop, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setEnableAnalyzer(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setEnableAnalyzer(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setEnableAnalyzer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setAnalyzerConfig(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ImageAnalyzerConfig valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ImageAnalyzerConfig_serializer::read(thisDeserializer);
        }
        Opt_ImageAnalyzerConfig valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setAnalyzerConfig(self, static_cast<Opt_ImageAnalyzerConfig*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setAnalyzerConfig, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_VideoAttribute_setEnableShortcutKey(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getVideoModifier()->setEnableShortcutKey(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(VideoAttribute_setEnableShortcutKey, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_WaterFlow_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getWaterFlowModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(WaterFlow_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_WaterFlowInterface_setWaterFlowOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WaterFlowOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = WaterFlowOptions_serializer::read(thisDeserializer);
        }
        Opt_WaterFlowOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setWaterFlowOptions(self, static_cast<Opt_WaterFlowOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowInterface_setWaterFlowOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setColumnsTemplate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setColumnsTemplate(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setColumnsTemplate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setItemConstraintSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ConstraintSizeOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ConstraintSizeOptions_serializer::read(thisDeserializer);
        }
        Opt_ConstraintSizeOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setItemConstraintSize(self, static_cast<Opt_ConstraintSizeOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setItemConstraintSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setRowsTemplate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setRowsTemplate(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setRowsTemplate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setColumnsGap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setColumnsGap(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setColumnsGap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setRowsGap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Length valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Length valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Length>(valueValueTempTmpBuf_);
        }
        Opt_Length valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setRowsGap(self, static_cast<Opt_Length*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setRowsGap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setLayoutDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_FlexDirection valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_FlexDirection>(thisDeserializer.readInt32());
        }
        Opt_FlexDirection valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setLayoutDirection(self, static_cast<Opt_FlexDirection*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setLayoutDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setCachedCount0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setCachedCount0(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setCachedCount0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setOnScrollFrameBegin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollFrameBeginCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollFrameBeginCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 offset, Ark_ScrollState state, const Callback_OnScrollFrameBeginHandlerResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollFrameBeginCallback))))};
        }
        Opt_OnScrollFrameBeginCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setOnScrollFrameBegin(self, static_cast<Opt_OnScrollFrameBeginCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setOnScrollFrameBegin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setOnScrollIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_I32_I32_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 first, const Ark_Int32 last)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_I32_I32_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 first, const Ark_Int32 last)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_I32_I32_Void))))};
        }
        Opt_Callback_I32_I32_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setOnScrollIndex(self, static_cast<Opt_Callback_I32_I32_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setOnScrollIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setOnWillScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnWillScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_ScrollResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnWillScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState, Ark_ScrollSource scrollSource, const Callback_Opt_ScrollResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnWillScrollCallback))))};
        }
        Opt_OnWillScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setOnWillScroll(self, static_cast<Opt_OnWillScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setOnWillScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setOnDidScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnScrollCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnScrollCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 scrollOffset, Ark_ScrollState scrollState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnScrollCallback))))};
        }
        Opt_OnScrollCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setOnDidScroll(self, static_cast<Opt_OnScrollCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setOnDidScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WaterFlowAttribute_setCachedCount1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto countValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 countValueTempTmpBuf = {};
        countValueTempTmpBuf.tag = countValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((countValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            countValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 countValueTemp = countValueTempTmpBuf;;
        const auto showValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean showValueTempTmpBuf = {};
        showValueTempTmpBuf.tag = showValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((showValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            showValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean showValueTemp = showValueTempTmpBuf;;
        GetNodeModifiers()->getWaterFlowModifier()->setCachedCount1(self, static_cast<Opt_Int32*>(&countValueTemp), static_cast<Opt_Boolean*>(&showValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WaterFlowAttribute_setCachedCount1, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Web_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getWebModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Web_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_WebInterface_setWebOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_WebOptions valueValueTemp = WebOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getWebModifier()->setWebOptions(self, static_cast<Ark_WebOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebInterface_setWebOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setJavaScriptAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setJavaScriptAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setJavaScriptAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setFileAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setFileAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setFileAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnlineImageAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnlineImageAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnlineImageAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setDomStorageAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setDomStorageAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setDomStorageAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setImageAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setImageAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setImageAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setMixedMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MixedMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_MixedMode>(thisDeserializer.readInt32());
        }
        Opt_MixedMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setMixedMode(self, static_cast<Opt_MixedMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setMixedMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setZoomAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setZoomAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setZoomAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setGeolocationAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setGeolocationAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setGeolocationAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setJavaScriptProxy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_JavaScriptProxy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = JavaScriptProxy_serializer::read(thisDeserializer);
        }
        Opt_JavaScriptProxy valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setJavaScriptProxy(self, static_cast<Opt_JavaScriptProxy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setJavaScriptProxy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setCacheMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CacheMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CacheMode>(thisDeserializer.readInt32());
        }
        Opt_CacheMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setCacheMode(self, static_cast<Opt_CacheMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setCacheMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setDarkMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WebDarkMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_WebDarkMode>(thisDeserializer.readInt32());
        }
        Opt_WebDarkMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setDarkMode(self, static_cast<Opt_WebDarkMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setDarkMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setForceDarkAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setForceDarkAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setForceDarkAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setMediaOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WebMediaOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = WebMediaOptions_serializer::read(thisDeserializer);
        }
        Opt_WebMediaOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setMediaOptions(self, static_cast<Opt_WebMediaOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setMediaOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOverviewModeAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOverviewModeAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOverviewModeAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOverScrollMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OverScrollMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_OverScrollMode>(thisDeserializer.readInt32());
        }
        Opt_OverScrollMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOverScrollMode(self, static_cast<Opt_OverScrollMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOverScrollMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setBlurOnKeyboardHideMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BlurOnKeyboardHideMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_BlurOnKeyboardHideMode>(thisDeserializer.readInt32());
        }
        Opt_BlurOnKeyboardHideMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setBlurOnKeyboardHideMode(self, static_cast<Opt_BlurOnKeyboardHideMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setBlurOnKeyboardHideMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setTextZoomRatio(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setTextZoomRatio(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setTextZoomRatio, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setDatabaseAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setDatabaseAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setDatabaseAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setInitialScale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setInitialScale(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setInitialScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setMetaViewport(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setMetaViewport(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setMetaViewport, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnPageEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnPageEndEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnPageEndEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnPageEndEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnPageEndEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnPageEndEvent_Void))))};
        }
        Opt_Callback_OnPageEndEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnPageEnd(self, static_cast<Opt_Callback_OnPageEndEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnPageEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnPageBegin(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnPageBeginEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnPageBeginEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnPageBeginEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnPageBeginEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnPageBeginEvent_Void))))};
        }
        Opt_Callback_OnPageBeginEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnPageBegin(self, static_cast<Opt_Callback_OnPageBeginEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnPageBegin, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnLoadStarted(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnLoadStartedEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnLoadStartedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnLoadStartedEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnLoadStartedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnLoadStartedEvent_Void))))};
        }
        Opt_Callback_OnLoadStartedEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnLoadStarted(self, static_cast<Opt_Callback_OnLoadStartedEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnLoadStarted, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnLoadFinished(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnLoadFinishedEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnLoadFinishedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnLoadFinishedEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnLoadFinishedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnLoadFinishedEvent_Void))))};
        }
        Opt_Callback_OnLoadFinishedEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnLoadFinished(self, static_cast<Opt_Callback_OnLoadFinishedEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnLoadFinished, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnProgressChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnProgressChangeEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnProgressChangeEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnProgressChangeEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnProgressChangeEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnProgressChangeEvent_Void))))};
        }
        Opt_Callback_OnProgressChangeEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnProgressChange(self, static_cast<Opt_Callback_OnProgressChangeEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnProgressChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnTitleReceive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnTitleReceiveEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnTitleReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnTitleReceiveEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnTitleReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnTitleReceiveEvent_Void))))};
        }
        Opt_Callback_OnTitleReceiveEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnTitleReceive(self, static_cast<Opt_Callback_OnTitleReceiveEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnTitleReceive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnGeolocationHide(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnGeolocationHide(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnGeolocationHide, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnGeolocationShow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnGeolocationShowEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnGeolocationShowEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnGeolocationShowEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnGeolocationShowEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnGeolocationShowEvent_Void))))};
        }
        Opt_Callback_OnGeolocationShowEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnGeolocationShow(self, static_cast<Opt_Callback_OnGeolocationShowEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnGeolocationShow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnRequestSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnRequestSelected(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnRequestSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnAlert(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnAlertEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnAlertEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnAlertEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnAlertEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnAlertEvent_Boolean))))};
        }
        Opt_Callback_OnAlertEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnAlert(self, static_cast<Opt_Callback_OnAlertEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnAlert, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnBeforeUnload(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnBeforeUnloadEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnBeforeUnloadEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnBeforeUnloadEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnBeforeUnloadEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnBeforeUnloadEvent_Boolean))))};
        }
        Opt_Callback_OnBeforeUnloadEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnBeforeUnload(self, static_cast<Opt_Callback_OnBeforeUnloadEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnBeforeUnload, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnConfirm(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnConfirmEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnConfirmEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnConfirmEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnConfirmEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnConfirmEvent_Boolean))))};
        }
        Opt_Callback_OnConfirmEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnConfirm(self, static_cast<Opt_Callback_OnConfirmEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnConfirm, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnPrompt(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnPromptEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnPromptEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnPromptEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnPromptEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnPromptEvent_Boolean))))};
        }
        Opt_Callback_OnPromptEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnPrompt(self, static_cast<Opt_Callback_OnPromptEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnPrompt, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnConsole(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnConsoleEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnConsoleEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnConsoleEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnConsoleEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnConsoleEvent_Boolean))))};
        }
        Opt_Callback_OnConsoleEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnConsole(self, static_cast<Opt_Callback_OnConsoleEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnConsole, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnErrorReceive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnErrorReceiveEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnErrorReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnErrorReceiveEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnErrorReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnErrorReceiveEvent_Void))))};
        }
        Opt_Callback_OnErrorReceiveEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnErrorReceive(self, static_cast<Opt_Callback_OnErrorReceiveEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnErrorReceive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnHttpErrorReceive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnHttpErrorReceiveEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnHttpErrorReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnHttpErrorReceiveEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnHttpErrorReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnHttpErrorReceiveEvent_Void))))};
        }
        Opt_Callback_OnHttpErrorReceiveEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnHttpErrorReceive(self, static_cast<Opt_Callback_OnHttpErrorReceiveEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnHttpErrorReceive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnDownloadStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnDownloadStartEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnDownloadStartEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnDownloadStartEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnDownloadStartEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnDownloadStartEvent_Void))))};
        }
        Opt_Callback_OnDownloadStartEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnDownloadStart(self, static_cast<Opt_Callback_OnDownloadStartEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnDownloadStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnRefreshAccessedHistory(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnRefreshAccessedHistoryEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnRefreshAccessedHistoryEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnRefreshAccessedHistoryEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnRefreshAccessedHistoryEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnRefreshAccessedHistoryEvent_Void))))};
        }
        Opt_Callback_OnRefreshAccessedHistoryEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnRefreshAccessedHistory(self, static_cast<Opt_Callback_OnRefreshAccessedHistoryEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnRefreshAccessedHistory, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnRenderExited(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnRenderExitedEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnRenderExitedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnRenderExitedEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnRenderExitedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnRenderExitedEvent_Void))))};
        }
        Opt_Callback_OnRenderExitedEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnRenderExited(self, static_cast<Opt_Callback_OnRenderExitedEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnRenderExited, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnShowFileSelector(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnShowFileSelectorEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnShowFileSelectorEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnShowFileSelectorEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnShowFileSelectorEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnShowFileSelectorEvent_Boolean))))};
        }
        Opt_Callback_OnShowFileSelectorEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnShowFileSelector(self, static_cast<Opt_Callback_OnShowFileSelectorEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnShowFileSelector, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnResourceLoad(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnResourceLoadEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnResourceLoadEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnResourceLoadEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnResourceLoadEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnResourceLoadEvent_Void))))};
        }
        Opt_Callback_OnResourceLoadEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnResourceLoad(self, static_cast<Opt_Callback_OnResourceLoadEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnResourceLoad, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnFullScreenExit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnFullScreenExit(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnFullScreenExit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnFullScreenEnter(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnFullScreenEnterCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_FullScreenEnterEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnFullScreenEnterCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_FullScreenEnterEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnFullScreenEnterCallback))))};
        }
        Opt_OnFullScreenEnterCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnFullScreenEnter(self, static_cast<Opt_OnFullScreenEnterCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnFullScreenEnter, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnScaleChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnScaleChangeEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnScaleChangeEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnScaleChangeEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnScaleChangeEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnScaleChangeEvent_Void))))};
        }
        Opt_Callback_OnScaleChangeEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnScaleChange(self, static_cast<Opt_Callback_OnScaleChangeEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnScaleChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnHttpAuthRequest(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnHttpAuthRequestEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnHttpAuthRequestEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnHttpAuthRequestEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnHttpAuthRequestEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnHttpAuthRequestEvent_Boolean))))};
        }
        Opt_Callback_OnHttpAuthRequestEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnHttpAuthRequest(self, static_cast<Opt_Callback_OnHttpAuthRequestEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnHttpAuthRequest, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnInterceptRequest(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnInterceptRequestEvent_WebResourceResponse valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnInterceptRequestEvent value0, const Callback_WebResourceResponse_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnInterceptRequestEvent_WebResourceResponse)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnInterceptRequestEvent value0, const Callback_WebResourceResponse_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnInterceptRequestEvent_WebResourceResponse))))};
        }
        Opt_Callback_OnInterceptRequestEvent_WebResourceResponse valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnInterceptRequest(self, static_cast<Opt_Callback_OnInterceptRequestEvent_WebResourceResponse*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnInterceptRequest, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnPermissionRequest(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnPermissionRequestEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnPermissionRequestEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnPermissionRequestEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnPermissionRequestEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnPermissionRequestEvent_Void))))};
        }
        Opt_Callback_OnPermissionRequestEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnPermissionRequest(self, static_cast<Opt_Callback_OnPermissionRequestEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnPermissionRequest, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnScreenCaptureRequest(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnScreenCaptureRequestEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnScreenCaptureRequestEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnScreenCaptureRequestEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnScreenCaptureRequestEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnScreenCaptureRequestEvent_Void))))};
        }
        Opt_Callback_OnScreenCaptureRequestEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnScreenCaptureRequest(self, static_cast<Opt_Callback_OnScreenCaptureRequestEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnScreenCaptureRequest, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnContextMenuShow(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnContextMenuShowEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnContextMenuShowEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnContextMenuShowEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnContextMenuShowEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnContextMenuShowEvent_Boolean))))};
        }
        Opt_Callback_OnContextMenuShowEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnContextMenuShow(self, static_cast<Opt_Callback_OnContextMenuShowEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnContextMenuShow, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnContextMenuHide(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnContextMenuHideCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnContextMenuHideCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnContextMenuHideCallback))))};
        }
        Opt_OnContextMenuHideCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnContextMenuHide(self, static_cast<Opt_OnContextMenuHideCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnContextMenuHide, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setMediaPlayGestureAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setMediaPlayGestureAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setMediaPlayGestureAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnSearchResultReceive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnSearchResultReceiveEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnSearchResultReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnSearchResultReceiveEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnSearchResultReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnSearchResultReceiveEvent_Void))))};
        }
        Opt_Callback_OnSearchResultReceiveEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnSearchResultReceive(self, static_cast<Opt_Callback_OnSearchResultReceiveEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnSearchResultReceive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnScrollEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnScrollEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnScrollEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnScrollEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnScrollEvent_Void))))};
        }
        Opt_Callback_OnScrollEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnScroll(self, static_cast<Opt_Callback_OnScrollEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnSslErrorEventReceive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnSslErrorEventReceiveEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnSslErrorEventReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnSslErrorEventReceiveEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnSslErrorEventReceiveEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnSslErrorEventReceiveEvent_Void))))};
        }
        Opt_Callback_OnSslErrorEventReceiveEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnSslErrorEventReceive(self, static_cast<Opt_Callback_OnSslErrorEventReceiveEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnSslErrorEventReceive, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnSslErrorEvent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnSslErrorEventCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_SslErrorEvent sslErrorEvent)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnSslErrorEventCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_SslErrorEvent sslErrorEvent)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnSslErrorEventCallback))))};
        }
        Opt_OnSslErrorEventCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnSslErrorEvent(self, static_cast<Opt_OnSslErrorEventCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnSslErrorEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnClientAuthenticationRequest(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnClientAuthenticationEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnClientAuthenticationEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnClientAuthenticationEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnClientAuthenticationEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnClientAuthenticationEvent_Void))))};
        }
        Opt_Callback_OnClientAuthenticationEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnClientAuthenticationRequest(self, static_cast<Opt_Callback_OnClientAuthenticationEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnClientAuthenticationRequest, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnWindowNew(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnWindowNewEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnWindowNewEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnWindowNewEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnWindowNewEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnWindowNewEvent_Void))))};
        }
        Opt_Callback_OnWindowNewEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnWindowNew(self, static_cast<Opt_Callback_OnWindowNewEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnWindowNew, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnWindowExit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnWindowExit(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnWindowExit, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setMultiWindowAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setMultiWindowAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setMultiWindowAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnInterceptKeyEvent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_KeyEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_KeyEvent event, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_KeyEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_KeyEvent event, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_KeyEvent_Boolean))))};
        }
        Opt_Callback_KeyEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnInterceptKeyEvent(self, static_cast<Opt_Callback_KeyEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnInterceptKeyEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setWebStandardFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setWebStandardFont(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setWebStandardFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setWebSerifFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setWebSerifFont(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setWebSerifFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setWebSansSerifFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setWebSansSerifFont(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setWebSansSerifFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setWebFixedFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setWebFixedFont(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setWebFixedFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setWebFantasyFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setWebFantasyFont(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setWebFantasyFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setWebCursiveFont(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setWebCursiveFont(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setWebCursiveFont, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setDefaultFixedFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setDefaultFixedFontSize(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setDefaultFixedFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setDefaultFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setDefaultFontSize(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setDefaultFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setMinFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setMinFontSize(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setMinFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setMinLogicalFontSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setMinLogicalFontSize(self, static_cast<Opt_Int32*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setMinLogicalFontSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setDefaultTextEncodingFormat(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setDefaultTextEncodingFormat(self, static_cast<Opt_String*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setDefaultTextEncodingFormat, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setForceDisplayScrollBar(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setForceDisplayScrollBar(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setForceDisplayScrollBar, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setBlockNetwork(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setBlockNetwork(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setBlockNetwork, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setHorizontalScrollBarAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setHorizontalScrollBarAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setHorizontalScrollBarAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setVerticalScrollBarAccess(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setVerticalScrollBarAccess(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setVerticalScrollBarAccess, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnTouchIconUrlReceived(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnTouchIconUrlReceivedEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnTouchIconUrlReceivedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnTouchIconUrlReceivedEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnTouchIconUrlReceivedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnTouchIconUrlReceivedEvent_Void))))};
        }
        Opt_Callback_OnTouchIconUrlReceivedEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnTouchIconUrlReceived(self, static_cast<Opt_Callback_OnTouchIconUrlReceivedEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnTouchIconUrlReceived, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnFaviconReceived(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnFaviconReceivedEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnFaviconReceivedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnFaviconReceivedEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnFaviconReceivedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnFaviconReceivedEvent_Void))))};
        }
        Opt_Callback_OnFaviconReceivedEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnFaviconReceived(self, static_cast<Opt_Callback_OnFaviconReceivedEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnFaviconReceived, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnPageVisible(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnPageVisibleEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnPageVisibleEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnPageVisibleEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnPageVisibleEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnPageVisibleEvent_Void))))};
        }
        Opt_Callback_OnPageVisibleEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnPageVisible(self, static_cast<Opt_Callback_OnPageVisibleEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnPageVisible, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnDataResubmitted(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnDataResubmittedEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnDataResubmittedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnDataResubmittedEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnDataResubmittedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnDataResubmittedEvent_Void))))};
        }
        Opt_Callback_OnDataResubmittedEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnDataResubmitted(self, static_cast<Opt_Callback_OnDataResubmittedEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnDataResubmitted, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setPinchSmooth(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setPinchSmooth(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setPinchSmooth, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setAllowWindowOpenMethod(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setAllowWindowOpenMethod(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setAllowWindowOpenMethod, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnAudioStateChanged(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnAudioStateChangedEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnAudioStateChangedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnAudioStateChangedEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnAudioStateChangedEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnAudioStateChangedEvent_Void))))};
        }
        Opt_Callback_OnAudioStateChangedEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnAudioStateChanged(self, static_cast<Opt_Callback_OnAudioStateChangedEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnAudioStateChanged, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnFirstContentfulPaint(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnFirstContentfulPaintEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnFirstContentfulPaintEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnFirstContentfulPaintEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnFirstContentfulPaintEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnFirstContentfulPaintEvent_Void))))};
        }
        Opt_Callback_OnFirstContentfulPaintEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnFirstContentfulPaint(self, static_cast<Opt_Callback_OnFirstContentfulPaintEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnFirstContentfulPaint, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnFirstMeaningfulPaint(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnFirstMeaningfulPaintCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_FirstMeaningfulPaint firstMeaningfulPaint)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnFirstMeaningfulPaintCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_FirstMeaningfulPaint firstMeaningfulPaint)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnFirstMeaningfulPaintCallback))))};
        }
        Opt_OnFirstMeaningfulPaintCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnFirstMeaningfulPaint(self, static_cast<Opt_OnFirstMeaningfulPaintCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnFirstMeaningfulPaint, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnLargestContentfulPaint(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnLargestContentfulPaintCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_LargestContentfulPaint largestContentfulPaint)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnLargestContentfulPaintCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_LargestContentfulPaint largestContentfulPaint)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnLargestContentfulPaintCallback))))};
        }
        Opt_OnLargestContentfulPaintCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnLargestContentfulPaint(self, static_cast<Opt_OnLargestContentfulPaintCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnLargestContentfulPaint, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnLoadIntercept(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnLoadInterceptEvent_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnLoadInterceptEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnLoadInterceptEvent_Boolean)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnLoadInterceptEvent value0, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnLoadInterceptEvent_Boolean))))};
        }
        Opt_Callback_OnLoadInterceptEvent_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnLoadIntercept(self, static_cast<Opt_Callback_OnLoadInterceptEvent_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnLoadIntercept, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnControllerAttached(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnControllerAttached(self, static_cast<Opt_Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnControllerAttached, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnOverScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_OnOverScrollEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_OnOverScrollEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnOverScrollEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_OnOverScrollEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnOverScrollEvent_Void))))};
        }
        Opt_Callback_OnOverScrollEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnOverScroll(self, static_cast<Opt_Callback_OnOverScrollEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnOverScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnSafeBrowsingCheckResult(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnSafeBrowsingCheckResultCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_ThreatType threatType)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnSafeBrowsingCheckResultCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_ThreatType threatType)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnSafeBrowsingCheckResultCallback))))};
        }
        Opt_OnSafeBrowsingCheckResultCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnSafeBrowsingCheckResult(self, static_cast<Opt_OnSafeBrowsingCheckResultCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnSafeBrowsingCheckResult, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnNavigationEntryCommitted(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnNavigationEntryCommittedCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_LoadCommittedDetails loadCommittedDetails)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnNavigationEntryCommittedCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_LoadCommittedDetails loadCommittedDetails)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnNavigationEntryCommittedCallback))))};
        }
        Opt_OnNavigationEntryCommittedCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnNavigationEntryCommitted(self, static_cast<Opt_OnNavigationEntryCommittedCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnNavigationEntryCommitted, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnIntelligentTrackingPreventionResult(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnIntelligentTrackingPreventionCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_IntelligentTrackingPreventionDetails details)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnIntelligentTrackingPreventionCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_IntelligentTrackingPreventionDetails details)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnIntelligentTrackingPreventionCallback))))};
        }
        Opt_OnIntelligentTrackingPreventionCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnIntelligentTrackingPreventionResult(self, static_cast<Opt_OnIntelligentTrackingPreventionCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnIntelligentTrackingPreventionResult, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setJavaScriptOnDocumentStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ScriptItem valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ScriptItem valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = ScriptItem_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ScriptItem valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setJavaScriptOnDocumentStart(self, static_cast<Opt_Array_ScriptItem*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setJavaScriptOnDocumentStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setJavaScriptOnDocumentEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ScriptItem valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ScriptItem valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = ScriptItem_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ScriptItem valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setJavaScriptOnDocumentEnd(self, static_cast<Opt_Array_ScriptItem*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setJavaScriptOnDocumentEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setLayoutMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WebLayoutMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_WebLayoutMode>(thisDeserializer.readInt32());
        }
        Opt_WebLayoutMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setLayoutMode(self, static_cast<Opt_WebLayoutMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setLayoutMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setNestedScroll(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_NestedScrollOptions_NestedScrollOptionsExt valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_NestedScrollOptions_NestedScrollOptionsExt valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = NestedScrollOptions_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = NestedScrollOptionsExt_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_NestedScrollOptions_NestedScrollOptionsExt>(valueValueTempTmpBuf_);
        }
        Opt_Union_NestedScrollOptions_NestedScrollOptionsExt valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setNestedScroll(self, static_cast<Opt_Union_NestedScrollOptions_NestedScrollOptionsExt*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setNestedScroll, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setEnableNativeEmbedMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setEnableNativeEmbedMode(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setEnableNativeEmbedMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnNativeEmbedLifecycleChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_NativeEmbedDataInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativeEmbedDataInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_NativeEmbedDataInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativeEmbedDataInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_NativeEmbedDataInfo_Void))))};
        }
        Opt_Callback_NativeEmbedDataInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnNativeEmbedLifecycleChange(self, static_cast<Opt_Callback_NativeEmbedDataInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnNativeEmbedLifecycleChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnNativeEmbedVisibilityChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnNativeEmbedVisibilityChangeCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativeEmbedVisibilityInfo nativeEmbedVisibilityInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnNativeEmbedVisibilityChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativeEmbedVisibilityInfo nativeEmbedVisibilityInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnNativeEmbedVisibilityChangeCallback))))};
        }
        Opt_OnNativeEmbedVisibilityChangeCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnNativeEmbedVisibilityChange(self, static_cast<Opt_OnNativeEmbedVisibilityChangeCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnNativeEmbedVisibilityChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnNativeEmbedGestureEvent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_NativeEmbedTouchInfo_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativeEmbedTouchInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_NativeEmbedTouchInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativeEmbedTouchInfo event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_NativeEmbedTouchInfo_Void))))};
        }
        Opt_Callback_NativeEmbedTouchInfo_Void valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnNativeEmbedGestureEvent(self, static_cast<Opt_Callback_NativeEmbedTouchInfo_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnNativeEmbedGestureEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setCopyOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CopyOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_CopyOptions>(thisDeserializer.readInt32());
        }
        Opt_CopyOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setCopyOptions(self, static_cast<Opt_CopyOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setCopyOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnOverrideUrlLoading(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnOverrideUrlLoadingCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_WebResourceRequest webResourceRequest, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnOverrideUrlLoadingCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_WebResourceRequest webResourceRequest, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnOverrideUrlLoadingCallback))))};
        }
        Opt_OnOverrideUrlLoadingCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnOverrideUrlLoading(self, static_cast<Opt_OnOverrideUrlLoadingCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnOverrideUrlLoading, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setTextAutosizing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setTextAutosizing(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setTextAutosizing, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setEnableNativeMediaPlayer(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NativeMediaPlayerConfig valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = NativeMediaPlayerConfig_serializer::read(thisDeserializer);
        }
        Opt_NativeMediaPlayerConfig valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setEnableNativeMediaPlayer(self, static_cast<Opt_NativeMediaPlayerConfig*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setEnableNativeMediaPlayer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnRenderProcessNotResponding(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnRenderProcessNotRespondingCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_RenderProcessNotRespondingData data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnRenderProcessNotRespondingCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_RenderProcessNotRespondingData data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnRenderProcessNotRespondingCallback))))};
        }
        Opt_OnRenderProcessNotRespondingCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnRenderProcessNotResponding(self, static_cast<Opt_OnRenderProcessNotRespondingCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnRenderProcessNotResponding, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnRenderProcessResponding(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnRenderProcessRespondingCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnRenderProcessRespondingCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnRenderProcessRespondingCallback))))};
        }
        Opt_OnRenderProcessRespondingCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnRenderProcessResponding(self, static_cast<Opt_OnRenderProcessRespondingCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnRenderProcessResponding, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnViewportFitChanged(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnViewportFitChangedCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, Ark_ViewportFit viewportFit)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnViewportFitChangedCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, Ark_ViewportFit viewportFit)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnViewportFitChangedCallback))))};
        }
        Opt_OnViewportFitChangedCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnViewportFitChanged(self, static_cast<Opt_OnViewportFitChangedCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnViewportFitChanged, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnInterceptKeyboardAttach(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WebKeyboardCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_WebKeyboardCallbackInfo keyboardCallbackInfo, const Callback_WebKeyboardOptions_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_WebKeyboardCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_WebKeyboardCallbackInfo keyboardCallbackInfo, const Callback_WebKeyboardOptions_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_WebKeyboardCallback))))};
        }
        Opt_WebKeyboardCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnInterceptKeyboardAttach(self, static_cast<Opt_WebKeyboardCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnInterceptKeyboardAttach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOnAdsBlocked(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnAdsBlockedCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_AdsBlockedDetails details)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnAdsBlockedCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_AdsBlockedDetails details)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnAdsBlockedCallback))))};
        }
        Opt_OnAdsBlockedCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOnAdsBlocked(self, static_cast<Opt_OnAdsBlockedCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOnAdsBlocked, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setKeyboardAvoidMode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WebKeyboardAvoidMode valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_WebKeyboardAvoidMode>(thisDeserializer.readInt32());
        }
        Opt_WebKeyboardAvoidMode valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setKeyboardAvoidMode(self, static_cast<Opt_WebKeyboardAvoidMode*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setKeyboardAvoidMode, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setEditMenuOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EditMenuOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = EditMenuOptions_serializer::read(thisDeserializer);
        }
        Opt_EditMenuOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setEditMenuOptions(self, static_cast<Opt_EditMenuOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setEditMenuOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setEnableHapticFeedback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setEnableHapticFeedback(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setEnableHapticFeedback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setOptimizeParserBudget(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setOptimizeParserBudget(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setOptimizeParserBudget, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setEnableFollowSystemFontWeight(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setEnableFollowSystemFontWeight(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setEnableFollowSystemFontWeight, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setEnableWebAVSession(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setEnableWebAVSession(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setEnableWebAVSession, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setRunJavaScriptOnDocumentStart(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ScriptItem valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ScriptItem valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = ScriptItem_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ScriptItem valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setRunJavaScriptOnDocumentStart(self, static_cast<Opt_Array_ScriptItem*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setRunJavaScriptOnDocumentStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setRunJavaScriptOnDocumentEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ScriptItem valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ScriptItem valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = ScriptItem_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ScriptItem valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setRunJavaScriptOnDocumentEnd(self, static_cast<Opt_Array_ScriptItem*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setRunJavaScriptOnDocumentEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setRunJavaScriptOnHeadEnd(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_ScriptItem valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 valueValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_ScriptItem valueValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf_)>::type,
        std::decay<decltype(*valueValueTempTmpBuf_.array)>::type>(&valueValueTempTmpBuf_, valueValueTempTmpBuf_Length);
            for (int valueValueTempTmpBuf_BufCounterI = 0; valueValueTempTmpBuf_BufCounterI < valueValueTempTmpBuf_Length; valueValueTempTmpBuf_BufCounterI++) {
                valueValueTempTmpBuf_.array[valueValueTempTmpBuf_BufCounterI] = ScriptItem_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value = valueValueTempTmpBuf_;
        }
        Opt_Array_ScriptItem valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setRunJavaScriptOnHeadEnd(self, static_cast<Opt_Array_ScriptItem*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setRunJavaScriptOnHeadEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setNativeEmbedOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EmbedOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = EmbedOptions_serializer::read(thisDeserializer);
        }
        Opt_EmbedOptions valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setNativeEmbedOptions(self, static_cast<Opt_EmbedOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setNativeEmbedOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setRegisterNativeEmbedRule(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto tagValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String tagValueTempTmpBuf = {};
        tagValueTempTmpBuf.tag = tagValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((tagValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            tagValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String tagValueTemp = tagValueTempTmpBuf;;
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String typeValueTemp = typeValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setRegisterNativeEmbedRule(self, static_cast<Opt_String*>(&tagValueTemp), static_cast<Opt_String*>(&typeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setRegisterNativeEmbedRule, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebAttribute_setBindSelectionMenu(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto elementTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WebElementType elementTypeValueTempTmpBuf = {};
        elementTypeValueTempTmpBuf.tag = elementTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((elementTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            elementTypeValueTempTmpBuf.value = static_cast<Ark_WebElementType>(thisDeserializer.readInt32());
        }
        Opt_WebElementType elementTypeValueTemp = elementTypeValueTempTmpBuf;;
        const auto contentValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CustomNodeBuilder contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.tag = contentValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((contentValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            contentValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};
        }
        Opt_CustomNodeBuilder contentValueTemp = contentValueTempTmpBuf;;
        const auto responseTypeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WebResponseType responseTypeValueTempTmpBuf = {};
        responseTypeValueTempTmpBuf.tag = responseTypeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((responseTypeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            responseTypeValueTempTmpBuf.value = static_cast<Ark_WebResponseType>(thisDeserializer.readInt32());
        }
        Opt_WebResponseType responseTypeValueTemp = responseTypeValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionMenuOptionsExt optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionMenuOptionsExt_serializer::read(thisDeserializer);
        }
        Opt_SelectionMenuOptionsExt optionsValueTemp = optionsValueTempTmpBuf;;
        GetNodeModifiers()->getWebModifier()->setBindSelectionMenu(self, static_cast<Opt_WebElementType*>(&elementTypeValueTemp), static_cast<Opt_CustomNodeBuilder*>(&contentValueTemp), static_cast<Opt_WebResponseType*>(&responseTypeValueTemp), static_cast<Opt_SelectionMenuOptionsExt*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebAttribute_setBindSelectionMenu, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_WindowScene_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getWindowSceneModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(WindowScene_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_WindowSceneInterface_setWindowSceneOptions(Ark_NativePointer thisPtr, KInteropNumber persistentId) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        GetNodeModifiers()->getWindowSceneModifier()->setWindowSceneOptions(self, (const Ark_Number*) (&persistentId));
}
KOALA_INTEROP_DIRECT_V2(WindowSceneInterface_setWindowSceneOptions, Ark_NativePointer, KInteropNumber)
void impl_WindowSceneAttribute_setAttractionEffect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto destinationValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Position destinationValueTempTmpBuf = {};
        destinationValueTempTmpBuf.tag = destinationValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((destinationValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            destinationValueTempTmpBuf.value = Position_serializer::read(thisDeserializer);
        }
        Opt_Position destinationValueTemp = destinationValueTempTmpBuf;;
        const auto fractionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number fractionValueTempTmpBuf = {};
        fractionValueTempTmpBuf.tag = fractionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fractionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fractionValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number fractionValueTemp = fractionValueTempTmpBuf;;
        GetNodeModifiers()->getWindowSceneModifier()->setAttractionEffect(self, static_cast<Opt_Position*>(&destinationValueTemp), static_cast<Opt_Number*>(&fractionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WindowSceneAttribute_setAttractionEffect, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_WithTheme_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getWithThemeModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(WithTheme_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_WithThemeInterface_setWithThemeOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_WithThemeOptions optionsValueTemp = WithThemeOptions_serializer::read(thisDeserializer);;
        GetNodeModifiers()->getWithThemeModifier()->setWithThemeOptions(self, static_cast<Ark_WithThemeOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WithThemeInterface_setWithThemeOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_XComponent_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getXComponentModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(XComponent_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_XComponentInterface_setXComponentOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 paramsValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_XComponentParameters_XComponentOptions_NativeXComponentParameters paramsValueTempTmpBuf = {};
        paramsValueTempTmpBuf.selector = paramsValueTempTmpBufUnionSelector;
        if (paramsValueTempTmpBufUnionSelector == 0) {
            paramsValueTempTmpBuf.selector = 0;
            paramsValueTempTmpBuf.value0 = XComponentParameters_serializer::read(thisDeserializer);
        } else if (paramsValueTempTmpBufUnionSelector == 1) {
            paramsValueTempTmpBuf.selector = 1;
            paramsValueTempTmpBuf.value1 = XComponentOptions_serializer::read(thisDeserializer);
        } else if (paramsValueTempTmpBufUnionSelector == 2) {
            paramsValueTempTmpBuf.selector = 2;
            paramsValueTempTmpBuf.value2 = NativeXComponentParameters_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for paramsValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_XComponentParameters_XComponentOptions_NativeXComponentParameters paramsValueTemp = static_cast<Ark_Union_XComponentParameters_XComponentOptions_NativeXComponentParameters>(paramsValueTempTmpBuf);;
        GetNodeModifiers()->getXComponentModifier()->setXComponentOptions(self, static_cast<Ark_Union_XComponentParameters_XComponentOptions_NativeXComponentParameters*>(&paramsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentInterface_setXComponentOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_XComponentAttribute_setOnLoad(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getXComponentModifier()->setOnLoad(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentAttribute_setOnLoad, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_XComponentAttribute_setOnDestroy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getXComponentModifier()->setOnDestroy(self, static_cast<Opt_VoidCallback*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentAttribute_setOnDestroy, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_XComponentAttribute_setEnableAnalyzer(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getXComponentModifier()->setEnableAnalyzer(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentAttribute_setEnableAnalyzer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_XComponentAttribute_setEnableSecure(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getXComponentModifier()->setEnableSecure(self, static_cast<Opt_Boolean*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentAttribute_setEnableSecure, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_XComponentAttribute_setHdrBrightness(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 valueValueTemp = valueValueTempTmpBuf;;
        GetNodeModifiers()->getXComponentModifier()->setHdrBrightness(self, static_cast<Opt_Float64*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentAttribute_setHdrBrightness, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ComponentRoot_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getComponentRootModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(ComponentRoot_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
Ark_NativePointer impl_CustomBuilderRoot_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCustomBuilderRootModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(CustomBuilderRoot_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
Ark_NativePointer impl_CustomLayoutRoot_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getCustomLayoutRootModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(CustomLayoutRoot_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_CustomLayoutRoot_setSubscribeOnMeasureSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_onMeasureSize_SizeResult valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GeometryInfo selfLayoutInfo, const Array_Measurable children, const Ark_ConstraintSizeOptions constraint, const Callback_SizeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_onMeasureSize_SizeResult)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GeometryInfo selfLayoutInfo, const Array_Measurable children, const Ark_ConstraintSizeOptions constraint, const Callback_SizeResult_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_onMeasureSize_SizeResult))))};;
        GetNodeModifiers()->getCustomLayoutRootModifier()->setSubscribeOnMeasureSize(self, static_cast<Callback_onMeasureSize_SizeResult*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CustomLayoutRoot_setSubscribeOnMeasureSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CustomLayoutRoot_setSubscribeOnPlaceChildren(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NodeHandle self = reinterpret_cast<Ark_NodeHandle>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_onPlaceChildren_Void valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GeometryInfo selfLayoutInfo, const Array_Layoutable children, const Ark_ConstraintSizeOptions constraint)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_onPlaceChildren_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GeometryInfo selfLayoutInfo, const Array_Layoutable children, const Ark_ConstraintSizeOptions constraint)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_onPlaceChildren_Void))))};;
        GetNodeModifiers()->getCustomLayoutRootModifier()->setSubscribeOnPlaceChildren(self, static_cast<Callback_onPlaceChildren_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CustomLayoutRoot_setSubscribeOnPlaceChildren, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Root_construct(Ark_Int32 id, Ark_Int32 flags) {
        return GetNodeModifiers()->getRootModifier()->construct(id, flags);
}
KOALA_INTEROP_DIRECT_2(Root_construct, Ark_NativePointer, Ark_Int32, Ark_Int32)

// Accessors

Ark_NativePointer impl_AccessibilityHoverEvent_construct() {
        return GetAccessors()->getAccessibilityHoverEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(AccessibilityHoverEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_AccessibilityHoverEvent_getFinalizer() {
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(AccessibilityHoverEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_AccessibilityHoverEvent_getType(Ark_NativePointer thisPtr) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getType(self);
}
KOALA_INTEROP_DIRECT_1(AccessibilityHoverEvent_getType, Ark_Int32, Ark_NativePointer)
void impl_AccessibilityHoverEvent_setType(Ark_NativePointer thisPtr, Ark_Int32 type) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        GetAccessors()->getAccessibilityHoverEventAccessor()->setType(self, static_cast<Ark_AccessibilityHoverType>(type));
}
KOALA_INTEROP_DIRECT_V2(AccessibilityHoverEvent_setType, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_AccessibilityHoverEvent_getX(Ark_NativePointer thisPtr) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getX(self);
}
KOALA_INTEROP_DIRECT_1(AccessibilityHoverEvent_getX, Ark_Int32, Ark_NativePointer)
void impl_AccessibilityHoverEvent_setX(Ark_NativePointer thisPtr, KDouble x) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        GetAccessors()->getAccessibilityHoverEventAccessor()->setX(self, x);
}
KOALA_INTEROP_DIRECT_V2(AccessibilityHoverEvent_setX, Ark_NativePointer, KDouble)
Ark_Int32 impl_AccessibilityHoverEvent_getY(Ark_NativePointer thisPtr) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getY(self);
}
KOALA_INTEROP_DIRECT_1(AccessibilityHoverEvent_getY, Ark_Int32, Ark_NativePointer)
void impl_AccessibilityHoverEvent_setY(Ark_NativePointer thisPtr, KDouble y) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        GetAccessors()->getAccessibilityHoverEventAccessor()->setY(self, y);
}
KOALA_INTEROP_DIRECT_V2(AccessibilityHoverEvent_setY, Ark_NativePointer, KDouble)
Ark_Int32 impl_AccessibilityHoverEvent_getDisplayX(Ark_NativePointer thisPtr) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getDisplayX(self);
}
KOALA_INTEROP_DIRECT_1(AccessibilityHoverEvent_getDisplayX, Ark_Int32, Ark_NativePointer)
void impl_AccessibilityHoverEvent_setDisplayX(Ark_NativePointer thisPtr, KDouble displayX) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        GetAccessors()->getAccessibilityHoverEventAccessor()->setDisplayX(self, displayX);
}
KOALA_INTEROP_DIRECT_V2(AccessibilityHoverEvent_setDisplayX, Ark_NativePointer, KDouble)
Ark_Int32 impl_AccessibilityHoverEvent_getDisplayY(Ark_NativePointer thisPtr) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getDisplayY(self);
}
KOALA_INTEROP_DIRECT_1(AccessibilityHoverEvent_getDisplayY, Ark_Int32, Ark_NativePointer)
void impl_AccessibilityHoverEvent_setDisplayY(Ark_NativePointer thisPtr, KDouble displayY) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        GetAccessors()->getAccessibilityHoverEventAccessor()->setDisplayY(self, displayY);
}
KOALA_INTEROP_DIRECT_V2(AccessibilityHoverEvent_setDisplayY, Ark_NativePointer, KDouble)
Ark_Int32 impl_AccessibilityHoverEvent_getWindowX(Ark_NativePointer thisPtr) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getWindowX(self);
}
KOALA_INTEROP_DIRECT_1(AccessibilityHoverEvent_getWindowX, Ark_Int32, Ark_NativePointer)
void impl_AccessibilityHoverEvent_setWindowX(Ark_NativePointer thisPtr, KDouble windowX) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        GetAccessors()->getAccessibilityHoverEventAccessor()->setWindowX(self, windowX);
}
KOALA_INTEROP_DIRECT_V2(AccessibilityHoverEvent_setWindowX, Ark_NativePointer, KDouble)
Ark_Int32 impl_AccessibilityHoverEvent_getWindowY(Ark_NativePointer thisPtr) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        return GetAccessors()->getAccessibilityHoverEventAccessor()->getWindowY(self);
}
KOALA_INTEROP_DIRECT_1(AccessibilityHoverEvent_getWindowY, Ark_Int32, Ark_NativePointer)
void impl_AccessibilityHoverEvent_setWindowY(Ark_NativePointer thisPtr, KDouble windowY) {
        Ark_AccessibilityHoverEvent self = reinterpret_cast<Ark_AccessibilityHoverEvent>(thisPtr);
        GetAccessors()->getAccessibilityHoverEventAccessor()->setWindowY(self, windowY);
}
KOALA_INTEROP_DIRECT_V2(AccessibilityHoverEvent_setWindowY, Ark_NativePointer, KDouble)
void impl_ActionSheet_show(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ActionSheetOptions optionsValueTemp = ActionSheetOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getActionSheetAccessor()->show(static_cast<Ark_ActionSheetOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(ActionSheet_show, KSerializerBuffer, int32_t)
void impl_AlertDialog_show(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 optionsValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_AlertDialogParamWithConfirm_AlertDialogParamWithButtons_AlertDialogParamWithOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.selector = optionsValueTempTmpBufUnionSelector;
        if (optionsValueTempTmpBufUnionSelector == 0) {
            optionsValueTempTmpBuf.selector = 0;
            optionsValueTempTmpBuf.value0 = AlertDialogParamWithConfirm_serializer::read(thisDeserializer);
        } else if (optionsValueTempTmpBufUnionSelector == 1) {
            optionsValueTempTmpBuf.selector = 1;
            optionsValueTempTmpBuf.value1 = AlertDialogParamWithButtons_serializer::read(thisDeserializer);
        } else if (optionsValueTempTmpBufUnionSelector == 2) {
            optionsValueTempTmpBuf.selector = 2;
            optionsValueTempTmpBuf.value2 = AlertDialogParamWithOptions_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for optionsValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_AlertDialogParamWithConfirm_AlertDialogParamWithButtons_AlertDialogParamWithOptions optionsValueTemp = static_cast<Ark_Union_AlertDialogParamWithConfirm_AlertDialogParamWithButtons_AlertDialogParamWithOptions>(optionsValueTempTmpBuf);;
        GetAccessors()->getAlertDialogAccessor()->show(static_cast<Ark_Union_AlertDialogParamWithConfirm_AlertDialogParamWithButtons_AlertDialogParamWithOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(AlertDialog_show, KSerializerBuffer, int32_t)
void impl_AnimationExtender_SetClipRect(Ark_NativePointer node, KFloat x, KFloat y, KFloat width, KFloat height) {
        GetAccessors()->getAnimationExtenderAccessor()->SetClipRect(node, x, y, width, height);
}
KOALA_INTEROP_DIRECT_V5(AnimationExtender_SetClipRect, Ark_NativePointer, KFloat, KFloat, KFloat, KFloat)
void impl_AnimationExtender_OpenImplicitAnimation(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_AnimateParam paramValueTemp = AnimateParam_serializer::read(thisDeserializer);;
        GetAccessors()->getAnimationExtenderAccessor()->OpenImplicitAnimation(static_cast<Ark_AnimateParam*>(&paramValueTemp));
}
KOALA_INTEROP_DIRECT_V2(AnimationExtender_OpenImplicitAnimation, KSerializerBuffer, int32_t)
void impl_AnimationExtender_CloseImplicitAnimation() {
        GetAccessors()->getAnimationExtenderAccessor()->CloseImplicitAnimation();
}
KOALA_INTEROP_DIRECT_V0(AnimationExtender_CloseImplicitAnimation)
void impl_AnimationExtender_OpenImplicitAnimationForAnimation(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto paramValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AnimateParam paramValueTempTmpBuf = {};
        paramValueTempTmpBuf.tag = paramValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((paramValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            paramValueTempTmpBuf.value = AnimateParam_serializer::read(thisDeserializer);
        }
        Opt_AnimateParam paramValueTemp = paramValueTempTmpBuf;;
        GetAccessors()->getAnimationExtenderAccessor()->OpenImplicitAnimationForAnimation(node, static_cast<Opt_AnimateParam*>(&paramValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimationExtender_OpenImplicitAnimationForAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimationExtender_CloseImplicitAnimationForAnimation(Ark_NativePointer node) {
        GetAccessors()->getAnimationExtenderAccessor()->CloseImplicitAnimationForAnimation(node);
}
KOALA_INTEROP_DIRECT_V1(AnimationExtender_CloseImplicitAnimationForAnimation, Ark_NativePointer)
void impl_AnimationExtender_StartDoubleAnimation(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_DoubleAnimationParam paramValueTemp = DoubleAnimationParam_serializer::read(thisDeserializer);;
        GetAccessors()->getAnimationExtenderAccessor()->StartDoubleAnimation(node, static_cast<Ark_DoubleAnimationParam*>(&paramValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimationExtender_StartDoubleAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimationExtender_AnimationTranslate(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TranslateOptions optionsValueTemp = TranslateOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getAnimationExtenderAccessor()->AnimationTranslate(node, static_cast<Ark_TranslateOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AnimationExtender_AnimationTranslate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_AnimationExtender_AnimateToImmediatelyImpl(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_AnimateParam paramValueTemp = AnimateParam_serializer::read(thisDeserializer);;
        Callback_Void eventValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getAnimationExtenderAccessor()->AnimateToImmediatelyImpl(static_cast<Ark_AnimateParam*>(&paramValueTemp), static_cast<Callback_Void*>(&eventValueTemp));
}
KOALA_INTEROP_DIRECT_V2(AnimationExtender_AnimateToImmediatelyImpl, KSerializerBuffer, int32_t)
void impl_AnimationExtender_KeyframeAnimationImpl(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_KeyframeAnimateParam paramValueTemp = KeyframeAnimateParam_serializer::read(thisDeserializer);;
        const Ark_Int32 keyfamesValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_KeyframeState keyfamesValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(keyfamesValueTempTmpBuf)>::type,
        std::decay<decltype(*keyfamesValueTempTmpBuf.array)>::type>(&keyfamesValueTempTmpBuf, keyfamesValueTempTmpBufLength);
        for (int keyfamesValueTempTmpBufBufCounterI = 0; keyfamesValueTempTmpBufBufCounterI < keyfamesValueTempTmpBufLength; keyfamesValueTempTmpBufBufCounterI++) {
            keyfamesValueTempTmpBuf.array[keyfamesValueTempTmpBufBufCounterI] = KeyframeState_serializer::read(thisDeserializer);
        }
        Array_KeyframeState keyfamesValueTemp = keyfamesValueTempTmpBuf;;
        GetAccessors()->getAnimationExtenderAccessor()->KeyframeAnimationImpl(static_cast<Ark_KeyframeAnimateParam*>(&paramValueTemp), static_cast<Array_KeyframeState*>(&keyfamesValueTemp));
}
KOALA_INTEROP_DIRECT_V2(AnimationExtender_KeyframeAnimationImpl, KSerializerBuffer, int32_t)
Ark_NativePointer impl_AppearSymbolEffect_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        return GetAccessors()->getAppearSymbolEffectAccessor()->construct(static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_2(AppearSymbolEffect_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_AppearSymbolEffect_getFinalizer() {
        return GetAccessors()->getAppearSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(AppearSymbolEffect_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_AppearSymbolEffect_getScope(Ark_NativePointer thisPtr) {
        Ark_AppearSymbolEffect self = reinterpret_cast<Ark_AppearSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getAppearSymbolEffectAccessor()->getScope(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectScope>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(AppearSymbolEffect_getScope, KInteropReturnBuffer, Ark_NativePointer)
void impl_AppearSymbolEffect_setScope(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_AppearSymbolEffect self = reinterpret_cast<Ark_AppearSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        GetAccessors()->getAppearSymbolEffectAccessor()->setScope(self, static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AppearSymbolEffect_setScope, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_AxisEvent_construct() {
        return GetAccessors()->getAxisEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(AxisEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_AxisEvent_getFinalizer() {
        return GetAccessors()->getAxisEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(AxisEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_AxisEvent_getHorizontalAxisValue(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getHorizontalAxisValue(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getHorizontalAxisValue, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_AxisEvent_getVerticalAxisValue(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getVerticalAxisValue(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getVerticalAxisValue, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_AxisEvent_getAction(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getAction(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getAction, Ark_Int32, Ark_NativePointer)
void impl_AxisEvent_setAction(Ark_NativePointer thisPtr, Ark_Int32 action) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        GetAccessors()->getAxisEventAccessor()->setAction(self, static_cast<Ark_AxisAction>(action));
}
KOALA_INTEROP_DIRECT_V2(AxisEvent_setAction, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_AxisEvent_getDisplayX(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getDisplayX(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getDisplayX, Ark_Int32, Ark_NativePointer)
void impl_AxisEvent_setDisplayX(Ark_NativePointer thisPtr, KDouble displayX) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        GetAccessors()->getAxisEventAccessor()->setDisplayX(self, displayX);
}
KOALA_INTEROP_DIRECT_V2(AxisEvent_setDisplayX, Ark_NativePointer, KDouble)
Ark_Int32 impl_AxisEvent_getDisplayY(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getDisplayY(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getDisplayY, Ark_Int32, Ark_NativePointer)
void impl_AxisEvent_setDisplayY(Ark_NativePointer thisPtr, KDouble displayY) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        GetAccessors()->getAxisEventAccessor()->setDisplayY(self, displayY);
}
KOALA_INTEROP_DIRECT_V2(AxisEvent_setDisplayY, Ark_NativePointer, KDouble)
Ark_Int32 impl_AxisEvent_getWindowX(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getWindowX(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getWindowX, Ark_Int32, Ark_NativePointer)
void impl_AxisEvent_setWindowX(Ark_NativePointer thisPtr, KDouble windowX) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        GetAccessors()->getAxisEventAccessor()->setWindowX(self, windowX);
}
KOALA_INTEROP_DIRECT_V2(AxisEvent_setWindowX, Ark_NativePointer, KDouble)
Ark_Int32 impl_AxisEvent_getWindowY(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getWindowY(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getWindowY, Ark_Int32, Ark_NativePointer)
void impl_AxisEvent_setWindowY(Ark_NativePointer thisPtr, KDouble windowY) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        GetAccessors()->getAxisEventAccessor()->setWindowY(self, windowY);
}
KOALA_INTEROP_DIRECT_V2(AxisEvent_setWindowY, Ark_NativePointer, KDouble)
Ark_Int32 impl_AxisEvent_getX(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getX(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getX, Ark_Int32, Ark_NativePointer)
void impl_AxisEvent_setX(Ark_NativePointer thisPtr, KDouble x) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        GetAccessors()->getAxisEventAccessor()->setX(self, x);
}
KOALA_INTEROP_DIRECT_V2(AxisEvent_setX, Ark_NativePointer, KDouble)
Ark_Int32 impl_AxisEvent_getY(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        return GetAccessors()->getAxisEventAccessor()->getY(self);
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getY, Ark_Int32, Ark_NativePointer)
void impl_AxisEvent_setY(Ark_NativePointer thisPtr, KDouble y) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        GetAccessors()->getAxisEventAccessor()->setY(self, y);
}
KOALA_INTEROP_DIRECT_V2(AxisEvent_setY, Ark_NativePointer, KDouble)
KInteropReturnBuffer impl_AxisEvent_getScrollStep(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getAxisEventAccessor()->getScrollStep(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(AxisEvent_getScrollStep, KInteropReturnBuffer, Ark_NativePointer)
void impl_AxisEvent_setScrollStep(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scrollStepValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 scrollStepValueTempTmpBuf = {};
        scrollStepValueTempTmpBuf.tag = scrollStepValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scrollStepValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scrollStepValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 scrollStepValueTemp = scrollStepValueTempTmpBuf;;
        GetAccessors()->getAxisEventAccessor()->setScrollStep(self, static_cast<Opt_Int32*>(&scrollStepValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AxisEvent_setScrollStep, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_AxisEvent_getPropagation(Ark_NativePointer thisPtr) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getAxisEventAccessor()->getPropagation(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(AxisEvent_getPropagation, Ark_NativePointer, Ark_NativePointer)
void impl_AxisEvent_setPropagation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_AxisEvent self = reinterpret_cast<Ark_AxisEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void propagationValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getAxisEventAccessor()->setPropagation(self, static_cast<Callback_Void*>(&propagationValueTemp));
}
KOALA_INTEROP_DIRECT_V3(AxisEvent_setPropagation, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BackgroundColorStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TextBackgroundStyle textBackgroundStyleValueTemp = TextBackgroundStyle_serializer::read(thisDeserializer);;
        return GetAccessors()->getBackgroundColorStyleAccessor()->construct(static_cast<Ark_TextBackgroundStyle*>(&textBackgroundStyleValueTemp));
}
KOALA_INTEROP_DIRECT_2(BackgroundColorStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BackgroundColorStyle_getFinalizer() {
        return GetAccessors()->getBackgroundColorStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(BackgroundColorStyle_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_BackgroundColorStyle_getTextBackgroundStyle(Ark_NativePointer thisPtr) {
        Ark_BackgroundColorStyle self = reinterpret_cast<Ark_BackgroundColorStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getBackgroundColorStyleAccessor()->getTextBackgroundStyle(self);
        SerializerBase _retSerializer {};
        TextBackgroundStyle_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BackgroundColorStyle_getTextBackgroundStyle, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_BaseEvent_construct() {
        return GetAccessors()->getBaseEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(BaseEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_BaseEvent_getFinalizer() {
        return GetAccessors()->getBaseEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(BaseEvent_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_BaseEvent_getTarget(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseEventAccessor()->getTarget(self);
        SerializerBase _retSerializer {};
        EventTarget_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseEvent_getTarget, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseEvent_setTarget(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_EventTarget targetValueTemp = EventTarget_serializer::read(thisDeserializer);;
        GetAccessors()->getBaseEventAccessor()->setTarget(self, static_cast<Ark_EventTarget*>(&targetValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseEvent_setTarget, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_BaseEvent_getTimestamp(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        return GetAccessors()->getBaseEventAccessor()->getTimestamp(self);
}
KOALA_INTEROP_DIRECT_1(BaseEvent_getTimestamp, Ark_Int32, Ark_NativePointer)
void impl_BaseEvent_setTimestamp(Ark_NativePointer thisPtr, KLong timestamp) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        GetAccessors()->getBaseEventAccessor()->setTimestamp(self, timestamp);
}
KOALA_INTEROP_DIRECT_V2(BaseEvent_setTimestamp, Ark_NativePointer, KLong)
Ark_Int32 impl_BaseEvent_getSource(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        return GetAccessors()->getBaseEventAccessor()->getSource(self);
}
KOALA_INTEROP_DIRECT_1(BaseEvent_getSource, Ark_Int32, Ark_NativePointer)
void impl_BaseEvent_setSource(Ark_NativePointer thisPtr, Ark_Int32 source) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        GetAccessors()->getBaseEventAccessor()->setSource(self, static_cast<Ark_SourceType>(source));
}
KOALA_INTEROP_DIRECT_V2(BaseEvent_setSource, Ark_NativePointer, Ark_Int32)
KInteropReturnBuffer impl_BaseEvent_getAxisHorizontal(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseEventAccessor()->getAxisHorizontal(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseEvent_getAxisHorizontal, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseEvent_setAxisHorizontal(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto axisHorizontalValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 axisHorizontalValueTempTmpBuf = {};
        axisHorizontalValueTempTmpBuf.tag = axisHorizontalValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((axisHorizontalValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            axisHorizontalValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 axisHorizontalValueTemp = axisHorizontalValueTempTmpBuf;;
        GetAccessors()->getBaseEventAccessor()->setAxisHorizontal(self, static_cast<Opt_Float64*>(&axisHorizontalValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseEvent_setAxisHorizontal, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_BaseEvent_getAxisVertical(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseEventAccessor()->getAxisVertical(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseEvent_getAxisVertical, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseEvent_setAxisVertical(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto axisVerticalValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 axisVerticalValueTempTmpBuf = {};
        axisVerticalValueTempTmpBuf.tag = axisVerticalValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((axisVerticalValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            axisVerticalValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 axisVerticalValueTemp = axisVerticalValueTempTmpBuf;;
        GetAccessors()->getBaseEventAccessor()->setAxisVertical(self, static_cast<Opt_Float64*>(&axisVerticalValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseEvent_setAxisVertical, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_BaseEvent_getPressure(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        return GetAccessors()->getBaseEventAccessor()->getPressure(self);
}
KOALA_INTEROP_DIRECT_1(BaseEvent_getPressure, Ark_Int32, Ark_NativePointer)
void impl_BaseEvent_setPressure(Ark_NativePointer thisPtr, KDouble pressure) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        GetAccessors()->getBaseEventAccessor()->setPressure(self, pressure);
}
KOALA_INTEROP_DIRECT_V2(BaseEvent_setPressure, Ark_NativePointer, KDouble)
Ark_Int32 impl_BaseEvent_getTiltX(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        return GetAccessors()->getBaseEventAccessor()->getTiltX(self);
}
KOALA_INTEROP_DIRECT_1(BaseEvent_getTiltX, Ark_Int32, Ark_NativePointer)
void impl_BaseEvent_setTiltX(Ark_NativePointer thisPtr, KDouble tiltX) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        GetAccessors()->getBaseEventAccessor()->setTiltX(self, tiltX);
}
KOALA_INTEROP_DIRECT_V2(BaseEvent_setTiltX, Ark_NativePointer, KDouble)
Ark_Int32 impl_BaseEvent_getTiltY(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        return GetAccessors()->getBaseEventAccessor()->getTiltY(self);
}
KOALA_INTEROP_DIRECT_1(BaseEvent_getTiltY, Ark_Int32, Ark_NativePointer)
void impl_BaseEvent_setTiltY(Ark_NativePointer thisPtr, KDouble tiltY) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        GetAccessors()->getBaseEventAccessor()->setTiltY(self, tiltY);
}
KOALA_INTEROP_DIRECT_V2(BaseEvent_setTiltY, Ark_NativePointer, KDouble)
KInteropReturnBuffer impl_BaseEvent_getRollAngle(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseEventAccessor()->getRollAngle(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseEvent_getRollAngle, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseEvent_setRollAngle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rollAngleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 rollAngleValueTempTmpBuf = {};
        rollAngleValueTempTmpBuf.tag = rollAngleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rollAngleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rollAngleValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 rollAngleValueTemp = rollAngleValueTempTmpBuf;;
        GetAccessors()->getBaseEventAccessor()->setRollAngle(self, static_cast<Opt_Float64*>(&rollAngleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseEvent_setRollAngle, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_BaseEvent_getSourceTool(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        return GetAccessors()->getBaseEventAccessor()->getSourceTool(self);
}
KOALA_INTEROP_DIRECT_1(BaseEvent_getSourceTool, Ark_Int32, Ark_NativePointer)
void impl_BaseEvent_setSourceTool(Ark_NativePointer thisPtr, Ark_Int32 sourceTool) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        GetAccessors()->getBaseEventAccessor()->setSourceTool(self, static_cast<Ark_SourceTool>(sourceTool));
}
KOALA_INTEROP_DIRECT_V2(BaseEvent_setSourceTool, Ark_NativePointer, Ark_Int32)
KInteropReturnBuffer impl_BaseEvent_getGetModifierKeyState(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseEventAccessor()->getGetModifierKeyState(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseEvent_getGetModifierKeyState, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseEvent_setGetModifierKeyState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto getModifierKeyStateValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ModifierKeyStateGetter getModifierKeyStateValueTempTmpBuf = {};
        getModifierKeyStateValueTempTmpBuf.tag = getModifierKeyStateValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((getModifierKeyStateValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            getModifierKeyStateValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Array_String keys, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ModifierKeyStateGetter)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Array_String keys, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ModifierKeyStateGetter))))};
        }
        Opt_ModifierKeyStateGetter getModifierKeyStateValueTemp = getModifierKeyStateValueTempTmpBuf;;
        GetAccessors()->getBaseEventAccessor()->setGetModifierKeyState(self, static_cast<Opt_ModifierKeyStateGetter*>(&getModifierKeyStateValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseEvent_setGetModifierKeyState, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_BaseEvent_getDeviceId(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseEventAccessor()->getDeviceId(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseEvent_getDeviceId, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseEvent_setDeviceId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto deviceIdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 deviceIdValueTempTmpBuf = {};
        deviceIdValueTempTmpBuf.tag = deviceIdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((deviceIdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            deviceIdValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 deviceIdValueTemp = deviceIdValueTempTmpBuf;;
        GetAccessors()->getBaseEventAccessor()->setDeviceId(self, static_cast<Opt_Int32*>(&deviceIdValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseEvent_setDeviceId, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_BaseEvent_getTargetDisplayId(Ark_NativePointer thisPtr) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseEventAccessor()->getTargetDisplayId(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseEvent_getTargetDisplayId, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseEvent_setTargetDisplayId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseEvent self = reinterpret_cast<Ark_BaseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto targetDisplayIdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 targetDisplayIdValueTempTmpBuf = {};
        targetDisplayIdValueTempTmpBuf.tag = targetDisplayIdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((targetDisplayIdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            targetDisplayIdValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 targetDisplayIdValueTemp = targetDisplayIdValueTempTmpBuf;;
        GetAccessors()->getBaseEventAccessor()->setTargetDisplayId(self, static_cast<Opt_Int32*>(&targetDisplayIdValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseEvent_setTargetDisplayId, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BaseGestureEvent_construct() {
        return GetAccessors()->getBaseGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(BaseGestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_BaseGestureEvent_getFinalizer() {
        return GetAccessors()->getBaseGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(BaseGestureEvent_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_BaseGestureEvent_getFingerList(Ark_NativePointer thisPtr) {
        Ark_BaseGestureEvent self = reinterpret_cast<Ark_BaseGestureEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getBaseGestureEventAccessor()->getFingerList(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_FingerInfo retValueTmpElement = retValue.array[retValueCounterI];
            FingerInfo_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BaseGestureEvent_getFingerList, KInteropReturnBuffer, Ark_NativePointer)
void impl_BaseGestureEvent_setFingerList(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseGestureEvent self = reinterpret_cast<Ark_BaseGestureEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 fingerListValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_FingerInfo fingerListValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(fingerListValueTempTmpBuf)>::type,
        std::decay<decltype(*fingerListValueTempTmpBuf.array)>::type>(&fingerListValueTempTmpBuf, fingerListValueTempTmpBufLength);
        for (int fingerListValueTempTmpBufBufCounterI = 0; fingerListValueTempTmpBufBufCounterI < fingerListValueTempTmpBufLength; fingerListValueTempTmpBufBufCounterI++) {
            fingerListValueTempTmpBuf.array[fingerListValueTempTmpBufBufCounterI] = FingerInfo_serializer::read(thisDeserializer);
        }
        Array_FingerInfo fingerListValueTemp = fingerListValueTempTmpBuf;;
        GetAccessors()->getBaseGestureEventAccessor()->setFingerList(self, static_cast<Array_FingerInfo*>(&fingerListValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BaseGestureEvent_setFingerList, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BaselineOffsetStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_LengthMetrics valueValueTemp = LengthMetrics_serializer::read(thisDeserializer);;
        return GetAccessors()->getBaselineOffsetStyleAccessor()->construct(static_cast<Ark_LengthMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(BaselineOffsetStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BaselineOffsetStyle_getFinalizer() {
        return GetAccessors()->getBaselineOffsetStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(BaselineOffsetStyle_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_BaselineOffsetStyle_getBaselineOffset(Ark_NativePointer thisPtr) {
        Ark_BaselineOffsetStyle self = reinterpret_cast<Ark_BaselineOffsetStyle>(thisPtr);
        return GetAccessors()->getBaselineOffsetStyleAccessor()->getBaselineOffset(self);
}
KOALA_INTEROP_1(BaselineOffsetStyle_getBaselineOffset, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_BaseShape_construct() {
        return GetAccessors()->getBaseShapeAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(BaseShape_construct, Ark_NativePointer)
Ark_NativePointer impl_BaseShape_getFinalizer() {
        return GetAccessors()->getBaseShapeAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(BaseShape_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_BaseShape_width(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseShape self = reinterpret_cast<Ark_BaseShape>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 widthValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Length widthValueTempTmpBuf = {};
        widthValueTempTmpBuf.selector = widthValueTempTmpBufUnionSelector;
        if (widthValueTempTmpBufUnionSelector == 0) {
            widthValueTempTmpBuf.selector = 0;
            widthValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (widthValueTempTmpBufUnionSelector == 1) {
            widthValueTempTmpBuf.selector = 1;
            widthValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (widthValueTempTmpBufUnionSelector == 2) {
            widthValueTempTmpBuf.selector = 2;
            widthValueTempTmpBuf.value2 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for widthValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Length widthValueTemp = static_cast<Ark_Length>(widthValueTempTmpBuf);;
        return GetAccessors()->getBaseShapeAccessor()->width(self, static_cast<Ark_Length*>(&widthValueTemp));
}
KOALA_INTEROP_DIRECT_3(BaseShape_width, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BaseShape_height(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseShape self = reinterpret_cast<Ark_BaseShape>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 heightValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Length heightValueTempTmpBuf = {};
        heightValueTempTmpBuf.selector = heightValueTempTmpBufUnionSelector;
        if (heightValueTempTmpBufUnionSelector == 0) {
            heightValueTempTmpBuf.selector = 0;
            heightValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (heightValueTempTmpBufUnionSelector == 1) {
            heightValueTempTmpBuf.selector = 1;
            heightValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (heightValueTempTmpBufUnionSelector == 2) {
            heightValueTempTmpBuf.selector = 2;
            heightValueTempTmpBuf.value2 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for heightValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Length heightValueTemp = static_cast<Ark_Length>(heightValueTempTmpBuf);;
        return GetAccessors()->getBaseShapeAccessor()->height(self, static_cast<Ark_Length*>(&heightValueTemp));
}
KOALA_INTEROP_DIRECT_3(BaseShape_height, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BaseShape_size(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BaseShape self = reinterpret_cast<Ark_BaseShape>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_SizeOptions sizeValueTemp = SizeOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getBaseShapeAccessor()->size(self, static_cast<Ark_SizeOptions*>(&sizeValueTemp));
}
KOALA_INTEROP_DIRECT_3(BaseShape_size, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BounceSymbolEffect_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        const auto directionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectDirection directionValueTempTmpBuf = {};
        directionValueTempTmpBuf.tag = directionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((directionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            directionValueTempTmpBuf.value = static_cast<Ark_EffectDirection>(thisDeserializer.readInt32());
        }
        Opt_EffectDirection directionValueTemp = directionValueTempTmpBuf;;
        return GetAccessors()->getBounceSymbolEffectAccessor()->construct(static_cast<Opt_EffectScope*>(&scopeValueTemp), static_cast<Opt_EffectDirection*>(&directionValueTemp));
}
KOALA_INTEROP_DIRECT_2(BounceSymbolEffect_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BounceSymbolEffect_getFinalizer() {
        return GetAccessors()->getBounceSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(BounceSymbolEffect_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_BounceSymbolEffect_getScope(Ark_NativePointer thisPtr) {
        Ark_BounceSymbolEffect self = reinterpret_cast<Ark_BounceSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getBounceSymbolEffectAccessor()->getScope(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectScope>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BounceSymbolEffect_getScope, KInteropReturnBuffer, Ark_NativePointer)
void impl_BounceSymbolEffect_setScope(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BounceSymbolEffect self = reinterpret_cast<Ark_BounceSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        GetAccessors()->getBounceSymbolEffectAccessor()->setScope(self, static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BounceSymbolEffect_setScope, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_BounceSymbolEffect_getDirection(Ark_NativePointer thisPtr) {
        Ark_BounceSymbolEffect self = reinterpret_cast<Ark_BounceSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getBounceSymbolEffectAccessor()->getDirection(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectDirection>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(BounceSymbolEffect_getDirection, KInteropReturnBuffer, Ark_NativePointer)
void impl_BounceSymbolEffect_setDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BounceSymbolEffect self = reinterpret_cast<Ark_BounceSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto directionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectDirection directionValueTempTmpBuf = {};
        directionValueTempTmpBuf.tag = directionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((directionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            directionValueTempTmpBuf.value = static_cast<Ark_EffectDirection>(thisDeserializer.readInt32());
        }
        Opt_EffectDirection directionValueTemp = directionValueTempTmpBuf;;
        GetAccessors()->getBounceSymbolEffectAccessor()->setDirection(self, static_cast<Opt_EffectDirection*>(&directionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BounceSymbolEffect_setDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_BuilderNodeOps_construct() {
        return GetAccessors()->getBuilderNodeOpsAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(BuilderNodeOps_construct, Ark_NativePointer)
Ark_NativePointer impl_BuilderNodeOps_getFinalizer() {
        return GetAccessors()->getBuilderNodeOpsAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(BuilderNodeOps_getFinalizer, Ark_NativePointer)
void impl_BuilderNodeOps_create(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BuilderNodeOps self = reinterpret_cast<Ark_BuilderNodeOps>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void buildFuncValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getBuilderNodeOpsAccessor()->create(self, static_cast<Callback_Void*>(&buildFuncValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BuilderNodeOps_create, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_BuilderNodeOps_disposeNode(Ark_NativePointer thisPtr) {
        Ark_BuilderNodeOps self = reinterpret_cast<Ark_BuilderNodeOps>(thisPtr);
        GetAccessors()->getBuilderNodeOpsAccessor()->disposeNode(self);
}
KOALA_INTEROP_DIRECT_V1(BuilderNodeOps_disposeNode, Ark_NativePointer)
void impl_BuilderNodeOps_setUpdateConfigurationCallback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BuilderNodeOps self = reinterpret_cast<Ark_BuilderNodeOps>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void configurationUpdateFuncValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getBuilderNodeOpsAccessor()->setUpdateConfigurationCallback(self, static_cast<Callback_Void*>(&configurationUpdateFuncValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BuilderNodeOps_setUpdateConfigurationCallback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_BuilderNodeOps_setOptions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_BuilderNodeOps self = reinterpret_cast<Ark_BuilderNodeOps>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_BuilderNodeOptions optionsValueTemp = BuilderNodeOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getBuilderNodeOpsAccessor()->setOptions(self, static_cast<Ark_BuilderNodeOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(BuilderNodeOps_setOptions, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Boolean impl_BuilderNodeOps_postTouchEvent(Ark_NativePointer thisPtr, Ark_NativePointer event) {
        Ark_BuilderNodeOps self = reinterpret_cast<Ark_BuilderNodeOps>(thisPtr);
        return GetAccessors()->getBuilderNodeOpsAccessor()->postTouchEvent(self, static_cast<Ark_TouchEvent>(event));
}
KOALA_INTEROP_DIRECT_2(BuilderNodeOps_postTouchEvent, Ark_Boolean, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_BuilderNodeOps_setRootFrameNodeInBuilderNode(Ark_NativePointer thisPtr, Ark_NativePointer node) {
        Ark_BuilderNodeOps self = reinterpret_cast<Ark_BuilderNodeOps>(thisPtr);
        return GetAccessors()->getBuilderNodeOpsAccessor()->setRootFrameNodeInBuilderNode(self, node);
}
KOALA_INTEROP_DIRECT_2(BuilderNodeOps_setRootFrameNodeInBuilderNode, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_CalendarPickerDialog_construct() {
        return GetAccessors()->getCalendarPickerDialogAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(CalendarPickerDialog_construct, Ark_NativePointer)
Ark_NativePointer impl_CalendarPickerDialog_getFinalizer() {
        return GetAccessors()->getCalendarPickerDialogAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CalendarPickerDialog_getFinalizer, Ark_NativePointer)
void impl_CalendarPickerDialog_show(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CalendarDialogOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = CalendarDialogOptions_serializer::read(thisDeserializer);
        }
        Opt_CalendarDialogOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getCalendarPickerDialogAccessor()->show(static_cast<Opt_CalendarDialogOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(CalendarPickerDialog_show, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CanvasGradient_construct() {
        return GetAccessors()->getCanvasGradientAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(CanvasGradient_construct, Ark_NativePointer)
Ark_NativePointer impl_CanvasGradient_getFinalizer() {
        return GetAccessors()->getCanvasGradientAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CanvasGradient_getFinalizer, Ark_NativePointer)
void impl_CanvasGradient_addColorStop(Ark_NativePointer thisPtr, KDouble offset, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasGradient self = reinterpret_cast<Ark_CanvasGradient>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 colorValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_ColorMetrics colorValueTempTmpBuf = {};
        colorValueTempTmpBuf.selector = colorValueTempTmpBufUnionSelector;
        if (colorValueTempTmpBufUnionSelector == 0) {
            colorValueTempTmpBuf.selector = 0;
            colorValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (colorValueTempTmpBufUnionSelector == 1) {
            colorValueTempTmpBuf.selector = 1;
            colorValueTempTmpBuf.value1 = static_cast<Ark_ColorMetrics>(ColorMetrics_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for colorValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_ColorMetrics colorValueTemp = static_cast<Ark_Union_String_ColorMetrics>(colorValueTempTmpBuf);;
        GetAccessors()->getCanvasGradientAccessor()->addColorStop(self, offset, static_cast<Ark_Union_String_ColorMetrics*>(&colorValueTemp));
}
KOALA_INTEROP_V4(CanvasGradient_addColorStop, Ark_NativePointer, KDouble, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CanvasPath_construct() {
        return GetAccessors()->getCanvasPathAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(CanvasPath_construct, Ark_NativePointer)
Ark_NativePointer impl_CanvasPath_getFinalizer() {
        return GetAccessors()->getCanvasPathAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CanvasPath_getFinalizer, Ark_NativePointer)
void impl_CanvasPath_arc(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y, KInteropNumber radius, KInteropNumber startAngle, KInteropNumber endAngle, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto counterclockwiseValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean counterclockwiseValueTempTmpBuf = {};
        counterclockwiseValueTempTmpBuf.tag = counterclockwiseValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((counterclockwiseValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            counterclockwiseValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean counterclockwiseValueTemp = counterclockwiseValueTempTmpBuf;;
        GetAccessors()->getCanvasPathAccessor()->arc(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y), (const Ark_Number*) (&radius), (const Ark_Number*) (&startAngle), (const Ark_Number*) (&endAngle), static_cast<Opt_Boolean*>(&counterclockwiseValueTemp));
}
KOALA_INTEROP_DIRECT_V8(CanvasPath_arc, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
void impl_CanvasPath_arcTo(Ark_NativePointer thisPtr, KInteropNumber x1, KInteropNumber y1, KInteropNumber x2, KInteropNumber y2, KInteropNumber radius) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        GetAccessors()->getCanvasPathAccessor()->arcTo(self, (const Ark_Number*) (&x1), (const Ark_Number*) (&y1), (const Ark_Number*) (&x2), (const Ark_Number*) (&y2), (const Ark_Number*) (&radius));
}
KOALA_INTEROP_DIRECT_V6(CanvasPath_arcTo, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasPath_bezierCurveTo(Ark_NativePointer thisPtr, KInteropNumber cp1x, KInteropNumber cp1y, KInteropNumber cp2x, KInteropNumber cp2y, KInteropNumber x, KInteropNumber y) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        GetAccessors()->getCanvasPathAccessor()->bezierCurveTo(self, (const Ark_Number*) (&cp1x), (const Ark_Number*) (&cp1y), (const Ark_Number*) (&cp2x), (const Ark_Number*) (&cp2y), (const Ark_Number*) (&x), (const Ark_Number*) (&y));
}
KOALA_INTEROP_DIRECT_V7(CanvasPath_bezierCurveTo, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasPath_closePath(Ark_NativePointer thisPtr) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        GetAccessors()->getCanvasPathAccessor()->closePath(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasPath_closePath, Ark_NativePointer)
void impl_CanvasPath_ellipse(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y, KInteropNumber radiusX, KInteropNumber radiusY, KInteropNumber rotation, KInteropNumber startAngle, KInteropNumber endAngle, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto counterclockwiseValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean counterclockwiseValueTempTmpBuf = {};
        counterclockwiseValueTempTmpBuf.tag = counterclockwiseValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((counterclockwiseValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            counterclockwiseValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean counterclockwiseValueTemp = counterclockwiseValueTempTmpBuf;;
        GetAccessors()->getCanvasPathAccessor()->ellipse(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y), (const Ark_Number*) (&radiusX), (const Ark_Number*) (&radiusY), (const Ark_Number*) (&rotation), (const Ark_Number*) (&startAngle), (const Ark_Number*) (&endAngle), static_cast<Opt_Boolean*>(&counterclockwiseValueTemp));
}
KOALA_INTEROP_DIRECT_V10(CanvasPath_ellipse, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
void impl_CanvasPath_lineTo(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        GetAccessors()->getCanvasPathAccessor()->lineTo(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y));
}
KOALA_INTEROP_DIRECT_V3(CanvasPath_lineTo, Ark_NativePointer, KInteropNumber, KInteropNumber)
void impl_CanvasPath_moveTo(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        GetAccessors()->getCanvasPathAccessor()->moveTo(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y));
}
KOALA_INTEROP_DIRECT_V3(CanvasPath_moveTo, Ark_NativePointer, KInteropNumber, KInteropNumber)
void impl_CanvasPath_quadraticCurveTo(Ark_NativePointer thisPtr, KInteropNumber cpx, KInteropNumber cpy, KInteropNumber x, KInteropNumber y) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        GetAccessors()->getCanvasPathAccessor()->quadraticCurveTo(self, (const Ark_Number*) (&cpx), (const Ark_Number*) (&cpy), (const Ark_Number*) (&x), (const Ark_Number*) (&y));
}
KOALA_INTEROP_DIRECT_V5(CanvasPath_quadraticCurveTo, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasPath_rect(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y, KInteropNumber w, KInteropNumber h) {
        Ark_CanvasPath self = reinterpret_cast<Ark_CanvasPath>(thisPtr);
        GetAccessors()->getCanvasPathAccessor()->rect(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y), (const Ark_Number*) (&w), (const Ark_Number*) (&h));
}
KOALA_INTEROP_DIRECT_V5(CanvasPath_rect, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_CanvasPattern_construct() {
        return GetAccessors()->getCanvasPatternAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(CanvasPattern_construct, Ark_NativePointer)
Ark_NativePointer impl_CanvasPattern_getFinalizer() {
        return GetAccessors()->getCanvasPatternAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CanvasPattern_getFinalizer, Ark_NativePointer)
void impl_CanvasPattern_setTransform(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasPattern self = reinterpret_cast<Ark_CanvasPattern>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto transformValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Matrix2D transformValueTempTmpBuf = {};
        transformValueTempTmpBuf.tag = transformValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((transformValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            transformValueTempTmpBuf.value = static_cast<Ark_Matrix2D>(Matrix2D_serializer::read(thisDeserializer));
        }
        Opt_Matrix2D transformValueTemp = transformValueTempTmpBuf;;
        GetAccessors()->getCanvasPatternAccessor()->setTransform(self, static_cast<Opt_Matrix2D*>(&transformValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasPattern_setTransform, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CanvasRenderer_construct() {
        return GetAccessors()->getCanvasRendererAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(CanvasRenderer_construct, Ark_NativePointer)
Ark_NativePointer impl_CanvasRenderer_getFinalizer() {
        return GetAccessors()->getCanvasRendererAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CanvasRenderer_getFinalizer, Ark_NativePointer)
void impl_CanvasRenderer_drawImage0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber dx, KInteropNumber dy) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 imageValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_ImageBitmap_PixelMap imageValueTempTmpBuf = {};
        imageValueTempTmpBuf.selector = imageValueTempTmpBufUnionSelector;
        if (imageValueTempTmpBufUnionSelector == 0) {
            imageValueTempTmpBuf.selector = 0;
            imageValueTempTmpBuf.value0 = static_cast<Ark_ImageBitmap>(ImageBitmap_serializer::read(thisDeserializer));
        } else if (imageValueTempTmpBufUnionSelector == 1) {
            imageValueTempTmpBuf.selector = 1;
            imageValueTempTmpBuf.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for imageValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_ImageBitmap_PixelMap imageValueTemp = static_cast<Ark_Union_ImageBitmap_PixelMap>(imageValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->drawImage0(self, static_cast<Ark_Union_ImageBitmap_PixelMap*>(&imageValueTemp), (const Ark_Number*) (&dx), (const Ark_Number*) (&dy));
}
KOALA_INTEROP_DIRECT_V5(CanvasRenderer_drawImage0, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_drawImage1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber dx, KInteropNumber dy, KInteropNumber dw, KInteropNumber dh) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 imageValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_ImageBitmap_PixelMap imageValueTempTmpBuf = {};
        imageValueTempTmpBuf.selector = imageValueTempTmpBufUnionSelector;
        if (imageValueTempTmpBufUnionSelector == 0) {
            imageValueTempTmpBuf.selector = 0;
            imageValueTempTmpBuf.value0 = static_cast<Ark_ImageBitmap>(ImageBitmap_serializer::read(thisDeserializer));
        } else if (imageValueTempTmpBufUnionSelector == 1) {
            imageValueTempTmpBuf.selector = 1;
            imageValueTempTmpBuf.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for imageValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_ImageBitmap_PixelMap imageValueTemp = static_cast<Ark_Union_ImageBitmap_PixelMap>(imageValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->drawImage1(self, static_cast<Ark_Union_ImageBitmap_PixelMap*>(&imageValueTemp), (const Ark_Number*) (&dx), (const Ark_Number*) (&dy), (const Ark_Number*) (&dw), (const Ark_Number*) (&dh));
}
KOALA_INTEROP_DIRECT_V7(CanvasRenderer_drawImage1, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_drawImage2(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber sx, KInteropNumber sy, KInteropNumber sw, KInteropNumber sh, KInteropNumber dx, KInteropNumber dy, KInteropNumber dw, KInteropNumber dh) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 imageValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_ImageBitmap_PixelMap imageValueTempTmpBuf = {};
        imageValueTempTmpBuf.selector = imageValueTempTmpBufUnionSelector;
        if (imageValueTempTmpBufUnionSelector == 0) {
            imageValueTempTmpBuf.selector = 0;
            imageValueTempTmpBuf.value0 = static_cast<Ark_ImageBitmap>(ImageBitmap_serializer::read(thisDeserializer));
        } else if (imageValueTempTmpBufUnionSelector == 1) {
            imageValueTempTmpBuf.selector = 1;
            imageValueTempTmpBuf.value1 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for imageValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_ImageBitmap_PixelMap imageValueTemp = static_cast<Ark_Union_ImageBitmap_PixelMap>(imageValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->drawImage2(self, static_cast<Ark_Union_ImageBitmap_PixelMap*>(&imageValueTemp), (const Ark_Number*) (&sx), (const Ark_Number*) (&sy), (const Ark_Number*) (&sw), (const Ark_Number*) (&sh), (const Ark_Number*) (&dx), (const Ark_Number*) (&dy), (const Ark_Number*) (&dw), (const Ark_Number*) (&dh));
}
KOALA_INTEROP_DIRECT_V11(CanvasRenderer_drawImage2, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_beginPath(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->beginPath(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_beginPath, Ark_NativePointer)
void impl_CanvasRenderer_clip0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto fillRuleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String fillRuleValueTempTmpBuf = {};
        fillRuleValueTempTmpBuf.tag = fillRuleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fillRuleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fillRuleValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String fillRuleValueTemp = fillRuleValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->clip0(self, static_cast<Opt_String*>(&fillRuleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_clip0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_clip1(Ark_NativePointer thisPtr, Ark_NativePointer path, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto fillRuleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String fillRuleValueTempTmpBuf = {};
        fillRuleValueTempTmpBuf.tag = fillRuleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fillRuleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fillRuleValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String fillRuleValueTemp = fillRuleValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->clip1(self, static_cast<Ark_Path2D>(path), static_cast<Opt_String*>(&fillRuleValueTemp));
}
KOALA_INTEROP_DIRECT_V4(CanvasRenderer_clip1, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_fill0(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto fillRuleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String fillRuleValueTempTmpBuf = {};
        fillRuleValueTempTmpBuf.tag = fillRuleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fillRuleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fillRuleValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String fillRuleValueTemp = fillRuleValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->fill0(self, static_cast<Opt_String*>(&fillRuleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_fill0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_fill1(Ark_NativePointer thisPtr, Ark_NativePointer path, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto fillRuleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String fillRuleValueTempTmpBuf = {};
        fillRuleValueTempTmpBuf.tag = fillRuleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fillRuleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fillRuleValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String fillRuleValueTemp = fillRuleValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->fill1(self, static_cast<Ark_Path2D>(path), static_cast<Opt_String*>(&fillRuleValueTemp));
}
KOALA_INTEROP_DIRECT_V4(CanvasRenderer_fill1, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_stroke(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto pathValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Path2D pathValueTempTmpBuf = {};
        pathValueTempTmpBuf.tag = pathValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((pathValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            pathValueTempTmpBuf.value = static_cast<Ark_Path2D>(Path2D_serializer::read(thisDeserializer));
        }
        Opt_Path2D pathValueTemp = pathValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->stroke(self, static_cast<Opt_Path2D*>(&pathValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_stroke, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CanvasRenderer_createLinearGradient(Ark_NativePointer thisPtr, KInteropNumber x0, KInteropNumber y0, KInteropNumber x1, KInteropNumber y1) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->createLinearGradient(self, (const Ark_Number*) (&x0), (const Ark_Number*) (&y0), (const Ark_Number*) (&x1), (const Ark_Number*) (&y1));
}
KOALA_INTEROP_DIRECT_5(CanvasRenderer_createLinearGradient, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
KInteropReturnBuffer impl_CanvasRenderer_createPattern(Ark_NativePointer thisPtr, Ark_NativePointer image, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto repetitionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String repetitionValueTempTmpBuf = {};
        repetitionValueTempTmpBuf.tag = repetitionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((repetitionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            repetitionValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String repetitionValueTemp = repetitionValueTempTmpBuf;;
        const auto &retValue = GetAccessors()->getCanvasRendererAccessor()->createPattern(self, static_cast<Ark_ImageBitmap>(image), static_cast<Opt_String*>(&repetitionValueTemp));
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            CanvasPattern_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_4(CanvasRenderer_createPattern, KInteropReturnBuffer, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CanvasRenderer_createRadialGradient(Ark_NativePointer thisPtr, KInteropNumber x0, KInteropNumber y0, KInteropNumber r0, KInteropNumber x1, KInteropNumber y1, KInteropNumber r1) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->createRadialGradient(self, (const Ark_Number*) (&x0), (const Ark_Number*) (&y0), (const Ark_Number*) (&r0), (const Ark_Number*) (&x1), (const Ark_Number*) (&y1), (const Ark_Number*) (&r1));
}
KOALA_INTEROP_DIRECT_7(CanvasRenderer_createRadialGradient, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_CanvasRenderer_createConicGradient(Ark_NativePointer thisPtr, KInteropNumber startAngle, KInteropNumber x, KInteropNumber y) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->createConicGradient(self, (const Ark_Number*) (&startAngle), (const Ark_Number*) (&x), (const Ark_Number*) (&y));
}
KOALA_INTEROP_DIRECT_4(CanvasRenderer_createConicGradient, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_CanvasRenderer_createImageData0(Ark_NativePointer thisPtr, KInteropNumber sw, KInteropNumber sh) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->createImageData0(self, (const Ark_Number*) (&sw), (const Ark_Number*) (&sh));
}
KOALA_INTEROP_DIRECT_3(CanvasRenderer_createImageData0, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_CanvasRenderer_createImageData1(Ark_NativePointer thisPtr, Ark_NativePointer imagedata) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->createImageData1(self, static_cast<Ark_ImageData>(imagedata));
}
KOALA_INTEROP_DIRECT_2(CanvasRenderer_createImageData1, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_CanvasRenderer_getImageData(Ark_NativePointer thisPtr, KInteropNumber sx, KInteropNumber sy, KInteropNumber sw, KInteropNumber sh) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getImageData(self, (const Ark_Number*) (&sx), (const Ark_Number*) (&sy), (const Ark_Number*) (&sw), (const Ark_Number*) (&sh));
}
KOALA_INTEROP_DIRECT_5(CanvasRenderer_getImageData, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_CanvasRenderer_getPixelMap(Ark_NativePointer thisPtr, KInteropNumber sx, KInteropNumber sy, KInteropNumber sw, KInteropNumber sh) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getPixelMap(self, (const Ark_Number*) (&sx), (const Ark_Number*) (&sy), (const Ark_Number*) (&sw), (const Ark_Number*) (&sh));
}
KOALA_INTEROP_DIRECT_5(CanvasRenderer_getPixelMap, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_putImageData0(Ark_NativePointer thisPtr, Ark_NativePointer imagedata, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 dxValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dxValueTempTmpBuf = {};
        dxValueTempTmpBuf.selector = dxValueTempTmpBufUnionSelector;
        if (dxValueTempTmpBufUnionSelector == 0) {
            dxValueTempTmpBuf.selector = 0;
            dxValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dxValueTempTmpBufUnionSelector == 1) {
            dxValueTempTmpBuf.selector = 1;
            dxValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dxValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dxValueTemp = static_cast<Ark_Union_Number_String>(dxValueTempTmpBuf);;
        const Ark_Int8 dyValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dyValueTempTmpBuf = {};
        dyValueTempTmpBuf.selector = dyValueTempTmpBufUnionSelector;
        if (dyValueTempTmpBufUnionSelector == 0) {
            dyValueTempTmpBuf.selector = 0;
            dyValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dyValueTempTmpBufUnionSelector == 1) {
            dyValueTempTmpBuf.selector = 1;
            dyValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dyValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dyValueTemp = static_cast<Ark_Union_Number_String>(dyValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->putImageData0(self, static_cast<Ark_ImageData>(imagedata), static_cast<Ark_Union_Number_String*>(&dxValueTemp), static_cast<Ark_Union_Number_String*>(&dyValueTemp));
}
KOALA_INTEROP_DIRECT_V4(CanvasRenderer_putImageData0, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_putImageData1(Ark_NativePointer thisPtr, Ark_NativePointer imagedata, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 dxValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dxValueTempTmpBuf = {};
        dxValueTempTmpBuf.selector = dxValueTempTmpBufUnionSelector;
        if (dxValueTempTmpBufUnionSelector == 0) {
            dxValueTempTmpBuf.selector = 0;
            dxValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dxValueTempTmpBufUnionSelector == 1) {
            dxValueTempTmpBuf.selector = 1;
            dxValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dxValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dxValueTemp = static_cast<Ark_Union_Number_String>(dxValueTempTmpBuf);;
        const Ark_Int8 dyValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dyValueTempTmpBuf = {};
        dyValueTempTmpBuf.selector = dyValueTempTmpBufUnionSelector;
        if (dyValueTempTmpBufUnionSelector == 0) {
            dyValueTempTmpBuf.selector = 0;
            dyValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dyValueTempTmpBufUnionSelector == 1) {
            dyValueTempTmpBuf.selector = 1;
            dyValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dyValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dyValueTemp = static_cast<Ark_Union_Number_String>(dyValueTempTmpBuf);;
        const Ark_Int8 dirtyXValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dirtyXValueTempTmpBuf = {};
        dirtyXValueTempTmpBuf.selector = dirtyXValueTempTmpBufUnionSelector;
        if (dirtyXValueTempTmpBufUnionSelector == 0) {
            dirtyXValueTempTmpBuf.selector = 0;
            dirtyXValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dirtyXValueTempTmpBufUnionSelector == 1) {
            dirtyXValueTempTmpBuf.selector = 1;
            dirtyXValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dirtyXValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dirtyXValueTemp = static_cast<Ark_Union_Number_String>(dirtyXValueTempTmpBuf);;
        const Ark_Int8 dirtyYValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dirtyYValueTempTmpBuf = {};
        dirtyYValueTempTmpBuf.selector = dirtyYValueTempTmpBufUnionSelector;
        if (dirtyYValueTempTmpBufUnionSelector == 0) {
            dirtyYValueTempTmpBuf.selector = 0;
            dirtyYValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dirtyYValueTempTmpBufUnionSelector == 1) {
            dirtyYValueTempTmpBuf.selector = 1;
            dirtyYValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dirtyYValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dirtyYValueTemp = static_cast<Ark_Union_Number_String>(dirtyYValueTempTmpBuf);;
        const Ark_Int8 dirtyWidthValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dirtyWidthValueTempTmpBuf = {};
        dirtyWidthValueTempTmpBuf.selector = dirtyWidthValueTempTmpBufUnionSelector;
        if (dirtyWidthValueTempTmpBufUnionSelector == 0) {
            dirtyWidthValueTempTmpBuf.selector = 0;
            dirtyWidthValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dirtyWidthValueTempTmpBufUnionSelector == 1) {
            dirtyWidthValueTempTmpBuf.selector = 1;
            dirtyWidthValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dirtyWidthValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dirtyWidthValueTemp = static_cast<Ark_Union_Number_String>(dirtyWidthValueTempTmpBuf);;
        const Ark_Int8 dirtyHeightValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_Number_String dirtyHeightValueTempTmpBuf = {};
        dirtyHeightValueTempTmpBuf.selector = dirtyHeightValueTempTmpBufUnionSelector;
        if (dirtyHeightValueTempTmpBufUnionSelector == 0) {
            dirtyHeightValueTempTmpBuf.selector = 0;
            dirtyHeightValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dirtyHeightValueTempTmpBufUnionSelector == 1) {
            dirtyHeightValueTempTmpBuf.selector = 1;
            dirtyHeightValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for dirtyHeightValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_Number_String dirtyHeightValueTemp = static_cast<Ark_Union_Number_String>(dirtyHeightValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->putImageData1(self, static_cast<Ark_ImageData>(imagedata), static_cast<Ark_Union_Number_String*>(&dxValueTemp), static_cast<Ark_Union_Number_String*>(&dyValueTemp), static_cast<Ark_Union_Number_String*>(&dirtyXValueTemp), static_cast<Ark_Union_Number_String*>(&dirtyYValueTemp), static_cast<Ark_Union_Number_String*>(&dirtyWidthValueTemp), static_cast<Ark_Union_Number_String*>(&dirtyHeightValueTemp));
}
KOALA_INTEROP_DIRECT_V4(CanvasRenderer_putImageData1, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_CanvasRenderer_getLineDash(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        const auto &retValue = GetAccessors()->getCanvasRendererAccessor()->getLineDash(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_Number retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeNumber(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(CanvasRenderer_getLineDash, KInteropReturnBuffer, Ark_NativePointer)
void impl_CanvasRenderer_setLineDash(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 segmentsValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_Number segmentsValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(segmentsValueTempTmpBuf)>::type,
        std::decay<decltype(*segmentsValueTempTmpBuf.array)>::type>(&segmentsValueTempTmpBuf, segmentsValueTempTmpBufLength);
        for (int segmentsValueTempTmpBufBufCounterI = 0; segmentsValueTempTmpBufBufCounterI < segmentsValueTempTmpBufLength; segmentsValueTempTmpBufBufCounterI++) {
            segmentsValueTempTmpBuf.array[segmentsValueTempTmpBufBufCounterI] = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Array_Number segmentsValueTemp = segmentsValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->setLineDash(self, static_cast<Array_Number*>(&segmentsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_setLineDash, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_clearRect(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y, KInteropNumber w, KInteropNumber h) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->clearRect(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y), (const Ark_Number*) (&w), (const Ark_Number*) (&h));
}
KOALA_INTEROP_DIRECT_V5(CanvasRenderer_clearRect, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_fillRect(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y, KInteropNumber w, KInteropNumber h) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->fillRect(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y), (const Ark_Number*) (&w), (const Ark_Number*) (&h));
}
KOALA_INTEROP_DIRECT_V5(CanvasRenderer_fillRect, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_strokeRect(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y, KInteropNumber w, KInteropNumber h) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->strokeRect(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y), (const Ark_Number*) (&w), (const Ark_Number*) (&h));
}
KOALA_INTEROP_DIRECT_V5(CanvasRenderer_strokeRect, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_restore(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->restore(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_restore, Ark_NativePointer)
void impl_CanvasRenderer_save(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->save(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_save, Ark_NativePointer)
void impl_CanvasRenderer_fillText(Ark_NativePointer thisPtr, const KStringPtr& text, KInteropNumber x, KInteropNumber y, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto maxWidthValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number maxWidthValueTempTmpBuf = {};
        maxWidthValueTempTmpBuf.tag = maxWidthValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((maxWidthValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            maxWidthValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number maxWidthValueTemp = maxWidthValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->fillText(self, (const Ark_String*) (&text), (const Ark_Number*) (&x), (const Ark_Number*) (&y), static_cast<Opt_Number*>(&maxWidthValueTemp));
}
KOALA_INTEROP_V6(CanvasRenderer_fillText, Ark_NativePointer, KStringPtr, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_CanvasRenderer_measureText(Ark_NativePointer thisPtr, const KStringPtr& text) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        const auto &retValue = GetAccessors()->getCanvasRendererAccessor()->measureText(self, (const Ark_String*) (&text));
        SerializerBase _retSerializer {};
        TextMetrics_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(CanvasRenderer_measureText, KInteropReturnBuffer, Ark_NativePointer, KStringPtr)
void impl_CanvasRenderer_strokeText(Ark_NativePointer thisPtr, const KStringPtr& text, KInteropNumber x, KInteropNumber y, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto maxWidthValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number maxWidthValueTempTmpBuf = {};
        maxWidthValueTempTmpBuf.tag = maxWidthValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((maxWidthValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            maxWidthValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number maxWidthValueTemp = maxWidthValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->strokeText(self, (const Ark_String*) (&text), (const Ark_Number*) (&x), (const Ark_Number*) (&y), static_cast<Opt_Number*>(&maxWidthValueTemp));
}
KOALA_INTEROP_V6(CanvasRenderer_strokeText, Ark_NativePointer, KStringPtr, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CanvasRenderer_getTransform(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getTransform(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getTransform, Ark_NativePointer, Ark_NativePointer)
void impl_CanvasRenderer_resetTransform(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->resetTransform(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_resetTransform, Ark_NativePointer)
void impl_CanvasRenderer_rotate(Ark_NativePointer thisPtr, KInteropNumber angle) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->rotate(self, (const Ark_Number*) (&angle));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_rotate, Ark_NativePointer, KInteropNumber)
void impl_CanvasRenderer_scale(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->scale(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_scale, Ark_NativePointer, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_setTransform0(Ark_NativePointer thisPtr, KInteropNumber a, KInteropNumber b, KInteropNumber c, KInteropNumber d, KInteropNumber e, KInteropNumber f) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setTransform0(self, (const Ark_Number*) (&a), (const Ark_Number*) (&b), (const Ark_Number*) (&c), (const Ark_Number*) (&d), (const Ark_Number*) (&e), (const Ark_Number*) (&f));
}
KOALA_INTEROP_DIRECT_V7(CanvasRenderer_setTransform0, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_setTransform1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto transformValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Matrix2D transformValueTempTmpBuf = {};
        transformValueTempTmpBuf.tag = transformValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((transformValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            transformValueTempTmpBuf.value = static_cast<Ark_Matrix2D>(Matrix2D_serializer::read(thisDeserializer));
        }
        Opt_Matrix2D transformValueTemp = transformValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->setTransform1(self, static_cast<Opt_Matrix2D*>(&transformValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_setTransform1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_transform(Ark_NativePointer thisPtr, KInteropNumber a, KInteropNumber b, KInteropNumber c, KInteropNumber d, KInteropNumber e, KInteropNumber f) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->transform(self, (const Ark_Number*) (&a), (const Ark_Number*) (&b), (const Ark_Number*) (&c), (const Ark_Number*) (&d), (const Ark_Number*) (&e), (const Ark_Number*) (&f));
}
KOALA_INTEROP_DIRECT_V7(CanvasRenderer_transform, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_translate(Ark_NativePointer thisPtr, KInteropNumber x, KInteropNumber y) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->translate(self, (const Ark_Number*) (&x), (const Ark_Number*) (&y));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_translate, Ark_NativePointer, KInteropNumber, KInteropNumber)
void impl_CanvasRenderer_setPixelMap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_image_PixelMap valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        }
        Opt_image_PixelMap valueValueTemp = valueValueTempTmpBuf;;
        GetAccessors()->getCanvasRendererAccessor()->setPixelMap(self, static_cast<Opt_image_PixelMap*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_setPixelMap, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderer_transferFromImageBitmap(Ark_NativePointer thisPtr, Ark_NativePointer bitmap) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->transferFromImageBitmap(self, static_cast<Ark_ImageBitmap>(bitmap));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_transferFromImageBitmap, Ark_NativePointer, Ark_NativePointer)
void impl_CanvasRenderer_saveLayer(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->saveLayer(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_saveLayer, Ark_NativePointer)
void impl_CanvasRenderer_restoreLayer(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->restoreLayer(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_restoreLayer, Ark_NativePointer)
void impl_CanvasRenderer_reset(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->reset(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_reset, Ark_NativePointer)
KInteropReturnBuffer impl_CanvasRenderer_getLetterSpacing(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        const auto &retValue = GetAccessors()->getCanvasRendererAccessor()->getLetterSpacing(self);
        SerializerBase _retSerializer {};
        if (retValue.selector == 0) {
            _retSerializer.writeInt8(0);
            const auto retValueForIdx0 = retValue.value0;
            LengthMetrics_serializer::write(_retSerializer, retValueForIdx0);
        } else if (retValue.selector == 1) {
            _retSerializer.writeInt8(1);
            const auto retValueForIdx1 = retValue.value1;
            _retSerializer.writeString(retValueForIdx1);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(CanvasRenderer_getLetterSpacing, KInteropReturnBuffer, Ark_NativePointer)
void impl_CanvasRenderer_setLetterSpacing(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 letterSpacingValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_LengthMetrics_String letterSpacingValueTempTmpBuf = {};
        letterSpacingValueTempTmpBuf.selector = letterSpacingValueTempTmpBufUnionSelector;
        if (letterSpacingValueTempTmpBufUnionSelector == 0) {
            letterSpacingValueTempTmpBuf.selector = 0;
            letterSpacingValueTempTmpBuf.value0 = static_cast<Ark_LengthMetrics>(LengthMetrics_serializer::read(thisDeserializer));
        } else if (letterSpacingValueTempTmpBufUnionSelector == 1) {
            letterSpacingValueTempTmpBuf.selector = 1;
            letterSpacingValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for letterSpacingValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_LengthMetrics_String letterSpacingValueTemp = static_cast<Ark_Union_LengthMetrics_String>(letterSpacingValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->setLetterSpacing(self, static_cast<Ark_Union_LengthMetrics_String*>(&letterSpacingValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_setLetterSpacing, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Number impl_CanvasRenderer_getGlobalAlpha(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getGlobalAlpha(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getGlobalAlpha, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderer_setGlobalAlpha(Ark_NativePointer thisPtr, KInteropNumber globalAlpha) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setGlobalAlpha(self, (const Ark_Number*) (&globalAlpha));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setGlobalAlpha, Ark_NativePointer, KInteropNumber)
Ark_String impl_CanvasRenderer_getGlobalCompositeOperation(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getGlobalCompositeOperation(self);
}
KOALA_INTEROP_1(CanvasRenderer_getGlobalCompositeOperation, KStringPtr, Ark_NativePointer)
void impl_CanvasRenderer_setGlobalCompositeOperation(Ark_NativePointer thisPtr, const KStringPtr& globalCompositeOperation) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setGlobalCompositeOperation(self, (const Ark_String*) (&globalCompositeOperation));
}
KOALA_INTEROP_V2(CanvasRenderer_setGlobalCompositeOperation, Ark_NativePointer, KStringPtr)
KInteropReturnBuffer impl_CanvasRenderer_getFillStyle(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        const auto &retValue = GetAccessors()->getCanvasRendererAccessor()->getFillStyle(self);
        SerializerBase _retSerializer {};
        if (retValue.selector == 0) {
            _retSerializer.writeInt8(0);
            const auto retValueForIdx0 = retValue.value0;
            _retSerializer.writeString(retValueForIdx0);
        } else if (retValue.selector == 1) {
            _retSerializer.writeInt8(1);
            const auto retValueForIdx1 = retValue.value1;
            _retSerializer.writeInt32(static_cast<Ark_Color>(retValueForIdx1));
        } else if (retValue.selector == 2) {
            _retSerializer.writeInt8(2);
            const auto retValueForIdx2 = retValue.value2;
            _retSerializer.writeInt32(retValueForIdx2);
        } else if (retValue.selector == 3) {
            _retSerializer.writeInt8(3);
            const auto retValueForIdx3 = retValue.value3;
            CanvasGradient_serializer::write(_retSerializer, retValueForIdx3);
        } else if (retValue.selector == 4) {
            _retSerializer.writeInt8(4);
            const auto retValueForIdx4 = retValue.value4;
            CanvasPattern_serializer::write(_retSerializer, retValueForIdx4);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(CanvasRenderer_getFillStyle, KInteropReturnBuffer, Ark_NativePointer)
void impl_CanvasRenderer_setFillStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 fillStyleValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern fillStyleValueTempTmpBuf = {};
        fillStyleValueTempTmpBuf.selector = fillStyleValueTempTmpBufUnionSelector;
        if (fillStyleValueTempTmpBufUnionSelector == 0) {
            fillStyleValueTempTmpBuf.selector = 0;
            fillStyleValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (fillStyleValueTempTmpBufUnionSelector == 1) {
            fillStyleValueTempTmpBuf.selector = 1;
            fillStyleValueTempTmpBuf.value1 = static_cast<Ark_Color>(thisDeserializer.readInt32());
        } else if (fillStyleValueTempTmpBufUnionSelector == 2) {
            fillStyleValueTempTmpBuf.selector = 2;
            fillStyleValueTempTmpBuf.value2 = thisDeserializer.readInt32();
        } else if (fillStyleValueTempTmpBufUnionSelector == 3) {
            fillStyleValueTempTmpBuf.selector = 3;
            fillStyleValueTempTmpBuf.value3 = static_cast<Ark_CanvasGradient>(CanvasGradient_serializer::read(thisDeserializer));
        } else if (fillStyleValueTempTmpBufUnionSelector == 4) {
            fillStyleValueTempTmpBuf.selector = 4;
            fillStyleValueTempTmpBuf.value4 = static_cast<Ark_CanvasPattern>(CanvasPattern_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for fillStyleValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern fillStyleValueTemp = static_cast<Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern>(fillStyleValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->setFillStyle(self, static_cast<Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern*>(&fillStyleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_setFillStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_CanvasRenderer_getStrokeStyle(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        const auto &retValue = GetAccessors()->getCanvasRendererAccessor()->getStrokeStyle(self);
        SerializerBase _retSerializer {};
        if (retValue.selector == 0) {
            _retSerializer.writeInt8(0);
            const auto retValueForIdx0 = retValue.value0;
            _retSerializer.writeString(retValueForIdx0);
        } else if (retValue.selector == 1) {
            _retSerializer.writeInt8(1);
            const auto retValueForIdx1 = retValue.value1;
            _retSerializer.writeInt32(static_cast<Ark_Color>(retValueForIdx1));
        } else if (retValue.selector == 2) {
            _retSerializer.writeInt8(2);
            const auto retValueForIdx2 = retValue.value2;
            _retSerializer.writeInt32(retValueForIdx2);
        } else if (retValue.selector == 3) {
            _retSerializer.writeInt8(3);
            const auto retValueForIdx3 = retValue.value3;
            CanvasGradient_serializer::write(_retSerializer, retValueForIdx3);
        } else if (retValue.selector == 4) {
            _retSerializer.writeInt8(4);
            const auto retValueForIdx4 = retValue.value4;
            CanvasPattern_serializer::write(_retSerializer, retValueForIdx4);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(CanvasRenderer_getStrokeStyle, KInteropReturnBuffer, Ark_NativePointer)
void impl_CanvasRenderer_setStrokeStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 strokeStyleValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern strokeStyleValueTempTmpBuf = {};
        strokeStyleValueTempTmpBuf.selector = strokeStyleValueTempTmpBufUnionSelector;
        if (strokeStyleValueTempTmpBufUnionSelector == 0) {
            strokeStyleValueTempTmpBuf.selector = 0;
            strokeStyleValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (strokeStyleValueTempTmpBufUnionSelector == 1) {
            strokeStyleValueTempTmpBuf.selector = 1;
            strokeStyleValueTempTmpBuf.value1 = static_cast<Ark_Color>(thisDeserializer.readInt32());
        } else if (strokeStyleValueTempTmpBufUnionSelector == 2) {
            strokeStyleValueTempTmpBuf.selector = 2;
            strokeStyleValueTempTmpBuf.value2 = thisDeserializer.readInt32();
        } else if (strokeStyleValueTempTmpBufUnionSelector == 3) {
            strokeStyleValueTempTmpBuf.selector = 3;
            strokeStyleValueTempTmpBuf.value3 = static_cast<Ark_CanvasGradient>(CanvasGradient_serializer::read(thisDeserializer));
        } else if (strokeStyleValueTempTmpBufUnionSelector == 4) {
            strokeStyleValueTempTmpBuf.selector = 4;
            strokeStyleValueTempTmpBuf.value4 = static_cast<Ark_CanvasPattern>(CanvasPattern_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for strokeStyleValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern strokeStyleValueTemp = static_cast<Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern>(strokeStyleValueTempTmpBuf);;
        GetAccessors()->getCanvasRendererAccessor()->setStrokeStyle(self, static_cast<Ark_Union_String_Color_I32_CanvasGradient_CanvasPattern*>(&strokeStyleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderer_setStrokeStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_String impl_CanvasRenderer_getFilter(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getFilter(self);
}
KOALA_INTEROP_1(CanvasRenderer_getFilter, KStringPtr, Ark_NativePointer)
void impl_CanvasRenderer_setFilter(Ark_NativePointer thisPtr, const KStringPtr& filter) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setFilter(self, (const Ark_String*) (&filter));
}
KOALA_INTEROP_V2(CanvasRenderer_setFilter, Ark_NativePointer, KStringPtr)
Ark_Boolean impl_CanvasRenderer_getImageSmoothingEnabled(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getImageSmoothingEnabled(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getImageSmoothingEnabled, Ark_Boolean, Ark_NativePointer)
void impl_CanvasRenderer_setImageSmoothingEnabled(Ark_NativePointer thisPtr, Ark_Boolean imageSmoothingEnabled) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setImageSmoothingEnabled(self, imageSmoothingEnabled);
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setImageSmoothingEnabled, Ark_NativePointer, Ark_Boolean)
void impl_CanvasRenderer_getImageSmoothingQuality(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->getImageSmoothingQuality(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_getImageSmoothingQuality, Ark_NativePointer)
void impl_CanvasRenderer_setImageSmoothingQuality(Ark_NativePointer thisPtr, const KStringPtr& imageSmoothingQuality) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setImageSmoothingQuality(self, (const Ark_String*) (&imageSmoothingQuality));
}
KOALA_INTEROP_V2(CanvasRenderer_setImageSmoothingQuality, Ark_NativePointer, KStringPtr)
void impl_CanvasRenderer_getLineCap(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->getLineCap(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_getLineCap, Ark_NativePointer)
void impl_CanvasRenderer_setLineCap(Ark_NativePointer thisPtr, const KStringPtr& lineCap) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setLineCap(self, (const Ark_String*) (&lineCap));
}
KOALA_INTEROP_V2(CanvasRenderer_setLineCap, Ark_NativePointer, KStringPtr)
Ark_Number impl_CanvasRenderer_getLineDashOffset(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getLineDashOffset(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getLineDashOffset, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderer_setLineDashOffset(Ark_NativePointer thisPtr, KInteropNumber lineDashOffset) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setLineDashOffset(self, (const Ark_Number*) (&lineDashOffset));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setLineDashOffset, Ark_NativePointer, KInteropNumber)
void impl_CanvasRenderer_getLineJoin(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->getLineJoin(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_getLineJoin, Ark_NativePointer)
void impl_CanvasRenderer_setLineJoin(Ark_NativePointer thisPtr, const KStringPtr& lineJoin) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setLineJoin(self, (const Ark_String*) (&lineJoin));
}
KOALA_INTEROP_V2(CanvasRenderer_setLineJoin, Ark_NativePointer, KStringPtr)
Ark_Number impl_CanvasRenderer_getLineWidth(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getLineWidth(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getLineWidth, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderer_setLineWidth(Ark_NativePointer thisPtr, KInteropNumber lineWidth) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setLineWidth(self, (const Ark_Number*) (&lineWidth));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setLineWidth, Ark_NativePointer, KInteropNumber)
Ark_Number impl_CanvasRenderer_getMiterLimit(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getMiterLimit(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getMiterLimit, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderer_setMiterLimit(Ark_NativePointer thisPtr, KInteropNumber miterLimit) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setMiterLimit(self, (const Ark_Number*) (&miterLimit));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setMiterLimit, Ark_NativePointer, KInteropNumber)
Ark_Number impl_CanvasRenderer_getShadowBlur(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getShadowBlur(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getShadowBlur, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderer_setShadowBlur(Ark_NativePointer thisPtr, KInteropNumber shadowBlur) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setShadowBlur(self, (const Ark_Number*) (&shadowBlur));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setShadowBlur, Ark_NativePointer, KInteropNumber)
Ark_String impl_CanvasRenderer_getShadowColor(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getShadowColor(self);
}
KOALA_INTEROP_1(CanvasRenderer_getShadowColor, KStringPtr, Ark_NativePointer)
void impl_CanvasRenderer_setShadowColor(Ark_NativePointer thisPtr, const KStringPtr& shadowColor) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setShadowColor(self, (const Ark_String*) (&shadowColor));
}
KOALA_INTEROP_V2(CanvasRenderer_setShadowColor, Ark_NativePointer, KStringPtr)
Ark_Number impl_CanvasRenderer_getShadowOffsetX(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getShadowOffsetX(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getShadowOffsetX, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderer_setShadowOffsetX(Ark_NativePointer thisPtr, KInteropNumber shadowOffsetX) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setShadowOffsetX(self, (const Ark_Number*) (&shadowOffsetX));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setShadowOffsetX, Ark_NativePointer, KInteropNumber)
Ark_Number impl_CanvasRenderer_getShadowOffsetY(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getShadowOffsetY(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderer_getShadowOffsetY, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderer_setShadowOffsetY(Ark_NativePointer thisPtr, KInteropNumber shadowOffsetY) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setShadowOffsetY(self, (const Ark_Number*) (&shadowOffsetY));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderer_setShadowOffsetY, Ark_NativePointer, KInteropNumber)
void impl_CanvasRenderer_getDirection(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->getDirection(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_getDirection, Ark_NativePointer)
void impl_CanvasRenderer_setDirection(Ark_NativePointer thisPtr, const KStringPtr& direction) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setDirection(self, (const Ark_String*) (&direction));
}
KOALA_INTEROP_V2(CanvasRenderer_setDirection, Ark_NativePointer, KStringPtr)
Ark_String impl_CanvasRenderer_getFont(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        return GetAccessors()->getCanvasRendererAccessor()->getFont(self);
}
KOALA_INTEROP_1(CanvasRenderer_getFont, KStringPtr, Ark_NativePointer)
void impl_CanvasRenderer_setFont(Ark_NativePointer thisPtr, const KStringPtr& font) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setFont(self, (const Ark_String*) (&font));
}
KOALA_INTEROP_V2(CanvasRenderer_setFont, Ark_NativePointer, KStringPtr)
void impl_CanvasRenderer_getTextAlign(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->getTextAlign(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_getTextAlign, Ark_NativePointer)
void impl_CanvasRenderer_setTextAlign(Ark_NativePointer thisPtr, const KStringPtr& textAlign) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setTextAlign(self, (const Ark_String*) (&textAlign));
}
KOALA_INTEROP_V2(CanvasRenderer_setTextAlign, Ark_NativePointer, KStringPtr)
void impl_CanvasRenderer_getTextBaseline(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->getTextBaseline(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderer_getTextBaseline, Ark_NativePointer)
void impl_CanvasRenderer_setTextBaseline(Ark_NativePointer thisPtr, const KStringPtr& textBaseline) {
        Ark_CanvasRenderer self = reinterpret_cast<Ark_CanvasRenderer>(thisPtr);
        GetAccessors()->getCanvasRendererAccessor()->setTextBaseline(self, (const Ark_String*) (&textBaseline));
}
KOALA_INTEROP_V2(CanvasRenderer_setTextBaseline, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_CanvasRenderingContext2D_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto settingsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RenderingContextSettings settingsValueTempTmpBuf = {};
        settingsValueTempTmpBuf.tag = settingsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((settingsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            settingsValueTempTmpBuf.value = static_cast<Ark_RenderingContextSettings>(RenderingContextSettings_serializer::read(thisDeserializer));
        }
        Opt_RenderingContextSettings settingsValueTemp = settingsValueTempTmpBuf;;
        const auto unitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetricsUnit unitValueTempTmpBuf = {};
        unitValueTempTmpBuf.tag = unitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unitValueTempTmpBuf.value = static_cast<Ark_LengthMetricsUnit>(thisDeserializer.readInt32());
        }
        Opt_LengthMetricsUnit unitValueTemp = unitValueTempTmpBuf;;
        return GetAccessors()->getCanvasRenderingContext2DAccessor()->construct(static_cast<Opt_RenderingContextSettings*>(&settingsValueTemp), static_cast<Opt_LengthMetricsUnit*>(&unitValueTemp));
}
KOALA_INTEROP_DIRECT_2(CanvasRenderingContext2D_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CanvasRenderingContext2D_getFinalizer() {
        return GetAccessors()->getCanvasRenderingContext2DAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CanvasRenderingContext2D_getFinalizer, Ark_NativePointer)
Ark_String impl_CanvasRenderingContext2D_toDataURL(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String typeValueTemp = typeValueTempTmpBuf;;
        const auto qualityValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number qualityValueTempTmpBuf = {};
        qualityValueTempTmpBuf.tag = qualityValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((qualityValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            qualityValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number qualityValueTemp = qualityValueTempTmpBuf;;
        return GetAccessors()->getCanvasRenderingContext2DAccessor()->toDataURL(self, static_cast<Opt_String*>(&typeValueTemp), static_cast<Opt_Number*>(&qualityValueTemp));
}
KOALA_INTEROP_3(CanvasRenderingContext2D_toDataURL, KStringPtr, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderingContext2D_startImageAnalyzer(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ImageAnalyzerConfig configValueTemp = ImageAnalyzerConfig_serializer::read(thisDeserializer);;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getCanvasRenderingContext2DAccessor()->startImageAnalyzer(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, static_cast<Ark_ImageAnalyzerConfig*>(&configValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(CanvasRenderingContext2D_startImageAnalyzer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderingContext2D_stopImageAnalyzer(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        GetAccessors()->getCanvasRenderingContext2DAccessor()->stopImageAnalyzer(self);
}
KOALA_INTEROP_DIRECT_V1(CanvasRenderingContext2D_stopImageAnalyzer, Ark_NativePointer)
void impl_CanvasRenderingContext2D_onAttach(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        VoidCallback callback_ValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};;
        GetAccessors()->getCanvasRenderingContext2DAccessor()->onAttach(self, static_cast<VoidCallback*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderingContext2D_onAttach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderingContext2D_offAttach(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getCanvasRenderingContext2DAccessor()->offAttach(self, static_cast<Opt_VoidCallback*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderingContext2D_offAttach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderingContext2D_onDetach(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        VoidCallback callback_ValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};;
        GetAccessors()->getCanvasRenderingContext2DAccessor()->onDetach(self, static_cast<VoidCallback*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderingContext2D_onDetach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_CanvasRenderingContext2D_offDetach(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getCanvasRenderingContext2DAccessor()->offDetach(self, static_cast<Opt_VoidCallback*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CanvasRenderingContext2D_offDetach, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Number impl_CanvasRenderingContext2D_getHeight(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        return GetAccessors()->getCanvasRenderingContext2DAccessor()->getHeight(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderingContext2D_getHeight, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderingContext2D_setHeight(Ark_NativePointer thisPtr, KInteropNumber height) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        GetAccessors()->getCanvasRenderingContext2DAccessor()->setHeight(self, (const Ark_Number*) (&height));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderingContext2D_setHeight, Ark_NativePointer, KInteropNumber)
Ark_Number impl_CanvasRenderingContext2D_getWidth(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        return GetAccessors()->getCanvasRenderingContext2DAccessor()->getWidth(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderingContext2D_getWidth, KInteropNumber, Ark_NativePointer)
void impl_CanvasRenderingContext2D_setWidth(Ark_NativePointer thisPtr, KInteropNumber width) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        GetAccessors()->getCanvasRenderingContext2DAccessor()->setWidth(self, (const Ark_Number*) (&width));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderingContext2D_setWidth, Ark_NativePointer, KInteropNumber)
Ark_NativePointer impl_CanvasRenderingContext2D_getCanvas(Ark_NativePointer thisPtr) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        return GetAccessors()->getCanvasRenderingContext2DAccessor()->getCanvas(self);
}
KOALA_INTEROP_DIRECT_1(CanvasRenderingContext2D_getCanvas, Ark_NativePointer, Ark_NativePointer)
void impl_CanvasRenderingContext2D_setCanvas(Ark_NativePointer thisPtr, Ark_NativePointer canvas) {
        Ark_CanvasRenderingContext2D self = reinterpret_cast<Ark_CanvasRenderingContext2D>(thisPtr);
        GetAccessors()->getCanvasRenderingContext2DAccessor()->setCanvas(self, static_cast<Ark_FrameNode>(canvas));
}
KOALA_INTEROP_DIRECT_V2(CanvasRenderingContext2D_setCanvas, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_ChildrenMainSize_construct(KDouble childDefaultSize) {
        return GetAccessors()->getChildrenMainSizeAccessor()->construct(childDefaultSize);
}
KOALA_INTEROP_1(ChildrenMainSize_construct, Ark_NativePointer, KDouble)
Ark_NativePointer impl_ChildrenMainSize_getFinalizer() {
        return GetAccessors()->getChildrenMainSizeAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ChildrenMainSize_getFinalizer, Ark_NativePointer)
void impl_ChildrenMainSize_splice(Ark_NativePointer thisPtr, Ark_Int32 start, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ChildrenMainSize self = reinterpret_cast<Ark_ChildrenMainSize>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto deleteCountValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 deleteCountValueTempTmpBuf = {};
        deleteCountValueTempTmpBuf.tag = deleteCountValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((deleteCountValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            deleteCountValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 deleteCountValueTemp = deleteCountValueTempTmpBuf;;
        const auto childrenSizeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Float64 childrenSizeValueTempTmpBuf = {};
        childrenSizeValueTempTmpBuf.tag = childrenSizeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((childrenSizeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 childrenSizeValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Float64 childrenSizeValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(childrenSizeValueTempTmpBuf_)>::type,
        std::decay<decltype(*childrenSizeValueTempTmpBuf_.array)>::type>(&childrenSizeValueTempTmpBuf_, childrenSizeValueTempTmpBuf_Length);
            for (int childrenSizeValueTempTmpBuf_BufCounterI = 0; childrenSizeValueTempTmpBuf_BufCounterI < childrenSizeValueTempTmpBuf_Length; childrenSizeValueTempTmpBuf_BufCounterI++) {
                childrenSizeValueTempTmpBuf_.array[childrenSizeValueTempTmpBuf_BufCounterI] = thisDeserializer.readFloat64();
            }
            childrenSizeValueTempTmpBuf.value = childrenSizeValueTempTmpBuf_;
        }
        Opt_Array_Float64 childrenSizeValueTemp = childrenSizeValueTempTmpBuf;;
        GetAccessors()->getChildrenMainSizeAccessor()->splice(self, start, static_cast<Opt_Int32*>(&deleteCountValueTemp), static_cast<Opt_Array_Float64*>(&childrenSizeValueTemp));
}
KOALA_INTEROP_DIRECT_V4(ChildrenMainSize_splice, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
void impl_ChildrenMainSize_update(Ark_NativePointer thisPtr, Ark_Int32 index, KDouble childSize) {
        Ark_ChildrenMainSize self = reinterpret_cast<Ark_ChildrenMainSize>(thisPtr);
        GetAccessors()->getChildrenMainSizeAccessor()->update(self, index, childSize);
}
KOALA_INTEROP_V3(ChildrenMainSize_update, Ark_NativePointer, Ark_Int32, KDouble)
Ark_Int32 impl_ChildrenMainSize_getChildDefaultSize(Ark_NativePointer thisPtr) {
        Ark_ChildrenMainSize self = reinterpret_cast<Ark_ChildrenMainSize>(thisPtr);
        return GetAccessors()->getChildrenMainSizeAccessor()->getChildDefaultSize(self);
}
KOALA_INTEROP_1(ChildrenMainSize_getChildDefaultSize, Ark_Int32, Ark_NativePointer)
void impl_ChildrenMainSize_setChildDefaultSize(Ark_NativePointer thisPtr, KDouble childDefaultSize) {
        Ark_ChildrenMainSize self = reinterpret_cast<Ark_ChildrenMainSize>(thisPtr);
        GetAccessors()->getChildrenMainSizeAccessor()->setChildDefaultSize(self, childDefaultSize);
}
KOALA_INTEROP_V2(ChildrenMainSize_setChildDefaultSize, Ark_NativePointer, KDouble)
Ark_NativePointer impl_ClickEvent_construct() {
        return GetAccessors()->getClickEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ClickEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_ClickEvent_getFinalizer() {
        return GetAccessors()->getClickEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ClickEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_ClickEvent_getDisplayX(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        return GetAccessors()->getClickEventAccessor()->getDisplayX(self);
}
KOALA_INTEROP_DIRECT_1(ClickEvent_getDisplayX, Ark_Int32, Ark_NativePointer)
void impl_ClickEvent_setDisplayX(Ark_NativePointer thisPtr, KDouble displayX) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        GetAccessors()->getClickEventAccessor()->setDisplayX(self, displayX);
}
KOALA_INTEROP_DIRECT_V2(ClickEvent_setDisplayX, Ark_NativePointer, KDouble)
Ark_Int32 impl_ClickEvent_getDisplayY(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        return GetAccessors()->getClickEventAccessor()->getDisplayY(self);
}
KOALA_INTEROP_DIRECT_1(ClickEvent_getDisplayY, Ark_Int32, Ark_NativePointer)
void impl_ClickEvent_setDisplayY(Ark_NativePointer thisPtr, KDouble displayY) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        GetAccessors()->getClickEventAccessor()->setDisplayY(self, displayY);
}
KOALA_INTEROP_DIRECT_V2(ClickEvent_setDisplayY, Ark_NativePointer, KDouble)
Ark_Int32 impl_ClickEvent_getWindowX(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        return GetAccessors()->getClickEventAccessor()->getWindowX(self);
}
KOALA_INTEROP_DIRECT_1(ClickEvent_getWindowX, Ark_Int32, Ark_NativePointer)
void impl_ClickEvent_setWindowX(Ark_NativePointer thisPtr, KDouble windowX) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        GetAccessors()->getClickEventAccessor()->setWindowX(self, windowX);
}
KOALA_INTEROP_DIRECT_V2(ClickEvent_setWindowX, Ark_NativePointer, KDouble)
Ark_Int32 impl_ClickEvent_getWindowY(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        return GetAccessors()->getClickEventAccessor()->getWindowY(self);
}
KOALA_INTEROP_DIRECT_1(ClickEvent_getWindowY, Ark_Int32, Ark_NativePointer)
void impl_ClickEvent_setWindowY(Ark_NativePointer thisPtr, KDouble windowY) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        GetAccessors()->getClickEventAccessor()->setWindowY(self, windowY);
}
KOALA_INTEROP_DIRECT_V2(ClickEvent_setWindowY, Ark_NativePointer, KDouble)
Ark_Int32 impl_ClickEvent_getX(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        return GetAccessors()->getClickEventAccessor()->getX(self);
}
KOALA_INTEROP_DIRECT_1(ClickEvent_getX, Ark_Int32, Ark_NativePointer)
void impl_ClickEvent_setX(Ark_NativePointer thisPtr, KDouble x) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        GetAccessors()->getClickEventAccessor()->setX(self, x);
}
KOALA_INTEROP_DIRECT_V2(ClickEvent_setX, Ark_NativePointer, KDouble)
Ark_Int32 impl_ClickEvent_getY(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        return GetAccessors()->getClickEventAccessor()->getY(self);
}
KOALA_INTEROP_DIRECT_1(ClickEvent_getY, Ark_Int32, Ark_NativePointer)
void impl_ClickEvent_setY(Ark_NativePointer thisPtr, KDouble y) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        GetAccessors()->getClickEventAccessor()->setY(self, y);
}
KOALA_INTEROP_DIRECT_V2(ClickEvent_setY, Ark_NativePointer, KDouble)
KInteropReturnBuffer impl_ClickEvent_getHand(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getClickEventAccessor()->getHand(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_InteractionHand>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ClickEvent_getHand, KInteropReturnBuffer, Ark_NativePointer)
void impl_ClickEvent_setHand(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto handValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_InteractionHand handValueTempTmpBuf = {};
        handValueTempTmpBuf.tag = handValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((handValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            handValueTempTmpBuf.value = static_cast<Ark_InteractionHand>(thisDeserializer.readInt32());
        }
        Opt_InteractionHand handValueTemp = handValueTempTmpBuf;;
        GetAccessors()->getClickEventAccessor()->setHand(self, static_cast<Opt_InteractionHand*>(&handValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ClickEvent_setHand, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ClickEvent_preventDefault(Ark_NativePointer thisPtr) {
        Ark_ClickEvent self = reinterpret_cast<Ark_ClickEvent>(thisPtr);
        GetAccessors()->getClickEventAccessor()->preventDefault(self);
}
KOALA_INTEROP_DIRECT_V1(ClickEvent_preventDefault, Ark_NativePointer)
Ark_NativePointer impl_ClientAuthenticationHandler_construct() {
        return GetAccessors()->getClientAuthenticationHandlerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ClientAuthenticationHandler_construct, Ark_NativePointer)
Ark_NativePointer impl_ClientAuthenticationHandler_getFinalizer() {
        return GetAccessors()->getClientAuthenticationHandlerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ClientAuthenticationHandler_getFinalizer, Ark_NativePointer)
void impl_ClientAuthenticationHandler_confirm0(Ark_NativePointer thisPtr, const KStringPtr& priKeyFile, const KStringPtr& certChainFile) {
        Ark_ClientAuthenticationHandler self = reinterpret_cast<Ark_ClientAuthenticationHandler>(thisPtr);
        GetAccessors()->getClientAuthenticationHandlerAccessor()->confirm0(self, (const Ark_String*) (&priKeyFile), (const Ark_String*) (&certChainFile));
}
KOALA_INTEROP_V3(ClientAuthenticationHandler_confirm0, Ark_NativePointer, KStringPtr, KStringPtr)
void impl_ClientAuthenticationHandler_confirm1(Ark_NativePointer thisPtr, const KStringPtr& authUri) {
        Ark_ClientAuthenticationHandler self = reinterpret_cast<Ark_ClientAuthenticationHandler>(thisPtr);
        GetAccessors()->getClientAuthenticationHandlerAccessor()->confirm1(self, (const Ark_String*) (&authUri));
}
KOALA_INTEROP_V2(ClientAuthenticationHandler_confirm1, Ark_NativePointer, KStringPtr)
void impl_ClientAuthenticationHandler_cancel(Ark_NativePointer thisPtr) {
        Ark_ClientAuthenticationHandler self = reinterpret_cast<Ark_ClientAuthenticationHandler>(thisPtr);
        GetAccessors()->getClientAuthenticationHandlerAccessor()->cancel(self);
}
KOALA_INTEROP_DIRECT_V1(ClientAuthenticationHandler_cancel, Ark_NativePointer)
void impl_ClientAuthenticationHandler_ignore(Ark_NativePointer thisPtr) {
        Ark_ClientAuthenticationHandler self = reinterpret_cast<Ark_ClientAuthenticationHandler>(thisPtr);
        GetAccessors()->getClientAuthenticationHandlerAccessor()->ignore(self);
}
KOALA_INTEROP_DIRECT_V1(ClientAuthenticationHandler_ignore, Ark_NativePointer)
Ark_NativePointer impl_ColorContent_construct() {
        return GetAccessors()->getColorContentAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ColorContent_construct, Ark_NativePointer)
Ark_NativePointer impl_ColorContent_getFinalizer() {
        return GetAccessors()->getColorContentAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ColorContent_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_ColorContent_getORIGIN() {
        return GetAccessors()->getColorContentAccessor()->getORIGIN();
}
KOALA_INTEROP_DIRECT_0(ColorContent_getORIGIN, Ark_NativePointer)
Ark_NativePointer impl_ColorFilter_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 valueValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_Number valueValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBuf)>::type,
        std::decay<decltype(*valueValueTempTmpBuf.array)>::type>(&valueValueTempTmpBuf, valueValueTempTmpBufLength);
        for (int valueValueTempTmpBufBufCounterI = 0; valueValueTempTmpBufBufCounterI < valueValueTempTmpBufLength; valueValueTempTmpBufBufCounterI++) {
            valueValueTempTmpBuf.array[valueValueTempTmpBufBufCounterI] = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Array_Number valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getColorFilterAccessor()->construct(static_cast<Array_Number*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(ColorFilter_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ColorFilter_getFinalizer() {
        return GetAccessors()->getColorFilterAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ColorFilter_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_CommonShape_construct() {
        return GetAccessors()->getCommonShapeAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(CommonShape_construct, Ark_NativePointer)
Ark_NativePointer impl_CommonShape_getFinalizer() {
        return GetAccessors()->getCommonShapeAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CommonShape_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_CommonShape_offset(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CommonShape self = reinterpret_cast<Ark_CommonShape>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Position offsetValueTemp = Position_serializer::read(thisDeserializer);;
        return GetAccessors()->getCommonShapeAccessor()->offset(self, static_cast<Ark_Position*>(&offsetValueTemp));
}
KOALA_INTEROP_DIRECT_3(CommonShape_offset, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CommonShape_fill(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CommonShape self = reinterpret_cast<Ark_CommonShape>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 colorValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceColor colorValueTempTmpBuf = {};
        colorValueTempTmpBuf.selector = colorValueTempTmpBufUnionSelector;
        if (colorValueTempTmpBufUnionSelector == 0) {
            colorValueTempTmpBuf.selector = 0;
            colorValueTempTmpBuf.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
        } else if (colorValueTempTmpBufUnionSelector == 1) {
            colorValueTempTmpBuf.selector = 1;
            colorValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (colorValueTempTmpBufUnionSelector == 2) {
            colorValueTempTmpBuf.selector = 2;
            colorValueTempTmpBuf.value2 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (colorValueTempTmpBufUnionSelector == 3) {
            colorValueTempTmpBuf.selector = 3;
            colorValueTempTmpBuf.value3 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for colorValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceColor colorValueTemp = static_cast<Ark_ResourceColor>(colorValueTempTmpBuf);;
        return GetAccessors()->getCommonShapeAccessor()->fill(self, static_cast<Ark_ResourceColor*>(&colorValueTemp));
}
KOALA_INTEROP_DIRECT_3(CommonShape_fill, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CommonShape_position(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CommonShape self = reinterpret_cast<Ark_CommonShape>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Position positionValueTemp = Position_serializer::read(thisDeserializer);;
        return GetAccessors()->getCommonShapeAccessor()->position(self, static_cast<Ark_Position*>(&positionValueTemp));
}
KOALA_INTEROP_DIRECT_3(CommonShape_position, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ConsoleMessage_construct() {
        return GetAccessors()->getConsoleMessageAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ConsoleMessage_construct, Ark_NativePointer)
Ark_NativePointer impl_ConsoleMessage_getFinalizer() {
        return GetAccessors()->getConsoleMessageAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ConsoleMessage_getFinalizer, Ark_NativePointer)
Ark_String impl_ConsoleMessage_getMessage(Ark_NativePointer thisPtr) {
        Ark_ConsoleMessage self = reinterpret_cast<Ark_ConsoleMessage>(thisPtr);
        return GetAccessors()->getConsoleMessageAccessor()->getMessage(self);
}
KOALA_INTEROP_1(ConsoleMessage_getMessage, KStringPtr, Ark_NativePointer)
Ark_String impl_ConsoleMessage_getSourceId(Ark_NativePointer thisPtr) {
        Ark_ConsoleMessage self = reinterpret_cast<Ark_ConsoleMessage>(thisPtr);
        return GetAccessors()->getConsoleMessageAccessor()->getSourceId(self);
}
KOALA_INTEROP_1(ConsoleMessage_getSourceId, KStringPtr, Ark_NativePointer)
Ark_Int32 impl_ConsoleMessage_getLineNumber(Ark_NativePointer thisPtr) {
        Ark_ConsoleMessage self = reinterpret_cast<Ark_ConsoleMessage>(thisPtr);
        return GetAccessors()->getConsoleMessageAccessor()->getLineNumber(self);
}
KOALA_INTEROP_DIRECT_1(ConsoleMessage_getLineNumber, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_ConsoleMessage_getMessageLevel(Ark_NativePointer thisPtr) {
        Ark_ConsoleMessage self = reinterpret_cast<Ark_ConsoleMessage>(thisPtr);
        return GetAccessors()->getConsoleMessageAccessor()->getMessageLevel(self);
}
KOALA_INTEROP_DIRECT_1(ConsoleMessage_getMessageLevel, Ark_Int32, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierButton(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        ButtonModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_ButtonConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ButtonModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_ButtonConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ButtonModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierButton(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<ButtonModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierButton, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierButton(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierButton(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierButton, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierCheckBox(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        CheckBoxModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_CheckBoxConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CheckBoxModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_CheckBoxConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CheckBoxModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierCheckBox(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<CheckBoxModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierCheckBox, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierCheckBox(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierCheckBox(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierCheckBox, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierDataPanel(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        DataPanelModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_DataPanelConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_DataPanelModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_DataPanelConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_DataPanelModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierDataPanel(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<DataPanelModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierDataPanel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierDataPanel(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierDataPanel(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierDataPanel, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierGauge(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        GaugeModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_GaugeConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_GaugeModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_GaugeConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_GaugeModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierGauge(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<GaugeModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierGauge, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierGauge(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierGauge(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierGauge, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierLoadingProgress(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        LoadingProgressModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_LoadingProgressConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_LoadingProgressModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_LoadingProgressConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_LoadingProgressModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierLoadingProgress(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<LoadingProgressModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierLoadingProgress, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierLoadingProgress(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierLoadingProgress(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierLoadingProgress, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierProgress(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        ProgressModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_ProgressConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ProgressModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_ProgressConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ProgressModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierProgress(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<ProgressModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierProgress, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierProgress(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierProgress(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierProgress, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierRadio(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        RadioModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_RadioConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RadioModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_RadioConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RadioModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierRadio(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<RadioModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierRadio, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierRadio(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierRadio(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierRadio, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierRating(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        RatingModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_RatingConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RatingModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_RatingConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RatingModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierRating(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<RatingModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierRating, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierRating(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierRating(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierRating, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierMenuItem(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        MenuItemModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_MenuItemConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_MenuItemModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_MenuItemConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_MenuItemModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierMenuItem(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<MenuItemModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierMenuItem, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierMenuItem(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierMenuItem(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierMenuItem, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierSlider(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        SliderModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_SliderConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_SliderModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_SliderConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_SliderModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierSlider(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<SliderModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierSlider, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierSlider(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierSlider(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierSlider, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierTextClock(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        TextClockModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_TextClockConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TextClockModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_TextClockConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TextClockModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierTextClock(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<TextClockModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierTextClock, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierTextClock(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierTextClock(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierTextClock, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierTextTimer(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        TextTimerModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_TextTimerConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TextTimerModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_TextTimerConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TextTimerModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierTextTimer(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<TextTimerModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierTextTimer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierTextTimer(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierTextTimer(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierTextTimer, Ark_NativePointer)
void impl_ContentModifierHelper_contentModifierToggle(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object contentModifierValueTemp = static_cast<Ark_ContentModifier>(thisDeserializer.readObject());;
        ToggleModifierBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_ToggleConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ToggleModifierBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Ark_ToggleConfiguration config, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ToggleModifierBuilder))))};;
        GetAccessors()->getContentModifierHelperAccessor()->contentModifierToggle(node, static_cast<Ark_Object*>(&contentModifierValueTemp), static_cast<ToggleModifierBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ContentModifierHelper_contentModifierToggle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ContentModifierHelper_resetContentModifierToggle(Ark_NativePointer node) {
        GetAccessors()->getContentModifierHelperAccessor()->resetContentModifierToggle(node);
}
KOALA_INTEROP_DIRECT_V1(ContentModifierHelper_resetContentModifierToggle, Ark_NativePointer)
Ark_NativePointer impl_ControllerHandler_construct() {
        return GetAccessors()->getControllerHandlerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ControllerHandler_construct, Ark_NativePointer)
Ark_NativePointer impl_ControllerHandler_getFinalizer() {
        return GetAccessors()->getControllerHandlerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ControllerHandler_getFinalizer, Ark_NativePointer)
void impl_ControllerHandler_setWebController(Ark_NativePointer thisPtr, Ark_NativePointer controller) {
        Ark_ControllerHandler self = reinterpret_cast<Ark_ControllerHandler>(thisPtr);
        GetAccessors()->getControllerHandlerAccessor()->setWebController(self, static_cast<Ark_webview_WebviewController>(controller));
}
KOALA_INTEROP_DIRECT_V2(ControllerHandler_setWebController, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_CustomDialogController_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_CustomDialogControllerOptions valueValueTemp = CustomDialogControllerOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getCustomDialogControllerAccessor()->construct(static_cast<Ark_CustomDialogControllerOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(CustomDialogController_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CustomDialogController_getFinalizer() {
        return GetAccessors()->getCustomDialogControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CustomDialogController_getFinalizer, Ark_NativePointer)
void impl_CustomDialogController_open(Ark_NativePointer thisPtr) {
        Ark_CustomDialogController self = reinterpret_cast<Ark_CustomDialogController>(thisPtr);
        GetAccessors()->getCustomDialogControllerAccessor()->open(self);
}
KOALA_INTEROP_DIRECT_V1(CustomDialogController_open, Ark_NativePointer)
void impl_CustomDialogController_close(Ark_NativePointer thisPtr) {
        Ark_CustomDialogController self = reinterpret_cast<Ark_CustomDialogController>(thisPtr);
        GetAccessors()->getCustomDialogControllerAccessor()->close(self);
}
KOALA_INTEROP_DIRECT_V1(CustomDialogController_close, Ark_NativePointer)
KInteropReturnBuffer impl_CustomDialogController_getExternalOptions(Ark_NativePointer thisPtr) {
        Ark_CustomDialogController self = reinterpret_cast<Ark_CustomDialogController>(thisPtr);
        const auto &retValue = GetAccessors()->getCustomDialogControllerAccessor()->getExternalOptions(self);
        SerializerBase _retSerializer {};
        CustomDialogControllerExternalOptions_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(CustomDialogController_getExternalOptions, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_CustomDialogControllerExtender_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_CustomDialogControllerOptionsExtender valueValueTemp = CustomDialogControllerOptionsExtender_serializer::read(thisDeserializer);;
        return GetAccessors()->getCustomDialogControllerExtenderAccessor()->construct(static_cast<Ark_CustomDialogControllerOptionsExtender*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(CustomDialogControllerExtender_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CustomDialogControllerExtender_getFinalizer() {
        return GetAccessors()->getCustomDialogControllerExtenderAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CustomDialogControllerExtender_getFinalizer, Ark_NativePointer)
void impl_CustomDialogControllerExtender_open(Ark_NativePointer thisPtr) {
        Ark_CustomDialogControllerExtender self = reinterpret_cast<Ark_CustomDialogControllerExtender>(thisPtr);
        GetAccessors()->getCustomDialogControllerExtenderAccessor()->open(self);
}
KOALA_INTEROP_DIRECT_V1(CustomDialogControllerExtender_open, Ark_NativePointer)
void impl_CustomDialogControllerExtender_close(Ark_NativePointer thisPtr) {
        Ark_CustomDialogControllerExtender self = reinterpret_cast<Ark_CustomDialogControllerExtender>(thisPtr);
        GetAccessors()->getCustomDialogControllerExtenderAccessor()->close(self);
}
KOALA_INTEROP_DIRECT_V1(CustomDialogControllerExtender_close, Ark_NativePointer)
void impl_CustomDialogControllerExtender_setOwnerView(Ark_NativePointer thisPtr, Ark_NativePointer content) {
        Ark_CustomDialogControllerExtender self = reinterpret_cast<Ark_CustomDialogControllerExtender>(thisPtr);
        GetAccessors()->getCustomDialogControllerExtenderAccessor()->setOwnerView(self, content);
}
KOALA_INTEROP_DIRECT_V2(CustomDialogControllerExtender_setOwnerView, Ark_NativePointer, Ark_NativePointer)
KInteropReturnBuffer impl_CustomDialogControllerExtender_getExternalOptions(Ark_NativePointer thisPtr) {
        Ark_CustomDialogControllerExtender self = reinterpret_cast<Ark_CustomDialogControllerExtender>(thisPtr);
        const auto &retValue = GetAccessors()->getCustomDialogControllerExtenderAccessor()->getExternalOptions(self);
        SerializerBase _retSerializer {};
        CustomDialogControllerExternalOptionsExtender_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(CustomDialogControllerExtender_getExternalOptions, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_CustomSpan_construct() {
        return GetAccessors()->getCustomSpanAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(CustomSpan_construct, Ark_NativePointer)
Ark_NativePointer impl_CustomSpan_getFinalizer() {
        return GetAccessors()->getCustomSpanAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(CustomSpan_getFinalizer, Ark_NativePointer)
void impl_CustomSpan_invalidate(Ark_NativePointer thisPtr) {
        Ark_CustomSpan self = reinterpret_cast<Ark_CustomSpan>(thisPtr);
        GetAccessors()->getCustomSpanAccessor()->invalidate(self);
}
KOALA_INTEROP_DIRECT_V1(CustomSpan_invalidate, Ark_NativePointer)
Ark_NativePointer impl_CustomSpan_getOnMeasure_callback(Ark_NativePointer thisPtr) {
        Ark_CustomSpan self = reinterpret_cast<Ark_CustomSpan>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getCustomSpanAccessor()->getOnMeasure_callback(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(CustomSpan_getOnMeasure_callback, Ark_NativePointer, Ark_NativePointer)
void impl_CustomSpan_setOnMeasure_callback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CustomSpan self = reinterpret_cast<Ark_CustomSpan>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_CustomSpanMeasureInfo_CustomSpanMetrics onMeasure_callbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_CustomSpanMeasureInfo measureInfo, const Callback_CustomSpanMetrics_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_CustomSpanMeasureInfo_CustomSpanMetrics)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_CustomSpanMeasureInfo measureInfo, const Callback_CustomSpanMetrics_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_CustomSpanMeasureInfo_CustomSpanMetrics))))};;
        GetAccessors()->getCustomSpanAccessor()->setOnMeasure_callback(self, static_cast<Callback_CustomSpanMeasureInfo_CustomSpanMetrics*>(&onMeasure_callbackValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CustomSpan_setOnMeasure_callback, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_CustomSpan_getOnDraw_callback(Ark_NativePointer thisPtr) {
        Ark_CustomSpan self = reinterpret_cast<Ark_CustomSpan>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getCustomSpanAccessor()->getOnDraw_callback(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(CustomSpan_getOnDraw_callback, Ark_NativePointer, Ark_NativePointer)
void impl_CustomSpan_setOnDraw_callback(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_CustomSpan self = reinterpret_cast<Ark_CustomSpan>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_DrawContext_CustomSpanDrawInfo_Void onDraw_callbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_DrawContext context, const Ark_CustomSpanDrawInfo drawInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_DrawContext_CustomSpanDrawInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_DrawContext context, const Ark_CustomSpanDrawInfo drawInfo)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_DrawContext_CustomSpanDrawInfo_Void))))};;
        GetAccessors()->getCustomSpanAccessor()->setOnDraw_callback(self, static_cast<Callback_DrawContext_CustomSpanDrawInfo_Void*>(&onDraw_callbackValueTemp));
}
KOALA_INTEROP_DIRECT_V3(CustomSpan_setOnDraw_callback, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DataResubmissionHandler_construct() {
        return GetAccessors()->getDataResubmissionHandlerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(DataResubmissionHandler_construct, Ark_NativePointer)
Ark_NativePointer impl_DataResubmissionHandler_getFinalizer() {
        return GetAccessors()->getDataResubmissionHandlerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DataResubmissionHandler_getFinalizer, Ark_NativePointer)
void impl_DataResubmissionHandler_resend(Ark_NativePointer thisPtr) {
        Ark_DataResubmissionHandler self = reinterpret_cast<Ark_DataResubmissionHandler>(thisPtr);
        GetAccessors()->getDataResubmissionHandlerAccessor()->resend(self);
}
KOALA_INTEROP_DIRECT_V1(DataResubmissionHandler_resend, Ark_NativePointer)
void impl_DataResubmissionHandler_cancel(Ark_NativePointer thisPtr) {
        Ark_DataResubmissionHandler self = reinterpret_cast<Ark_DataResubmissionHandler>(thisPtr);
        GetAccessors()->getDataResubmissionHandlerAccessor()->cancel(self);
}
KOALA_INTEROP_DIRECT_V1(DataResubmissionHandler_cancel, Ark_NativePointer)
Ark_NativePointer impl_DatePickerDialog_construct() {
        return GetAccessors()->getDatePickerDialogAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(DatePickerDialog_construct, Ark_NativePointer)
Ark_NativePointer impl_DatePickerDialog_getFinalizer() {
        return GetAccessors()->getDatePickerDialogAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DatePickerDialog_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_DecorationStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_DecorationStyleInterface valueValueTemp = DecorationStyleInterface_serializer::read(thisDeserializer);;
        return GetAccessors()->getDecorationStyleAccessor()->construct(static_cast<Ark_DecorationStyleInterface*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(DecorationStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DecorationStyle_getFinalizer() {
        return GetAccessors()->getDecorationStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DecorationStyle_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_DecorationStyle_getType(Ark_NativePointer thisPtr) {
        Ark_DecorationStyle self = reinterpret_cast<Ark_DecorationStyle>(thisPtr);
        return GetAccessors()->getDecorationStyleAccessor()->getType(self);
}
KOALA_INTEROP_DIRECT_1(DecorationStyle_getType, Ark_Int32, Ark_NativePointer)
KInteropReturnBuffer impl_DecorationStyle_getColor(Ark_NativePointer thisPtr) {
        Ark_DecorationStyle self = reinterpret_cast<Ark_DecorationStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getDecorationStyleAccessor()->getColor(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            if (retValueTmpValue.selector == 0) {
                _retSerializer.writeInt8(0);
                const auto retValueTmpValueForIdx0 = retValueTmpValue.value0;
                _retSerializer.writeInt32(static_cast<Ark_Color>(retValueTmpValueForIdx0));
            } else if (retValueTmpValue.selector == 1) {
                _retSerializer.writeInt8(1);
                const auto retValueTmpValueForIdx1 = retValueTmpValue.value1;
                _retSerializer.writeNumber(retValueTmpValueForIdx1);
            } else if (retValueTmpValue.selector == 2) {
                _retSerializer.writeInt8(2);
                const auto retValueTmpValueForIdx2 = retValueTmpValue.value2;
                _retSerializer.writeString(retValueTmpValueForIdx2);
            } else if (retValueTmpValue.selector == 3) {
                _retSerializer.writeInt8(3);
                const auto retValueTmpValueForIdx3 = retValueTmpValue.value3;
                Resource_serializer::write(_retSerializer, retValueTmpValueForIdx3);
            }
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(DecorationStyle_getColor, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_DecorationStyle_getStyle(Ark_NativePointer thisPtr) {
        Ark_DecorationStyle self = reinterpret_cast<Ark_DecorationStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getDecorationStyleAccessor()->getStyle(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_TextDecorationStyle>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(DecorationStyle_getStyle, KInteropReturnBuffer, Ark_NativePointer)
void impl_DialogExtender_showTimePickerDialog(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TimePickerDialogOptions optionsValueTemp = TimePickerDialogOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getDialogExtenderAccessor()->showTimePickerDialog(
            static_cast<Ark_TimePickerDialogOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(DialogExtender_showTimePickerDialog, KSerializerBuffer, int32_t)
void impl_DialogExtender_showTextPickerDialog(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TextPickerDialogOptions optionsValueTemp = TextPickerDialogOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getDialogExtenderAccessor()->showTextPickerDialog(
            static_cast<Ark_TextPickerDialogOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(DialogExtender_showTextPickerDialog, KSerializerBuffer, int32_t)
void impl_DialogExtender_showDatePickerDialog(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_DatePickerDialogOptions optionsValueTemp = DatePickerDialogOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getDialogExtenderAccessor()->showDatePickerDialog(
            static_cast<Ark_DatePickerDialogOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(DialogExtender_showDatePickerDialog, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DisappearSymbolEffect_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        return GetAccessors()->getDisappearSymbolEffectAccessor()->construct(static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_2(DisappearSymbolEffect_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DisappearSymbolEffect_getFinalizer() {
        return GetAccessors()->getDisappearSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DisappearSymbolEffect_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_DisappearSymbolEffect_getScope(Ark_NativePointer thisPtr) {
        Ark_DisappearSymbolEffect self = reinterpret_cast<Ark_DisappearSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getDisappearSymbolEffectAccessor()->getScope(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectScope>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(DisappearSymbolEffect_getScope, KInteropReturnBuffer, Ark_NativePointer)
void impl_DisappearSymbolEffect_setScope(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_DisappearSymbolEffect self = reinterpret_cast<Ark_DisappearSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        GetAccessors()->getDisappearSymbolEffectAccessor()->setScope(self, static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DisappearSymbolEffect_setScope, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DismissDialogAction_construct() {
        return GetAccessors()->getDismissDialogActionAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(DismissDialogAction_construct, Ark_NativePointer)
Ark_NativePointer impl_DismissDialogAction_getFinalizer() {
        return GetAccessors()->getDismissDialogActionAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DismissDialogAction_getFinalizer, Ark_NativePointer)
void impl_DismissDialogAction_dismiss(Ark_NativePointer thisPtr) {
        Ark_DismissDialogAction self = reinterpret_cast<Ark_DismissDialogAction>(thisPtr);
        GetAccessors()->getDismissDialogActionAccessor()->dismiss(self);
}
KOALA_INTEROP_DIRECT_V1(DismissDialogAction_dismiss, Ark_NativePointer)
Ark_Int32 impl_DismissDialogAction_getReason(Ark_NativePointer thisPtr) {
        Ark_DismissDialogAction self = reinterpret_cast<Ark_DismissDialogAction>(thisPtr);
        return GetAccessors()->getDismissDialogActionAccessor()->getReason(self);
}
KOALA_INTEROP_DIRECT_1(DismissDialogAction_getReason, Ark_Int32, Ark_NativePointer)
void impl_DismissDialogAction_setReason(Ark_NativePointer thisPtr, Ark_Int32 reason) {
        Ark_DismissDialogAction self = reinterpret_cast<Ark_DismissDialogAction>(thisPtr);
        GetAccessors()->getDismissDialogActionAccessor()->setReason(self, static_cast<Ark_DismissReason>(reason));
}
KOALA_INTEROP_DIRECT_V2(DismissDialogAction_setReason, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_DismissPopupAction_construct() {
        return GetAccessors()->getDismissPopupActionAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(DismissPopupAction_construct, Ark_NativePointer)
Ark_NativePointer impl_DismissPopupAction_getFinalizer() {
        return GetAccessors()->getDismissPopupActionAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DismissPopupAction_getFinalizer, Ark_NativePointer)
void impl_DismissPopupAction_dismiss(Ark_NativePointer thisPtr) {
        Ark_DismissPopupAction self = reinterpret_cast<Ark_DismissPopupAction>(thisPtr);
        GetAccessors()->getDismissPopupActionAccessor()->dismiss(self);
}
KOALA_INTEROP_DIRECT_V1(DismissPopupAction_dismiss, Ark_NativePointer)
Ark_Int32 impl_DismissPopupAction_getReason(Ark_NativePointer thisPtr) {
        Ark_DismissPopupAction self = reinterpret_cast<Ark_DismissPopupAction>(thisPtr);
        return GetAccessors()->getDismissPopupActionAccessor()->getReason(self);
}
KOALA_INTEROP_DIRECT_1(DismissPopupAction_getReason, Ark_Int32, Ark_NativePointer)
void impl_DismissPopupAction_setReason(Ark_NativePointer thisPtr, Ark_Int32 reason) {
        Ark_DismissPopupAction self = reinterpret_cast<Ark_DismissPopupAction>(thisPtr);
        GetAccessors()->getDismissPopupActionAccessor()->setReason(self, static_cast<Ark_DismissReason>(reason));
}
KOALA_INTEROP_DIRECT_V2(DismissPopupAction_setReason, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_DragEvent_construct() {
        return GetAccessors()->getDragEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(DragEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_DragEvent_getFinalizer() {
        return GetAccessors()->getDragEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DragEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_DragEvent_getDisplayX(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getDisplayX(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getDisplayX, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_DragEvent_getDisplayY(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getDisplayY(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getDisplayY, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_DragEvent_getWindowX(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getWindowX(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getWindowX, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_DragEvent_getWindowY(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getWindowY(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getWindowY, Ark_Int32, Ark_NativePointer)
void impl_DragEvent_setData(Ark_NativePointer thisPtr, Ark_NativePointer unifiedData) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        GetAccessors()->getDragEventAccessor()->setData(self, static_cast<Ark_unifiedDataChannel_UnifiedData>(unifiedData));
}
KOALA_INTEROP_DIRECT_V2(DragEvent_setData, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_DragEvent_getData(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getData(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getData, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_DragEvent_getSummary(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getSummary(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getSummary, Ark_NativePointer, Ark_NativePointer)
void impl_DragEvent_setResult(Ark_NativePointer thisPtr, Ark_Int32 dragResult) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        GetAccessors()->getDragEventAccessor()->setResult(self, static_cast<Ark_DragResult>(dragResult));
}
KOALA_INTEROP_DIRECT_V2(DragEvent_setResult, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_DragEvent_getResult(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getResult(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getResult, Ark_Int32, Ark_NativePointer)
KInteropReturnBuffer impl_DragEvent_getPreviewRect(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getDragEventAccessor()->getPreviewRect(self);
        SerializerBase _retSerializer {};
        Rectangle_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(DragEvent_getPreviewRect, KInteropReturnBuffer, Ark_NativePointer)
Ark_Int32 impl_DragEvent_getVelocityX(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getVelocityX(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getVelocityX, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_DragEvent_getVelocityY(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getVelocityY(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getVelocityY, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_DragEvent_getVelocity(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getVelocity(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getVelocity, Ark_Int32, Ark_NativePointer)
void impl_DragEvent_executeDropAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void customDropAnimationValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getDragEventAccessor()->executeDropAnimation(self, static_cast<Callback_Void*>(&customDropAnimationValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DragEvent_executeDropAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_DragEvent_enableInternalDropAnimation(Ark_NativePointer thisPtr, const KStringPtr& configuration) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        GetAccessors()->getDragEventAccessor()->enableInternalDropAnimation(self, (const Ark_String*) (&configuration));
}
KOALA_INTEROP_V2(DragEvent_enableInternalDropAnimation, Ark_NativePointer, KStringPtr)
Ark_Int32 impl_DragEvent_getDragBehavior(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getDragBehavior(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getDragBehavior, Ark_Int32, Ark_NativePointer)
void impl_DragEvent_setDragBehavior(Ark_NativePointer thisPtr, Ark_Int32 dragBehavior) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        GetAccessors()->getDragEventAccessor()->setDragBehavior(self, static_cast<Ark_DragBehavior>(dragBehavior));
}
KOALA_INTEROP_DIRECT_V2(DragEvent_setDragBehavior, Ark_NativePointer, Ark_Int32)
Ark_Boolean impl_DragEvent_getUseCustomDropAnimation(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        return GetAccessors()->getDragEventAccessor()->getUseCustomDropAnimation(self);
}
KOALA_INTEROP_DIRECT_1(DragEvent_getUseCustomDropAnimation, Ark_Boolean, Ark_NativePointer)
void impl_DragEvent_setUseCustomDropAnimation(Ark_NativePointer thisPtr, Ark_Boolean useCustomDropAnimation) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        GetAccessors()->getDragEventAccessor()->setUseCustomDropAnimation(self, useCustomDropAnimation);
}
KOALA_INTEROP_DIRECT_V2(DragEvent_setUseCustomDropAnimation, Ark_NativePointer, Ark_Boolean)
KInteropReturnBuffer impl_DragEvent_getGetModifierKeyState(Ark_NativePointer thisPtr) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getDragEventAccessor()->getGetModifierKeyState(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(DragEvent_getGetModifierKeyState, KInteropReturnBuffer, Ark_NativePointer)
void impl_DragEvent_setGetModifierKeyState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_DragEvent self = reinterpret_cast<Ark_DragEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto getModifierKeyStateValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ModifierKeyStateGetter getModifierKeyStateValueTempTmpBuf = {};
        getModifierKeyStateValueTempTmpBuf.tag = getModifierKeyStateValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((getModifierKeyStateValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            getModifierKeyStateValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Array_String keys, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ModifierKeyStateGetter)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Array_String keys, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ModifierKeyStateGetter))))};
        }
        Opt_ModifierKeyStateGetter getModifierKeyStateValueTemp = getModifierKeyStateValueTempTmpBuf;;
        GetAccessors()->getDragEventAccessor()->setGetModifierKeyState(self, static_cast<Opt_ModifierKeyStateGetter*>(&getModifierKeyStateValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DragEvent_setGetModifierKeyState, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DrawingRenderingContext_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto unitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetricsUnit unitValueTempTmpBuf = {};
        unitValueTempTmpBuf.tag = unitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unitValueTempTmpBuf.value = static_cast<Ark_LengthMetricsUnit>(thisDeserializer.readInt32());
        }
        Opt_LengthMetricsUnit unitValueTemp = unitValueTempTmpBuf;;
        return GetAccessors()->getDrawingRenderingContextAccessor()->construct(static_cast<Opt_LengthMetricsUnit*>(&unitValueTemp));
}
KOALA_INTEROP_DIRECT_2(DrawingRenderingContext_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_DrawingRenderingContext_getFinalizer() {
        return GetAccessors()->getDrawingRenderingContextAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(DrawingRenderingContext_getFinalizer, Ark_NativePointer)
void impl_DrawingRenderingContext_invalidate(Ark_NativePointer thisPtr) {
        Ark_DrawingRenderingContext self = reinterpret_cast<Ark_DrawingRenderingContext>(thisPtr);
        GetAccessors()->getDrawingRenderingContextAccessor()->invalidate(self);
}
KOALA_INTEROP_DIRECT_V1(DrawingRenderingContext_invalidate, Ark_NativePointer)
KInteropReturnBuffer impl_DrawingRenderingContext_getSize(Ark_NativePointer thisPtr) {
        Ark_DrawingRenderingContext self = reinterpret_cast<Ark_DrawingRenderingContext>(thisPtr);
        const auto &retValue = GetAccessors()->getDrawingRenderingContextAccessor()->getSize(self);
        SerializerBase _retSerializer {};
        Size_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(DrawingRenderingContext_getSize, KInteropReturnBuffer, Ark_NativePointer)
void impl_DrawingRenderingContext_setSize(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_DrawingRenderingContext self = reinterpret_cast<Ark_DrawingRenderingContext>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Size sizeValueTemp = Size_serializer::read(thisDeserializer);;
        GetAccessors()->getDrawingRenderingContextAccessor()->setSize(self, static_cast<Ark_Size*>(&sizeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(DrawingRenderingContext_setSize, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Boolean impl_EnvironmentBackend_isAccessibilityEnabled() {
        return GetAccessors()->getEnvironmentBackendAccessor()->isAccessibilityEnabled();
}
KOALA_INTEROP_DIRECT_0(EnvironmentBackend_isAccessibilityEnabled, Ark_Boolean)
Ark_Int32 impl_EnvironmentBackend_getColorMode() {
        return GetAccessors()->getEnvironmentBackendAccessor()->getColorMode();
}
KOALA_INTEROP_DIRECT_0(EnvironmentBackend_getColorMode, Ark_Int32)
Ark_Int32 impl_EnvironmentBackend_getFontScale() {
        return GetAccessors()->getEnvironmentBackendAccessor()->getFontScale();
}
KOALA_INTEROP_DIRECT_0(EnvironmentBackend_getFontScale, Ark_Int32)
Ark_Int32 impl_EnvironmentBackend_getFontWeightScale() {
        return GetAccessors()->getEnvironmentBackendAccessor()->getFontWeightScale();
}
KOALA_INTEROP_DIRECT_0(EnvironmentBackend_getFontWeightScale, Ark_Int32)
Ark_String impl_EnvironmentBackend_getLayoutDirection() {
        return GetAccessors()->getEnvironmentBackendAccessor()->getLayoutDirection();
}
KOALA_INTEROP_0(EnvironmentBackend_getLayoutDirection, KStringPtr)
Ark_String impl_EnvironmentBackend_getLanguageCode() {
        return GetAccessors()->getEnvironmentBackendAccessor()->getLanguageCode();
}
KOALA_INTEROP_0(EnvironmentBackend_getLanguageCode, KStringPtr)
void impl_EventEmulator_emitClickEvent(Ark_NativePointer node, Ark_NativePointer event) {
        GetAccessors()->getEventEmulatorAccessor()->emitClickEvent(node, static_cast<Ark_ClickEvent>(event));
}
KOALA_INTEROP_DIRECT_V2(EventEmulator_emitClickEvent, Ark_NativePointer, Ark_NativePointer)
void impl_EventEmulator_emitTextInputEvent(Ark_NativePointer node, const KStringPtr& text) {
        GetAccessors()->getEventEmulatorAccessor()->emitTextInputEvent(node, (const Ark_String*) (&text));
}
KOALA_INTEROP_V2(EventEmulator_emitTextInputEvent, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_EventResult_construct() {
        return GetAccessors()->getEventResultAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(EventResult_construct, Ark_NativePointer)
Ark_NativePointer impl_EventResult_getFinalizer() {
        return GetAccessors()->getEventResultAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(EventResult_getFinalizer, Ark_NativePointer)
void impl_EventResult_setGestureEventResult0(Ark_NativePointer thisPtr, Ark_Boolean result) {
        Ark_EventResult self = reinterpret_cast<Ark_EventResult>(thisPtr);
        GetAccessors()->getEventResultAccessor()->setGestureEventResult0(self, result);
}
KOALA_INTEROP_DIRECT_V2(EventResult_setGestureEventResult0, Ark_NativePointer, Ark_Boolean)
void impl_EventResult_setGestureEventResult1(Ark_NativePointer thisPtr, Ark_Boolean result, Ark_Boolean stopPropagation) {
        Ark_EventResult self = reinterpret_cast<Ark_EventResult>(thisPtr);
        GetAccessors()->getEventResultAccessor()->setGestureEventResult1(self, result, stopPropagation);
}
KOALA_INTEROP_DIRECT_V3(EventResult_setGestureEventResult1, Ark_NativePointer, Ark_Boolean, Ark_Boolean)
Ark_NativePointer impl_EventTargetInfo_construct() {
        return GetAccessors()->getEventTargetInfoAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(EventTargetInfo_construct, Ark_NativePointer)
Ark_NativePointer impl_EventTargetInfo_getFinalizer() {
        return GetAccessors()->getEventTargetInfoAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(EventTargetInfo_getFinalizer, Ark_NativePointer)
Ark_String impl_EventTargetInfo_getId(Ark_NativePointer thisPtr) {
        Ark_EventTargetInfo self = reinterpret_cast<Ark_EventTargetInfo>(thisPtr);
        return GetAccessors()->getEventTargetInfoAccessor()->getId(self);
}
KOALA_INTEROP_1(EventTargetInfo_getId, KStringPtr, Ark_NativePointer)
Ark_NativePointer impl_ExtendableComponent_construct() {
        return GetAccessors()->getExtendableComponentAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ExtendableComponent_construct, Ark_NativePointer)
Ark_NativePointer impl_ExtendableComponent_getFinalizer() {
        return GetAccessors()->getExtendableComponentAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ExtendableComponent_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_ExtendableComponent_getUIContext(Ark_NativePointer thisPtr) {
        Ark_ExtendableComponent self = reinterpret_cast<Ark_ExtendableComponent>(thisPtr);
        return GetAccessors()->getExtendableComponentAccessor()->getUIContext(self);
}
KOALA_INTEROP_DIRECT_1(ExtendableComponent_getUIContext, Ark_NativePointer, Ark_NativePointer)
Ark_Int32 impl_ExtendableComponent_getUniqueId(Ark_NativePointer thisPtr) {
        Ark_ExtendableComponent self = reinterpret_cast<Ark_ExtendableComponent>(thisPtr);
        return GetAccessors()->getExtendableComponentAccessor()->getUniqueId(self);
}
KOALA_INTEROP_DIRECT_1(ExtendableComponent_getUniqueId, Ark_Int32, Ark_NativePointer)
KInteropReturnBuffer impl_ExtendableComponent_queryNavDestinationInfo0(Ark_NativePointer thisPtr) {
        Ark_ExtendableComponent self = reinterpret_cast<Ark_ExtendableComponent>(thisPtr);
        const auto &retValue = GetAccessors()->getExtendableComponentAccessor()->queryNavDestinationInfo0(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            uiObserver_NavDestinationInfo_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ExtendableComponent_queryNavDestinationInfo0, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ExtendableComponent_queryNavDestinationInfo1(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ExtendableComponent self = reinterpret_cast<Ark_ExtendableComponent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isInnerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isInnerValueTempTmpBuf = {};
        isInnerValueTempTmpBuf.tag = isInnerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isInnerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isInnerValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isInnerValueTemp = isInnerValueTempTmpBuf;;
        const auto &retValue = GetAccessors()->getExtendableComponentAccessor()->queryNavDestinationInfo1(self, static_cast<Opt_Boolean*>(&isInnerValueTemp));
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            uiObserver_NavDestinationInfo_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(ExtendableComponent_queryNavDestinationInfo1, KInteropReturnBuffer, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_ExtendableComponent_queryNavigationInfo(Ark_NativePointer thisPtr) {
        Ark_ExtendableComponent self = reinterpret_cast<Ark_ExtendableComponent>(thisPtr);
        const auto &retValue = GetAccessors()->getExtendableComponentAccessor()->queryNavigationInfo(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            uiObserver_NavigationInfo_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ExtendableComponent_queryNavigationInfo, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ExtendableComponent_queryRouterPageInfo(Ark_NativePointer thisPtr) {
        Ark_ExtendableComponent self = reinterpret_cast<Ark_ExtendableComponent>(thisPtr);
        const auto &retValue = GetAccessors()->getExtendableComponentAccessor()->queryRouterPageInfo(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            uiObserver_RouterPageInfo_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ExtendableComponent_queryRouterPageInfo, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_FileSelectorParam_construct() {
        return GetAccessors()->getFileSelectorParamAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(FileSelectorParam_construct, Ark_NativePointer)
Ark_NativePointer impl_FileSelectorParam_getFinalizer() {
        return GetAccessors()->getFileSelectorParamAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(FileSelectorParam_getFinalizer, Ark_NativePointer)
Ark_String impl_FileSelectorParam_getTitle(Ark_NativePointer thisPtr) {
        Ark_FileSelectorParam self = reinterpret_cast<Ark_FileSelectorParam>(thisPtr);
        return GetAccessors()->getFileSelectorParamAccessor()->getTitle(self);
}
KOALA_INTEROP_1(FileSelectorParam_getTitle, KStringPtr, Ark_NativePointer)
Ark_Int32 impl_FileSelectorParam_getMode(Ark_NativePointer thisPtr) {
        Ark_FileSelectorParam self = reinterpret_cast<Ark_FileSelectorParam>(thisPtr);
        return GetAccessors()->getFileSelectorParamAccessor()->getMode(self);
}
KOALA_INTEROP_DIRECT_1(FileSelectorParam_getMode, Ark_Int32, Ark_NativePointer)
KInteropReturnBuffer impl_FileSelectorParam_getAcceptType(Ark_NativePointer thisPtr) {
        Ark_FileSelectorParam self = reinterpret_cast<Ark_FileSelectorParam>(thisPtr);
        const auto &retValue = GetAccessors()->getFileSelectorParamAccessor()->getAcceptType(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_String retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeString(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FileSelectorParam_getAcceptType, KInteropReturnBuffer, Ark_NativePointer)
Ark_Boolean impl_FileSelectorParam_isCapture(Ark_NativePointer thisPtr) {
        Ark_FileSelectorParam self = reinterpret_cast<Ark_FileSelectorParam>(thisPtr);
        return GetAccessors()->getFileSelectorParamAccessor()->isCapture(self);
}
KOALA_INTEROP_DIRECT_1(FileSelectorParam_isCapture, Ark_Boolean, Ark_NativePointer)
KInteropReturnBuffer impl_FileSelectorParam_getMimeTypes(Ark_NativePointer thisPtr) {
        Ark_FileSelectorParam self = reinterpret_cast<Ark_FileSelectorParam>(thisPtr);
        const auto &retValue = GetAccessors()->getFileSelectorParamAccessor()->getMimeTypes(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_String retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeString(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FileSelectorParam_getMimeTypes, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_FileSelectorResult_construct() {
        return GetAccessors()->getFileSelectorResultAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(FileSelectorResult_construct, Ark_NativePointer)
Ark_NativePointer impl_FileSelectorResult_getFinalizer() {
        return GetAccessors()->getFileSelectorResultAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(FileSelectorResult_getFinalizer, Ark_NativePointer)
void impl_FileSelectorResult_handleFileList(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_FileSelectorResult self = reinterpret_cast<Ark_FileSelectorResult>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 fileListValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_String fileListValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(fileListValueTempTmpBuf)>::type,
        std::decay<decltype(*fileListValueTempTmpBuf.array)>::type>(&fileListValueTempTmpBuf, fileListValueTempTmpBufLength);
        for (int fileListValueTempTmpBufBufCounterI = 0; fileListValueTempTmpBufBufCounterI < fileListValueTempTmpBufLength; fileListValueTempTmpBufBufCounterI++) {
            fileListValueTempTmpBuf.array[fileListValueTempTmpBufBufCounterI] = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Array_String fileListValueTemp = fileListValueTempTmpBuf;;
        GetAccessors()->getFileSelectorResultAccessor()->handleFileList(self, static_cast<Array_String*>(&fileListValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FileSelectorResult_handleFileList, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_FocusAxisEvent_construct() {
        return GetAccessors()->getFocusAxisEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(FocusAxisEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_FocusAxisEvent_getFinalizer() {
        return GetAccessors()->getFocusAxisEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(FocusAxisEvent_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_FocusAxisEvent_getAxisMap(Ark_NativePointer thisPtr) {
        Ark_FocusAxisEvent self = reinterpret_cast<Ark_FocusAxisEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getFocusAxisEventAccessor()->getAxisMap(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.size);
        for (int32_t i = 0; i < retValue.size; i++) {
            auto retValueKeyVar = retValue.keys[i];
            auto retValueValueVar = retValue.values[i];
            _retSerializer.writeInt32(static_cast<Ark_AxisModel>(retValueKeyVar));
            _retSerializer.writeFloat64(retValueValueVar);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FocusAxisEvent_getAxisMap, KInteropReturnBuffer, Ark_NativePointer)
void impl_FocusAxisEvent_setAxisMap(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_FocusAxisEvent self = reinterpret_cast<Ark_FocusAxisEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 axisMapValueTempTmpBufSizeVar = thisDeserializer.readInt32();
        Map_AxisModel_Float64 axisMapValueTempTmpBuf = {};
        thisDeserializer.resizeMap<Map_AxisModel_Float64, Ark_AxisModel, Ark_Float64>(&axisMapValueTempTmpBuf, axisMapValueTempTmpBufSizeVar);
        for (int axisMapValueTempTmpBufIVar = 0; axisMapValueTempTmpBufIVar < axisMapValueTempTmpBufSizeVar; axisMapValueTempTmpBufIVar++) {
            const Ark_AxisModel axisMapValueTempTmpBufKeyVar = static_cast<Ark_AxisModel>(thisDeserializer.readInt32());
            const Ark_Float64 axisMapValueTempTmpBufValueVar = thisDeserializer.readFloat64();
            axisMapValueTempTmpBuf.keys[axisMapValueTempTmpBufIVar] = axisMapValueTempTmpBufKeyVar;
            axisMapValueTempTmpBuf.values[axisMapValueTempTmpBufIVar] = axisMapValueTempTmpBufValueVar;
        }
        Map_AxisModel_Float64 axisMapValueTemp = axisMapValueTempTmpBuf;;
        GetAccessors()->getFocusAxisEventAccessor()->setAxisMap(self, static_cast<Map_AxisModel_Float64*>(&axisMapValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FocusAxisEvent_setAxisMap, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_FocusAxisEvent_getStopPropagation(Ark_NativePointer thisPtr) {
        Ark_FocusAxisEvent self = reinterpret_cast<Ark_FocusAxisEvent>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getFocusAxisEventAccessor()->getStopPropagation(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(FocusAxisEvent_getStopPropagation, Ark_NativePointer, Ark_NativePointer)
void impl_FocusAxisEvent_setStopPropagation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_FocusAxisEvent self = reinterpret_cast<Ark_FocusAxisEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void stopPropagationValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getFocusAxisEventAccessor()->setStopPropagation(self, static_cast<Callback_Void*>(&stopPropagationValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FocusAxisEvent_setStopPropagation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FocusController_requestFocus(const KStringPtr& key) {
        GetAccessors()->getFocusControllerAccessor()->requestFocus((const Ark_String*) (&key));
}
KOALA_INTEROP_V1(FocusController_requestFocus, KStringPtr)
void impl_ForEachOps_SyncOnMoveOps(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 additionalChildValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_NativePointer additionalChildValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(additionalChildValueTempTmpBuf)>::type,
        std::decay<decltype(*additionalChildValueTempTmpBuf.array)>::type>(&additionalChildValueTempTmpBuf, additionalChildValueTempTmpBufLength);
        for (int additionalChildValueTempTmpBufBufCounterI = 0; additionalChildValueTempTmpBufBufCounterI < additionalChildValueTempTmpBufLength; additionalChildValueTempTmpBufBufCounterI++) {
            additionalChildValueTempTmpBuf.array[additionalChildValueTempTmpBufBufCounterI] = thisDeserializer.readPointer();
        }
        Array_NativePointer additionalChildValueTemp = additionalChildValueTempTmpBuf;;
        const auto onMoveOpsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnMoveHandler onMoveOpsValueTempTmpBuf = {};
        onMoveOpsValueTempTmpBuf.tag = onMoveOpsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onMoveOpsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onMoveOpsValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnMoveHandler)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnMoveHandler))))};
        }
        Opt_OnMoveHandler onMoveOpsValueTemp = onMoveOpsValueTempTmpBuf;;
        const auto onMoveDragEventOpsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ItemDragEventHandler onMoveDragEventOpsValueTempTmpBuf = {};
        onMoveDragEventOpsValueTempTmpBuf.tag = onMoveDragEventOpsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onMoveDragEventOpsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onMoveDragEventOpsValueTempTmpBuf.value = ItemDragEventHandler_serializer::read(thisDeserializer);
        }
        Opt_ItemDragEventHandler onMoveDragEventOpsValueTemp = onMoveDragEventOpsValueTempTmpBuf;;
        GetAccessors()->getForEachOpsAccessor()->SyncOnMoveOps(node, static_cast<Array_NativePointer*>(&additionalChildValueTemp), static_cast<Opt_OnMoveHandler*>(&onMoveOpsValueTemp), static_cast<Opt_ItemDragEventHandler*>(&onMoveDragEventOpsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ForEachOps_SyncOnMoveOps, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_FrameNodeExtender_constructorFrameNode() {
        return GetAccessors()->getFrameNodeExtenderAccessor()->constructorFrameNode();
}
KOALA_INTEROP_DIRECT_0(FrameNodeExtender_constructorFrameNode, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getDestroy() {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getDestroy();
}
KOALA_INTEROP_DIRECT_0(FrameNodeExtender_getDestroy, Ark_NativePointer)
void impl_FrameNodeExtender_destroyPeer(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->destroyPeer(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_destroyPeer, Ark_NativePointer)
Ark_Boolean impl_FrameNodeExtender_isModifiable(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->isModifiable(peer);
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_isModifiable, Ark_Boolean, Ark_NativePointer)
void impl_FrameNodeExtender_appendChild(Ark_NativePointer peer, Ark_NativePointer child) {
        GetAccessors()->getFrameNodeExtenderAccessor()->appendChild(static_cast<Ark_FrameNode>(peer), static_cast<Ark_FrameNode>(child));
}
KOALA_INTEROP_DIRECT_V2(FrameNodeExtender_appendChild, Ark_NativePointer, Ark_NativePointer)
void impl_FrameNodeExtender_insertChildAfter(Ark_NativePointer peer, Ark_NativePointer child, Ark_NativePointer sibling) {
        GetAccessors()->getFrameNodeExtenderAccessor()->insertChildAfter(peer, child, sibling);
}
KOALA_INTEROP_DIRECT_V3(FrameNodeExtender_insertChildAfter, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
void impl_FrameNodeExtender_removeChild(Ark_NativePointer peer, Ark_NativePointer child) {
        GetAccessors()->getFrameNodeExtenderAccessor()->removeChild(static_cast<Ark_FrameNode>(peer), static_cast<Ark_FrameNode>(child));
}
KOALA_INTEROP_DIRECT_V2(FrameNodeExtender_removeChild, Ark_NativePointer, Ark_NativePointer)
void impl_FrameNodeExtender_clearChildren(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->clearChildren(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_clearChildren, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getChild(Ark_NativePointer peer, KInteropNumber index, KInteropNumber expandMode) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getChild(static_cast<Ark_FrameNode>(peer), (const Ark_Number*) (&index), (const Ark_Number*) (&expandMode));
}
KOALA_INTEROP_DIRECT_3(FrameNodeExtender_getChild, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_FrameNodeExtender_getFirstChild(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getFirstChild(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getFirstChild, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getNextSibling(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getNextSibling(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getNextSibling, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getPreviousSibling(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getPreviousSibling(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getPreviousSibling, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getParent(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getParent(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getParent, Ark_NativePointer, Ark_NativePointer)
Ark_Int32 impl_FrameNodeExtender_getChildrenCount(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getChildrenCount(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getChildrenCount, Ark_Int32, Ark_NativePointer)
void impl_FrameNodeExtender_dispose(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->dispose(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_dispose, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getPositionToWindow(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getPositionToWindow(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Position_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getPositionToWindow, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getPositionToParent(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getPositionToParent(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Position_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getPositionToParent, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getMeasuredSize(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getMeasuredSize(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Size_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getMeasuredSize, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getLayoutPosition(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getLayoutPosition(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Position_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getLayoutPosition, KInteropReturnBuffer, Ark_NativePointer)
Ark_String impl_FrameNodeExtender_getId(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getId(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_1(FrameNodeExtender_getId, KStringPtr, Ark_NativePointer)
Ark_Number impl_FrameNodeExtender_getUniqueId(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getUniqueId(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getUniqueId, KInteropNumber, Ark_NativePointer)
Ark_String impl_FrameNodeExtender_getNodeType(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getNodeType(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_1(FrameNodeExtender_getNodeType, KStringPtr, Ark_NativePointer)
Ark_Number impl_FrameNodeExtender_getOpacity(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getOpacity(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getOpacity, KInteropNumber, Ark_NativePointer)
Ark_Boolean impl_FrameNodeExtender_isVisible(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->isVisible(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_isVisible, Ark_Boolean, Ark_NativePointer)
Ark_Boolean impl_FrameNodeExtender_isClipToFrame(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->isClipToFrame(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_isClipToFrame, Ark_Boolean, Ark_NativePointer)
Ark_Boolean impl_FrameNodeExtender_isAttached(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->isAttached(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_isAttached, Ark_Boolean, Ark_NativePointer)
Ark_String impl_FrameNodeExtender_getInspectorInfo(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getInspectorInfo(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_1(FrameNodeExtender_getInspectorInfo, KStringPtr, Ark_NativePointer)
void impl_FrameNodeExtender_invalidate(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->invalidate(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_invalidate, Ark_NativePointer)
void impl_FrameNodeExtender_disposeTree(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->disposeTree(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_disposeTree, Ark_NativePointer)
Ark_Boolean impl_FrameNodeExtender_setCrossLanguageOptions(Ark_NativePointer peer, Ark_Boolean options) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->setCrossLanguageOptions(static_cast<Ark_FrameNode>(peer), options);
}
KOALA_INTEROP_DIRECT_2(FrameNodeExtender_setCrossLanguageOptions, Ark_Boolean, Ark_NativePointer, Ark_Boolean)
Ark_Boolean impl_FrameNodeExtender_getCrossLanguageOptions(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getCrossLanguageOptions(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getCrossLanguageOptions, Ark_Boolean, Ark_NativePointer)
void impl_FrameNodeExtender_setMeasuredSize(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Size sizeValueTemp = Size_serializer::read(thisDeserializer);;
        GetAccessors()->getFrameNodeExtenderAccessor()->setMeasuredSize(static_cast<Ark_FrameNode>(peer), static_cast<Ark_Size*>(&sizeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FrameNodeExtender_setMeasuredSize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FrameNodeExtender_setLayoutPosition(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Position positionValueTemp = Position_serializer::read(thisDeserializer);;
        GetAccessors()->getFrameNodeExtenderAccessor()->setLayoutPosition(static_cast<Ark_FrameNode>(peer), static_cast<Ark_Position*>(&positionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FrameNodeExtender_setLayoutPosition, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FrameNodeExtender_measure(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_LayoutConstraint constraintValueTemp = LayoutConstraint_serializer::read(thisDeserializer);;
        GetAccessors()->getFrameNodeExtenderAccessor()->measure(static_cast<Ark_FrameNode>(peer), static_cast<Ark_LayoutConstraint*>(&constraintValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FrameNodeExtender_measure, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FrameNodeExtender_layout(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Position positionValueTemp = Position_serializer::read(thisDeserializer);;
        GetAccessors()->getFrameNodeExtenderAccessor()->layout(static_cast<Ark_FrameNode>(peer), static_cast<Ark_Position*>(&positionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(FrameNodeExtender_layout, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_FrameNodeExtender_setNeedsLayout(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->setNeedsLayout(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_setNeedsLayout, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getPositionToScreen(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getPositionToScreen(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Position_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getPositionToScreen, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getPositionToWindowWithTransform(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getPositionToWindowWithTransform(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Position_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getPositionToWindowWithTransform, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getPositionToParentWithTransform(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getPositionToParentWithTransform(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Position_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getPositionToParentWithTransform, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_FrameNodeExtender_getPositionToScreenWithTransform(Ark_NativePointer peer) {
        const auto &retValue = GetAccessors()->getFrameNodeExtenderAccessor()->getPositionToScreenWithTransform(static_cast<Ark_FrameNode>(peer));
        SerializerBase _retSerializer {};
        Position_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(FrameNodeExtender_getPositionToScreenWithTransform, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getFrameNodeByKey(const KStringPtr& name) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getFrameNodeByKey((const Ark_String*) (&name));
}
KOALA_INTEROP_1(FrameNodeExtender_getFrameNodeByKey, Ark_NativePointer, KStringPtr)
Ark_Number impl_FrameNodeExtender_getIdByFrameNode(Ark_NativePointer node) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getIdByFrameNode(node);
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getIdByFrameNode, KInteropNumber, Ark_NativePointer)
void impl_FrameNodeExtender_moveTo(Ark_NativePointer peer, Ark_NativePointer targetParent, KInteropNumber index) {
        GetAccessors()->getFrameNodeExtenderAccessor()->moveTo(static_cast<Ark_FrameNode>(peer), static_cast<Ark_FrameNode>(targetParent), (const Ark_Number*) (&index));
}
KOALA_INTEROP_DIRECT_V3(FrameNodeExtender_moveTo, Ark_NativePointer, Ark_NativePointer, KInteropNumber)
Ark_Number impl_FrameNodeExtender_getFirstChildIndexWithoutExpand(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getFirstChildIndexWithoutExpand(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getFirstChildIndexWithoutExpand, KInteropNumber, Ark_NativePointer)
Ark_Number impl_FrameNodeExtender_getLastChildIndexWithoutExpand(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getLastChildIndexWithoutExpand(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getLastChildIndexWithoutExpand, KInteropNumber, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getAttachedFrameNodeById(const KStringPtr& id) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getAttachedFrameNodeById((const Ark_String*) (&id));
}
KOALA_INTEROP_1(FrameNodeExtender_getAttachedFrameNodeById, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_FrameNodeExtender_getFrameNodeById(KInteropNumber id) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getFrameNodeById((const Ark_Number*) (&id));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getFrameNodeById, Ark_NativePointer, KInteropNumber)
Ark_NativePointer impl_FrameNodeExtender_getFrameNodeByUniqueId(KInteropNumber id) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getFrameNodeByUniqueId((const Ark_Number*) (&id));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getFrameNodeByUniqueId, Ark_NativePointer, KInteropNumber)
void impl_FrameNodeExtender_reuse(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->reuse(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_reuse, Ark_NativePointer)
void impl_FrameNodeExtender_recycle(Ark_NativePointer peer) {
        GetAccessors()->getFrameNodeExtenderAccessor()->recycle(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(FrameNodeExtender_recycle, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getFrameNodePtr(Ark_NativePointer node) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getFrameNodePtr(static_cast<Ark_FrameNode>(node));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getFrameNodePtr, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_createTypedFrameNode(const KStringPtr& type) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->createTypedFrameNode((const Ark_String*) (&type));
}
KOALA_INTEROP_1(FrameNodeExtender_createTypedFrameNode, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_FrameNodeExtender_createByRawPtr(Ark_NativePointer peer, Ark_NativePointer pointer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->createByRawPtr(static_cast<Ark_FrameNode>(peer), static_cast<Ark_FrameNode>(pointer));
}
KOALA_INTEROP_DIRECT_2(FrameNodeExtender_createByRawPtr, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_unWrapRawPtr(Ark_NativePointer peer, Ark_NativePointer pointer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->unWrapRawPtr(static_cast<Ark_FrameNode>(peer), pointer);
}
KOALA_INTEROP_DIRECT_2(FrameNodeExtender_unWrapRawPtr, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getCommonEvent(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getCommonEvent(static_cast<Ark_FrameNode>(peer));
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getCommonEvent, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrameNodeExtender_getRenderNode(Ark_NativePointer peer) {
        return GetAccessors()->getFrameNodeExtenderAccessor()->getRenderNode(peer);
}
KOALA_INTEROP_DIRECT_1(FrameNodeExtender_getRenderNode, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_FrictionMotion_construct(KInteropNumber friction, KInteropNumber position, KInteropNumber velocity) {
        return GetAccessors()->getFrictionMotionAccessor()->construct((const Ark_Number*) (&friction), (const Ark_Number*) (&position), (const Ark_Number*) (&velocity));
}
KOALA_INTEROP_DIRECT_3(FrictionMotion_construct, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_FrictionMotion_getFinalizer() {
        return GetAccessors()->getFrictionMotionAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(FrictionMotion_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_FullScreenExitHandler_construct() {
        return GetAccessors()->getFullScreenExitHandlerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(FullScreenExitHandler_construct, Ark_NativePointer)
Ark_NativePointer impl_FullScreenExitHandler_getFinalizer() {
        return GetAccessors()->getFullScreenExitHandlerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(FullScreenExitHandler_getFinalizer, Ark_NativePointer)
void impl_FullScreenExitHandler_exitFullScreen(Ark_NativePointer thisPtr) {
        Ark_FullScreenExitHandler self = reinterpret_cast<Ark_FullScreenExitHandler>(thisPtr);
        GetAccessors()->getFullScreenExitHandlerAccessor()->exitFullScreen(self);
}
KOALA_INTEROP_DIRECT_V1(FullScreenExitHandler_exitFullScreen, Ark_NativePointer)
Ark_NativePointer impl_GestureEvent_construct() {
        return GetAccessors()->getGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(GestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_GestureEvent_getFinalizer() {
        return GetAccessors()->getGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(GestureEvent_getFinalizer, Ark_NativePointer)
Ark_Boolean impl_GestureEvent_getRepeat(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getRepeat(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getRepeat, Ark_Boolean, Ark_NativePointer)
void impl_GestureEvent_setRepeat(Ark_NativePointer thisPtr, Ark_Boolean repeat) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setRepeat(self, repeat);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setRepeat, Ark_NativePointer, Ark_Boolean)
KInteropReturnBuffer impl_GestureEvent_getFingerList(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getGestureEventAccessor()->getFingerList(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_FingerInfo retValueTmpElement = retValue.array[retValueCounterI];
            FingerInfo_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(GestureEvent_getFingerList, KInteropReturnBuffer, Ark_NativePointer)
void impl_GestureEvent_setFingerList(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 fingerListValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_FingerInfo fingerListValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(fingerListValueTempTmpBuf)>::type,
        std::decay<decltype(*fingerListValueTempTmpBuf.array)>::type>(&fingerListValueTempTmpBuf, fingerListValueTempTmpBufLength);
        for (int fingerListValueTempTmpBufBufCounterI = 0; fingerListValueTempTmpBufBufCounterI < fingerListValueTempTmpBufLength; fingerListValueTempTmpBufBufCounterI++) {
            fingerListValueTempTmpBuf.array[fingerListValueTempTmpBufBufCounterI] = FingerInfo_serializer::read(thisDeserializer);
        }
        Array_FingerInfo fingerListValueTemp = fingerListValueTempTmpBuf;;
        GetAccessors()->getGestureEventAccessor()->setFingerList(self, static_cast<Array_FingerInfo*>(&fingerListValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureEvent_setFingerList, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_GestureEvent_getOffsetX(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getOffsetX(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getOffsetX, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setOffsetX(Ark_NativePointer thisPtr, KDouble offsetX) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setOffsetX(self, offsetX);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setOffsetX, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getOffsetY(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getOffsetY(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getOffsetY, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setOffsetY(Ark_NativePointer thisPtr, KDouble offsetY) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setOffsetY(self, offsetY);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setOffsetY, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getAngle(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getAngle(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getAngle, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setAngle(Ark_NativePointer thisPtr, KDouble angle) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setAngle(self, angle);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setAngle, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getSpeed(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getSpeed(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getSpeed, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setSpeed(Ark_NativePointer thisPtr, KDouble speed) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setSpeed(self, speed);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setSpeed, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getScale(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getScale(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getScale, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setScale(Ark_NativePointer thisPtr, KDouble scale) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setScale(self, scale);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setScale, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getPinchCenterX(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getPinchCenterX(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getPinchCenterX, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setPinchCenterX(Ark_NativePointer thisPtr, KDouble pinchCenterX) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setPinchCenterX(self, pinchCenterX);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setPinchCenterX, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getPinchCenterY(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getPinchCenterY(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getPinchCenterY, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setPinchCenterY(Ark_NativePointer thisPtr, KDouble pinchCenterY) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setPinchCenterY(self, pinchCenterY);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setPinchCenterY, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getVelocityX(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getVelocityX(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getVelocityX, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setVelocityX(Ark_NativePointer thisPtr, KDouble velocityX) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setVelocityX(self, velocityX);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setVelocityX, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getVelocityY(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getVelocityY(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getVelocityY, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setVelocityY(Ark_NativePointer thisPtr, KDouble velocityY) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setVelocityY(self, velocityY);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setVelocityY, Ark_NativePointer, KDouble)
Ark_Int32 impl_GestureEvent_getVelocity(Ark_NativePointer thisPtr) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        return GetAccessors()->getGestureEventAccessor()->getVelocity(self);
}
KOALA_INTEROP_DIRECT_1(GestureEvent_getVelocity, Ark_Int32, Ark_NativePointer)
void impl_GestureEvent_setVelocity(Ark_NativePointer thisPtr, KDouble velocity) {
        Ark_GestureEvent self = reinterpret_cast<Ark_GestureEvent>(thisPtr);
        GetAccessors()->getGestureEventAccessor()->setVelocity(self, velocity);
}
KOALA_INTEROP_DIRECT_V2(GestureEvent_setVelocity, Ark_NativePointer, KDouble)
Ark_NativePointer impl_GestureOps_createTapGesture(KInteropNumber fingers, KInteropNumber count, KInteropNumber distanceThreshold, Ark_Boolean isFingerCountLimited) {
        return GetAccessors()->getGestureOpsAccessor()->createTapGesture((const Ark_Number*) (&fingers), (const Ark_Number*) (&count), (const Ark_Number*) (&distanceThreshold), isFingerCountLimited);
}
KOALA_INTEROP_DIRECT_4(GestureOps_createTapGesture, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, Ark_Boolean)
Ark_NativePointer impl_GestureOps_createLongPressGesture(KInteropNumber fingers, Ark_Boolean repeat, KInteropNumber duration, Ark_Boolean isFingerCountLimited) {
        return GetAccessors()->getGestureOpsAccessor()->createLongPressGesture((const Ark_Number*) (&fingers), repeat, (const Ark_Number*) (&duration), isFingerCountLimited);
}
KOALA_INTEROP_DIRECT_4(GestureOps_createLongPressGesture, Ark_NativePointer, KInteropNumber, Ark_Boolean, KInteropNumber, Ark_Boolean)
Ark_NativePointer impl_GestureOps_createPanGesture(KInteropNumber fingers, Ark_Int32 direction, KInteropNumber distance, Ark_Boolean isFingerCountLimited) {
        return GetAccessors()->getGestureOpsAccessor()->createPanGesture((const Ark_Number*) (&fingers), static_cast<Ark_PanDirection>(direction), (const Ark_Number*) (&distance), isFingerCountLimited);
}
KOALA_INTEROP_DIRECT_4(GestureOps_createPanGesture, Ark_NativePointer, KInteropNumber, Ark_Int32, KInteropNumber, Ark_Boolean)
Ark_NativePointer impl_GestureOps_createPanGestureWithPanGestureOptions(Ark_NativePointer panGestureOptions) {
        return GetAccessors()->getGestureOpsAccessor()->createPanGestureWithPanGestureOptions(panGestureOptions);
}
KOALA_INTEROP_DIRECT_1(GestureOps_createPanGestureWithPanGestureOptions, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_GestureOps_createPinchGesture(KInteropNumber fingers, KInteropNumber distance, Ark_Boolean isFingerCountLimited) {
        return GetAccessors()->getGestureOpsAccessor()->createPinchGesture((const Ark_Number*) (&fingers), (const Ark_Number*) (&distance), isFingerCountLimited);
}
KOALA_INTEROP_DIRECT_3(GestureOps_createPinchGesture, Ark_NativePointer, KInteropNumber, KInteropNumber, Ark_Boolean)
Ark_NativePointer impl_GestureOps_createRotationGesture(KInteropNumber fingers, KInteropNumber angle, Ark_Boolean isFingerCountLimited) {
        return GetAccessors()->getGestureOpsAccessor()->createRotationGesture((const Ark_Number*) (&fingers), (const Ark_Number*) (&angle), isFingerCountLimited);
}
KOALA_INTEROP_DIRECT_3(GestureOps_createRotationGesture, Ark_NativePointer, KInteropNumber, KInteropNumber, Ark_Boolean)
Ark_NativePointer impl_GestureOps_createSwipeGesture(KInteropNumber fingers, Ark_Int32 direction, KInteropNumber speed, Ark_Boolean isFingerCountLimited) {
        return GetAccessors()->getGestureOpsAccessor()->createSwipeGesture((const Ark_Number*) (&fingers), static_cast<Ark_SwipeDirection>(direction), (const Ark_Number*) (&speed), isFingerCountLimited);
}
KOALA_INTEROP_DIRECT_4(GestureOps_createSwipeGesture, Ark_NativePointer, KInteropNumber, Ark_Int32, KInteropNumber, Ark_Boolean)
Ark_NativePointer impl_GestureOps_createGestureGroup(Ark_Int32 mode) {
        return GetAccessors()->getGestureOpsAccessor()->createGestureGroup(static_cast<Ark_GestureMode>(mode));
}
KOALA_INTEROP_DIRECT_1(GestureOps_createGestureGroup, Ark_NativePointer, Ark_Int32)
void impl_GestureOps_setOnAction(Ark_NativePointer gesture, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_GestureEvent_Void onActionValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_GestureEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_GestureEvent_Void))))};;
        GetAccessors()->getGestureOpsAccessor()->setOnAction(gesture, static_cast<Callback_GestureEvent_Void*>(&onActionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureOps_setOnAction, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GestureOps_setOnActionStart(Ark_NativePointer gesture, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_GestureEvent_Void onActionStartValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_GestureEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_GestureEvent_Void))))};;
        GetAccessors()->getGestureOpsAccessor()->setOnActionStart(gesture, static_cast<Callback_GestureEvent_Void*>(&onActionStartValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureOps_setOnActionStart, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GestureOps_setOnActionUpdate(Ark_NativePointer gesture, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_GestureEvent_Void onActionUpdateValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_GestureEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_GestureEvent_Void))))};;
        GetAccessors()->getGestureOpsAccessor()->setOnActionUpdate(gesture, static_cast<Callback_GestureEvent_Void*>(&onActionUpdateValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureOps_setOnActionUpdate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GestureOps_setOnActionEnd(Ark_NativePointer gesture, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_GestureEvent_Void onActionEndValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_GestureEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_GestureEvent_Void))))};;
        GetAccessors()->getGestureOpsAccessor()->setOnActionEnd(gesture, static_cast<Callback_GestureEvent_Void*>(&onActionEndValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureOps_setOnActionEnd, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GestureOps_setOnActionCancel(Ark_NativePointer gesture, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_GestureEvent_Void onActionCancelValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_GestureEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_GestureEvent value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_GestureEvent_Void))))};;
        GetAccessors()->getGestureOpsAccessor()->setOnActionCancel(gesture, static_cast<Callback_GestureEvent_Void*>(&onActionCancelValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureOps_setOnActionCancel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GestureOps_setOnCancel(Ark_NativePointer gesture, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void onCancelValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getGestureOpsAccessor()->setOnCancel(gesture, static_cast<Callback_Void*>(&onCancelValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureOps_setOnCancel, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GestureOps_setGestureTag(Ark_NativePointer gesture, const KStringPtr& tag) {
        GetAccessors()->getGestureOpsAccessor()->setGestureTag(gesture, (const Ark_String*) (&tag));
}
KOALA_INTEROP_V2(GestureOps_setGestureTag, Ark_NativePointer, KStringPtr)
void impl_GestureOps_setAllowedTypes(Ark_NativePointer gesture, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 typesValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_SourceTool typesValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(typesValueTempTmpBuf)>::type,
        std::decay<decltype(*typesValueTempTmpBuf.array)>::type>(&typesValueTempTmpBuf, typesValueTempTmpBufLength);
        for (int typesValueTempTmpBufBufCounterI = 0; typesValueTempTmpBufBufCounterI < typesValueTempTmpBufLength; typesValueTempTmpBufBufCounterI++) {
            typesValueTempTmpBuf.array[typesValueTempTmpBufBufCounterI] = static_cast<Ark_SourceTool>(thisDeserializer.readInt32());
        }
        Array_SourceTool typesValueTemp = typesValueTempTmpBuf;;
        GetAccessors()->getGestureOpsAccessor()->setAllowedTypes(gesture, static_cast<Array_SourceTool*>(&typesValueTemp));
}
KOALA_INTEROP_DIRECT_V3(GestureOps_setAllowedTypes, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_GestureOps_addGestureToNode(Ark_NativePointer node, KInteropNumber priority, Ark_Int32 mask, Ark_NativePointer gesture, Ark_Boolean isModifier) {
        GetAccessors()->getGestureOpsAccessor()->addGestureToNode(node, (const Ark_Number*) (&priority), static_cast<Ark_GestureMask>(mask), gesture, isModifier);
}
KOALA_INTEROP_DIRECT_V5(GestureOps_addGestureToNode, Ark_NativePointer, KInteropNumber, Ark_Int32, Ark_NativePointer, Ark_Boolean)
void impl_GestureOps_addGestureToGroup(Ark_NativePointer group, Ark_NativePointer gesture) {
        GetAccessors()->getGestureOpsAccessor()->addGestureToGroup(group, gesture);
}
KOALA_INTEROP_DIRECT_V2(GestureOps_addGestureToGroup, Ark_NativePointer, Ark_NativePointer)
void impl_GestureOps_removeGestureByTag(Ark_NativePointer node, const KStringPtr& tag) {
        GetAccessors()->getGestureOpsAccessor()->removeGestureByTag(node, (const Ark_String*) (&tag));
}
KOALA_INTEROP_V2(GestureOps_removeGestureByTag, Ark_NativePointer, KStringPtr)
void impl_GestureOps_clearGestures(Ark_NativePointer node) {
        GetAccessors()->getGestureOpsAccessor()->clearGestures(node);
}
KOALA_INTEROP_DIRECT_V1(GestureOps_clearGestures, Ark_NativePointer)
Ark_Number impl_GestureOps_getGestureEventType(Ark_NativePointer event) {
        return GetAccessors()->getGestureOpsAccessor()->getGestureEventType(event);
}
KOALA_INTEROP_DIRECT_1(GestureOps_getGestureEventType, KInteropNumber, Ark_NativePointer)
Ark_Boolean impl_GestureOps_isScrollableComponent(Ark_NativePointer event) {
        return GetAccessors()->getGestureOpsAccessor()->isScrollableComponent(event);
}
KOALA_INTEROP_DIRECT_1(GestureOps_isScrollableComponent, Ark_Boolean, Ark_NativePointer)
Ark_NativePointer impl_GestureRecognizer_construct() {
        return GetAccessors()->getGestureRecognizerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(GestureRecognizer_construct, Ark_NativePointer)
Ark_NativePointer impl_GestureRecognizer_getFinalizer() {
        return GetAccessors()->getGestureRecognizerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(GestureRecognizer_getFinalizer, Ark_NativePointer)
Ark_String impl_GestureRecognizer_getTag(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->getTag(self);
}
KOALA_INTEROP_1(GestureRecognizer_getTag, KStringPtr, Ark_NativePointer)
Ark_Int32 impl_GestureRecognizer_getType(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->getType(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_getType, Ark_Int32, Ark_NativePointer)
Ark_Boolean impl_GestureRecognizer_isBuiltIn(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->isBuiltIn(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_isBuiltIn, Ark_Boolean, Ark_NativePointer)
void impl_GestureRecognizer_setEnabled(Ark_NativePointer thisPtr, Ark_Boolean isEnabled) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        GetAccessors()->getGestureRecognizerAccessor()->setEnabled(self, isEnabled);
}
KOALA_INTEROP_DIRECT_V2(GestureRecognizer_setEnabled, Ark_NativePointer, Ark_Boolean)
Ark_Boolean impl_GestureRecognizer_isEnabled(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->isEnabled(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_isEnabled, Ark_Boolean, Ark_NativePointer)
Ark_Int32 impl_GestureRecognizer_getState(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->getState(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_getState, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_GestureRecognizer_getEventTargetInfo(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->getEventTargetInfo(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_getEventTargetInfo, Ark_NativePointer, Ark_NativePointer)
Ark_Boolean impl_GestureRecognizer_isValid(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->isValid(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_isValid, Ark_Boolean, Ark_NativePointer)
Ark_Int32 impl_GestureRecognizer_getFingerCount(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->getFingerCount(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_getFingerCount, Ark_Int32, Ark_NativePointer)
Ark_Boolean impl_GestureRecognizer_isFingerCountLimit(Ark_NativePointer thisPtr) {
        Ark_GestureRecognizer self = reinterpret_cast<Ark_GestureRecognizer>(thisPtr);
        return GetAccessors()->getGestureRecognizerAccessor()->isFingerCountLimit(self);
}
KOALA_INTEROP_DIRECT_1(GestureRecognizer_isFingerCountLimit, Ark_Boolean, Ark_NativePointer)
Ark_NativePointer impl_GestureStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_GestureStyleInterface valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = GestureStyleInterface_serializer::read(thisDeserializer);
        }
        Opt_GestureStyleInterface valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getGestureStyleAccessor()->construct(static_cast<Opt_GestureStyleInterface*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(GestureStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_GestureStyle_getFinalizer() {
        return GetAccessors()->getGestureStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(GestureStyle_getFinalizer, Ark_NativePointer)
void impl_GlobalScope_ohos_arkui_componentSnapshot_get(const KStringPtr& id, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        AsyncCallback_image_PixelMap_Void callbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_image_PixelMap result)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AsyncCallback_image_PixelMap_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_image_PixelMap result)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AsyncCallback_image_PixelMap_Void))))};;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SnapshotOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SnapshotOptions_serializer::read(thisDeserializer);
        }
        Opt_SnapshotOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getGlobalScope_ohos_arkui_componentSnapshotAccessor()->get((const Ark_String*) (&id), static_cast<AsyncCallback_image_PixelMap_Void*>(&callbackValueTemp), static_cast<Opt_SnapshotOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_V3(GlobalScope_ohos_arkui_componentSnapshot_get, KStringPtr, KSerializerBuffer, int32_t)
void impl_GlobalScope_ohos_arkui_performanceMonitor_begin(const KStringPtr& scene, Ark_Int32 startInputType, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto noteValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String noteValueTempTmpBuf = {};
        noteValueTempTmpBuf.tag = noteValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((noteValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            noteValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String noteValueTemp = noteValueTempTmpBuf;;
        GetAccessors()->getGlobalScope_ohos_arkui_performanceMonitorAccessor()->begin((const Ark_String*) (&scene), static_cast<Ark_PerfMonitorActionType>(startInputType), static_cast<Opt_String*>(&noteValueTemp));
}
KOALA_INTEROP_V4(GlobalScope_ohos_arkui_performanceMonitor_begin, KStringPtr, Ark_Int32, KSerializerBuffer, int32_t)
void impl_GlobalScope_ohos_arkui_performanceMonitor_end(const KStringPtr& scene) {
        GetAccessors()->getGlobalScope_ohos_arkui_performanceMonitorAccessor()->end((const Ark_String*) (&scene));
}
KOALA_INTEROP_V1(GlobalScope_ohos_arkui_performanceMonitor_end, KStringPtr)
void impl_GlobalScope_ohos_arkui_performanceMonitor_recordInputEventTime(Ark_Int32 actionType, Ark_Int32 sourceType, KLong time) {
        GetAccessors()->getGlobalScope_ohos_arkui_performanceMonitorAccessor()->recordInputEventTime(static_cast<Ark_PerfMonitorActionType>(actionType), static_cast<Ark_PerfMonitorSourceType>(sourceType), time);
}
KOALA_INTEROP_DIRECT_V3(GlobalScope_ohos_arkui_performanceMonitor_recordInputEventTime, Ark_Int32, Ark_Int32, KLong)
void impl_GlobalScope_ohos_font_registerFont(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_font_FontOptions optionsValueTemp = font_FontOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getGlobalScope_ohos_fontAccessor()->registerFont(static_cast<Ark_font_FontOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(GlobalScope_ohos_font_registerFont, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_GlobalScope_ohos_font_getSystemFontList() {
        const auto &retValue = GetAccessors()->getGlobalScope_ohos_fontAccessor()->getSystemFontList();
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_String retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeString(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_0(GlobalScope_ohos_font_getSystemFontList, KInteropReturnBuffer)
KInteropReturnBuffer impl_GlobalScope_ohos_font_getFontByName(const KStringPtr& fontName) {
        const auto &retValue = GetAccessors()->getGlobalScope_ohos_fontAccessor()->getFontByName((const Ark_String*) (&fontName));
        SerializerBase _retSerializer {};
        font_FontInfo_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(GlobalScope_ohos_font_getFontByName, KInteropReturnBuffer, KStringPtr)
KInteropReturnBuffer impl_GlobalScope_ohos_font_getUIFontConfig() {
        const auto &retValue = GetAccessors()->getGlobalScope_ohos_fontAccessor()->getUIFontConfig();
        SerializerBase _retSerializer {};
        font_UIFontConfig_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_0(GlobalScope_ohos_font_getUIFontConfig, KInteropReturnBuffer)
Ark_Int32 impl_GlobalScope_ohos_measure_utils_measureText(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_MeasureOptions optionsValueTemp = MeasureOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getGlobalScope_ohos_measure_utilsAccessor()->measureText(static_cast<Ark_MeasureOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_2(GlobalScope_ohos_measure_utils_measureText, Ark_Int32, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_GlobalScope_ohos_measure_utils_measureTextSize(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_MeasureOptions optionsValueTemp = MeasureOptions_serializer::read(thisDeserializer);;
        const auto &retValue = GetAccessors()->getGlobalScope_ohos_measure_utilsAccessor()->measureTextSize(static_cast<Ark_MeasureOptions*>(&optionsValueTemp));
        SerializerBase _retSerializer {};
        SizeOptions_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(GlobalScope_ohos_measure_utils_measureTextSize, KInteropReturnBuffer, KSerializerBuffer, int32_t)
Ark_Boolean impl_GlobalScopeUicontextFontScale_isFollowingSystemFontScale() {
        return GetAccessors()->getGlobalScopeUicontextFontScaleAccessor()->isFollowingSystemFontScale();
}
KOALA_INTEROP_DIRECT_0(GlobalScopeUicontextFontScale_isFollowingSystemFontScale, Ark_Boolean)
Ark_Int32 impl_GlobalScopeUicontextFontScale_getMaxFontScale() {
        return GetAccessors()->getGlobalScopeUicontextFontScaleAccessor()->getMaxFontScale();
}
KOALA_INTEROP_0(GlobalScopeUicontextFontScale_getMaxFontScale, Ark_Int32)
void impl_GlobalScopeUicontextTextMenu_setMenuOptions(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TextMenuOptions optionsValueTemp = TextMenuOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getGlobalScopeUicontextTextMenuAccessor()->setMenuOptions(static_cast<Ark_TextMenuOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(GlobalScopeUicontextTextMenu_setMenuOptions, KSerializerBuffer, int32_t)
Ark_NativePointer impl_HierarchicalSymbolEffect_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto fillStyleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectFillStyle fillStyleValueTempTmpBuf = {};
        fillStyleValueTempTmpBuf.tag = fillStyleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fillStyleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fillStyleValueTempTmpBuf.value = static_cast<Ark_EffectFillStyle>(thisDeserializer.readInt32());
        }
        Opt_EffectFillStyle fillStyleValueTemp = fillStyleValueTempTmpBuf;;
        return GetAccessors()->getHierarchicalSymbolEffectAccessor()->construct(static_cast<Opt_EffectFillStyle*>(&fillStyleValueTemp));
}
KOALA_INTEROP_DIRECT_2(HierarchicalSymbolEffect_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_HierarchicalSymbolEffect_getFinalizer() {
        return GetAccessors()->getHierarchicalSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(HierarchicalSymbolEffect_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_HierarchicalSymbolEffect_getFillStyle(Ark_NativePointer thisPtr) {
        Ark_HierarchicalSymbolEffect self = reinterpret_cast<Ark_HierarchicalSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getHierarchicalSymbolEffectAccessor()->getFillStyle(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectFillStyle>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(HierarchicalSymbolEffect_getFillStyle, KInteropReturnBuffer, Ark_NativePointer)
void impl_HierarchicalSymbolEffect_setFillStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_HierarchicalSymbolEffect self = reinterpret_cast<Ark_HierarchicalSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto fillStyleValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectFillStyle fillStyleValueTempTmpBuf = {};
        fillStyleValueTempTmpBuf.tag = fillStyleValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((fillStyleValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            fillStyleValueTempTmpBuf.value = static_cast<Ark_EffectFillStyle>(thisDeserializer.readInt32());
        }
        Opt_EffectFillStyle fillStyleValueTemp = fillStyleValueTempTmpBuf;;
        GetAccessors()->getHierarchicalSymbolEffectAccessor()->setFillStyle(self, static_cast<Opt_EffectFillStyle*>(&fillStyleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HierarchicalSymbolEffect_setFillStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_HoverEvent_construct() {
        return GetAccessors()->getHoverEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(HoverEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_HoverEvent_getFinalizer() {
        return GetAccessors()->getHoverEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(HoverEvent_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_HoverEvent_getX(Ark_NativePointer thisPtr) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getHoverEventAccessor()->getX(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(HoverEvent_getX, KInteropReturnBuffer, Ark_NativePointer)
void impl_HoverEvent_setX(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto xValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 xValueTempTmpBuf = {};
        xValueTempTmpBuf.tag = xValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((xValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            xValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 xValueTemp = xValueTempTmpBuf;;
        GetAccessors()->getHoverEventAccessor()->setX(self, static_cast<Opt_Float64*>(&xValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HoverEvent_setX, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_HoverEvent_getY(Ark_NativePointer thisPtr) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getHoverEventAccessor()->getY(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(HoverEvent_getY, KInteropReturnBuffer, Ark_NativePointer)
void impl_HoverEvent_setY(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto yValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 yValueTempTmpBuf = {};
        yValueTempTmpBuf.tag = yValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((yValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            yValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 yValueTemp = yValueTempTmpBuf;;
        GetAccessors()->getHoverEventAccessor()->setY(self, static_cast<Opt_Float64*>(&yValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HoverEvent_setY, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_HoverEvent_getWindowX(Ark_NativePointer thisPtr) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getHoverEventAccessor()->getWindowX(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(HoverEvent_getWindowX, KInteropReturnBuffer, Ark_NativePointer)
void impl_HoverEvent_setWindowX(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto windowXValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 windowXValueTempTmpBuf = {};
        windowXValueTempTmpBuf.tag = windowXValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((windowXValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            windowXValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 windowXValueTemp = windowXValueTempTmpBuf;;
        GetAccessors()->getHoverEventAccessor()->setWindowX(self, static_cast<Opt_Float64*>(&windowXValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HoverEvent_setWindowX, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_HoverEvent_getWindowY(Ark_NativePointer thisPtr) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getHoverEventAccessor()->getWindowY(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(HoverEvent_getWindowY, KInteropReturnBuffer, Ark_NativePointer)
void impl_HoverEvent_setWindowY(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto windowYValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 windowYValueTempTmpBuf = {};
        windowYValueTempTmpBuf.tag = windowYValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((windowYValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            windowYValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 windowYValueTemp = windowYValueTempTmpBuf;;
        GetAccessors()->getHoverEventAccessor()->setWindowY(self, static_cast<Opt_Float64*>(&windowYValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HoverEvent_setWindowY, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_HoverEvent_getDisplayX(Ark_NativePointer thisPtr) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getHoverEventAccessor()->getDisplayX(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(HoverEvent_getDisplayX, KInteropReturnBuffer, Ark_NativePointer)
void impl_HoverEvent_setDisplayX(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto displayXValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 displayXValueTempTmpBuf = {};
        displayXValueTempTmpBuf.tag = displayXValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((displayXValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            displayXValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 displayXValueTemp = displayXValueTempTmpBuf;;
        GetAccessors()->getHoverEventAccessor()->setDisplayX(self, static_cast<Opt_Float64*>(&displayXValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HoverEvent_setDisplayX, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_HoverEvent_getDisplayY(Ark_NativePointer thisPtr) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getHoverEventAccessor()->getDisplayY(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(HoverEvent_getDisplayY, KInteropReturnBuffer, Ark_NativePointer)
void impl_HoverEvent_setDisplayY(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto displayYValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 displayYValueTempTmpBuf = {};
        displayYValueTempTmpBuf.tag = displayYValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((displayYValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            displayYValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 displayYValueTemp = displayYValueTempTmpBuf;;
        GetAccessors()->getHoverEventAccessor()->setDisplayY(self, static_cast<Opt_Float64*>(&displayYValueTemp));
}
KOALA_INTEROP_DIRECT_V3(HoverEvent_setDisplayY, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_HoverEvent_stopPropagation(Ark_NativePointer thisPtr) {
        Ark_HoverEvent self = reinterpret_cast<Ark_HoverEvent>(thisPtr);
        GetAccessors()->getHoverEventAccessor()->stopPropagation(self);
}
KOALA_INTEROP_DIRECT_V1(HoverEvent_stopPropagation, Ark_NativePointer)
Ark_NativePointer impl_HttpAuthHandler_construct() {
        return GetAccessors()->getHttpAuthHandlerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(HttpAuthHandler_construct, Ark_NativePointer)
Ark_NativePointer impl_HttpAuthHandler_getFinalizer() {
        return GetAccessors()->getHttpAuthHandlerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(HttpAuthHandler_getFinalizer, Ark_NativePointer)
Ark_Boolean impl_HttpAuthHandler_confirm(Ark_NativePointer thisPtr, const KStringPtr& userName, const KStringPtr& password) {
        Ark_HttpAuthHandler self = reinterpret_cast<Ark_HttpAuthHandler>(thisPtr);
        return GetAccessors()->getHttpAuthHandlerAccessor()->confirm(self, (const Ark_String*) (&userName), (const Ark_String*) (&password));
}
KOALA_INTEROP_3(HttpAuthHandler_confirm, Ark_Boolean, Ark_NativePointer, KStringPtr, KStringPtr)
void impl_HttpAuthHandler_cancel(Ark_NativePointer thisPtr) {
        Ark_HttpAuthHandler self = reinterpret_cast<Ark_HttpAuthHandler>(thisPtr);
        GetAccessors()->getHttpAuthHandlerAccessor()->cancel(self);
}
KOALA_INTEROP_DIRECT_V1(HttpAuthHandler_cancel, Ark_NativePointer)
Ark_Boolean impl_HttpAuthHandler_isHttpAuthInfoSaved(Ark_NativePointer thisPtr) {
        Ark_HttpAuthHandler self = reinterpret_cast<Ark_HttpAuthHandler>(thisPtr);
        return GetAccessors()->getHttpAuthHandlerAccessor()->isHttpAuthInfoSaved(self);
}
KOALA_INTEROP_DIRECT_1(HttpAuthHandler_isHttpAuthInfoSaved, Ark_Boolean, Ark_NativePointer)
Ark_NativePointer impl_ImageAnalyzerController_construct() {
        return GetAccessors()->getImageAnalyzerControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ImageAnalyzerController_construct, Ark_NativePointer)
Ark_NativePointer impl_ImageAnalyzerController_getFinalizer() {
        return GetAccessors()->getImageAnalyzerControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ImageAnalyzerController_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_ImageAnalyzerController_getImageAnalyzerSupportTypes(Ark_NativePointer thisPtr) {
        Ark_ImageAnalyzerController self = reinterpret_cast<Ark_ImageAnalyzerController>(thisPtr);
        const auto &retValue = GetAccessors()->getImageAnalyzerControllerAccessor()->getImageAnalyzerSupportTypes(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_ImageAnalyzerType retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeInt32(static_cast<Ark_ImageAnalyzerType>(retValueTmpElement));
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ImageAnalyzerController_getImageAnalyzerSupportTypes, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_ImageAttachment_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AttachmentType valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_AttachmentType valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = ImageAttachmentInterface_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = ResourceImageAttachmentOptions_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_AttachmentType>(valueValueTempTmpBuf_);
        }
        Opt_AttachmentType valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getImageAttachmentAccessor()->construct(static_cast<Opt_AttachmentType*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(ImageAttachment_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ImageAttachment_getFinalizer() {
        return GetAccessors()->getImageAttachmentAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ImageAttachment_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_ImageAttachment_getValue(Ark_NativePointer thisPtr) {
        Ark_ImageAttachment self = reinterpret_cast<Ark_ImageAttachment>(thisPtr);
        return GetAccessors()->getImageAttachmentAccessor()->getValue(self);
}
KOALA_INTEROP_DIRECT_1(ImageAttachment_getValue, Ark_NativePointer, Ark_NativePointer)
KInteropReturnBuffer impl_ImageAttachment_getSize(Ark_NativePointer thisPtr) {
        Ark_ImageAttachment self = reinterpret_cast<Ark_ImageAttachment>(thisPtr);
        const auto &retValue = GetAccessors()->getImageAttachmentAccessor()->getSize(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            SizeOptions_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ImageAttachment_getSize, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ImageAttachment_getVerticalAlign(Ark_NativePointer thisPtr) {
        Ark_ImageAttachment self = reinterpret_cast<Ark_ImageAttachment>(thisPtr);
        const auto &retValue = GetAccessors()->getImageAttachmentAccessor()->getVerticalAlign(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_ImageSpanAlignment>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ImageAttachment_getVerticalAlign, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ImageAttachment_getObjectFit(Ark_NativePointer thisPtr) {
        Ark_ImageAttachment self = reinterpret_cast<Ark_ImageAttachment>(thisPtr);
        const auto &retValue = GetAccessors()->getImageAttachmentAccessor()->getObjectFit(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_ImageFit>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ImageAttachment_getObjectFit, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ImageAttachment_getLayoutStyle(Ark_NativePointer thisPtr) {
        Ark_ImageAttachment self = reinterpret_cast<Ark_ImageAttachment>(thisPtr);
        const auto &retValue = GetAccessors()->getImageAttachmentAccessor()->getLayoutStyle(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            ImageAttachmentLayoutStyle_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ImageAttachment_getLayoutStyle, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ImageAttachment_getColorFilter(Ark_NativePointer thisPtr) {
        Ark_ImageAttachment self = reinterpret_cast<Ark_ImageAttachment>(thisPtr);
        const auto &retValue = GetAccessors()->getImageAttachmentAccessor()->getColorFilter(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            if (retValueTmpValue.selector == 0) {
                _retSerializer.writeInt8(0);
                const auto retValueTmpValueForIdx0 = retValueTmpValue.value0;
                ColorFilter_serializer::write(_retSerializer, retValueTmpValueForIdx0);
            } else if (retValueTmpValue.selector == 1) {
                _retSerializer.writeInt8(1);
                const auto retValueTmpValueForIdx1 = retValueTmpValue.value1;
                drawing_ColorFilter_serializer::write(_retSerializer, retValueTmpValueForIdx1);
            }
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ImageAttachment_getColorFilter, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_ImageBitmap_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 srcValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_PixelMap_String srcValueTempTmpBuf = {};
        srcValueTempTmpBuf.selector = srcValueTempTmpBufUnionSelector;
        if (srcValueTempTmpBufUnionSelector == 0) {
            srcValueTempTmpBuf.selector = 0;
            srcValueTempTmpBuf.value0 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else if (srcValueTempTmpBufUnionSelector == 1) {
            srcValueTempTmpBuf.selector = 1;
            srcValueTempTmpBuf.value1 = static_cast<Ark_String>(thisDeserializer.readString());
        } else {
            INTEROP_FATAL("One of the branches for srcValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_PixelMap_String srcValueTemp = static_cast<Ark_Union_PixelMap_String>(srcValueTempTmpBuf);;
        const auto unitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetricsUnit unitValueTempTmpBuf = {};
        unitValueTempTmpBuf.tag = unitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unitValueTempTmpBuf.value = static_cast<Ark_LengthMetricsUnit>(thisDeserializer.readInt32());
        }
        Opt_LengthMetricsUnit unitValueTemp = unitValueTempTmpBuf;;
        return GetAccessors()->getImageBitmapAccessor()->construct(static_cast<Ark_Union_PixelMap_String*>(&srcValueTemp), static_cast<Opt_LengthMetricsUnit*>(&unitValueTemp));
}
KOALA_INTEROP_DIRECT_2(ImageBitmap_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ImageBitmap_getFinalizer() {
        return GetAccessors()->getImageBitmapAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ImageBitmap_getFinalizer, Ark_NativePointer)
void impl_ImageBitmap_close(Ark_NativePointer thisPtr) {
        Ark_ImageBitmap self = reinterpret_cast<Ark_ImageBitmap>(thisPtr);
        GetAccessors()->getImageBitmapAccessor()->close(self);
}
KOALA_INTEROP_DIRECT_V1(ImageBitmap_close, Ark_NativePointer)
Ark_Number impl_ImageBitmap_getHeight(Ark_NativePointer thisPtr) {
        Ark_ImageBitmap self = reinterpret_cast<Ark_ImageBitmap>(thisPtr);
        return GetAccessors()->getImageBitmapAccessor()->getHeight(self);
}
KOALA_INTEROP_DIRECT_1(ImageBitmap_getHeight, KInteropNumber, Ark_NativePointer)
void impl_ImageBitmap_setHeight(Ark_NativePointer thisPtr, KInteropNumber height) {
        Ark_ImageBitmap self = reinterpret_cast<Ark_ImageBitmap>(thisPtr);
        GetAccessors()->getImageBitmapAccessor()->setHeight(self, (const Ark_Number*) (&height));
}
KOALA_INTEROP_DIRECT_V2(ImageBitmap_setHeight, Ark_NativePointer, KInteropNumber)
Ark_Number impl_ImageBitmap_getWidth(Ark_NativePointer thisPtr) {
        Ark_ImageBitmap self = reinterpret_cast<Ark_ImageBitmap>(thisPtr);
        return GetAccessors()->getImageBitmapAccessor()->getWidth(self);
}
KOALA_INTEROP_DIRECT_1(ImageBitmap_getWidth, KInteropNumber, Ark_NativePointer)
void impl_ImageBitmap_setWidth(Ark_NativePointer thisPtr, KInteropNumber width) {
        Ark_ImageBitmap self = reinterpret_cast<Ark_ImageBitmap>(thisPtr);
        GetAccessors()->getImageBitmapAccessor()->setWidth(self, (const Ark_Number*) (&width));
}
KOALA_INTEROP_DIRECT_V2(ImageBitmap_setWidth, Ark_NativePointer, KInteropNumber)
Ark_NativePointer impl_ImageData_construct(KInteropNumber width, KInteropNumber height, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto dataValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Buffer dataValueTempTmpBuf = {};
        dataValueTempTmpBuf.tag = dataValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((dataValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            dataValueTempTmpBuf.value = static_cast<Ark_Buffer>(thisDeserializer.readBuffer());
        }
        Opt_Buffer dataValueTemp = dataValueTempTmpBuf;;
        const auto unitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetricsUnit unitValueTempTmpBuf = {};
        unitValueTempTmpBuf.tag = unitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unitValueTempTmpBuf.value = static_cast<Ark_LengthMetricsUnit>(thisDeserializer.readInt32());
        }
        Opt_LengthMetricsUnit unitValueTemp = unitValueTempTmpBuf;;
        return GetAccessors()->getImageDataAccessor()->construct((const Ark_Number*) (&width), (const Ark_Number*) (&height), static_cast<Opt_Buffer*>(&dataValueTemp), static_cast<Opt_LengthMetricsUnit*>(&unitValueTemp));
}
KOALA_INTEROP_DIRECT_4(ImageData_construct, Ark_NativePointer, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ImageData_getFinalizer() {
        return GetAccessors()->getImageDataAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ImageData_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_ImageData_getData(Ark_NativePointer thisPtr) {
        Ark_ImageData self = reinterpret_cast<Ark_ImageData>(thisPtr);
        const auto &retValue = GetAccessors()->getImageDataAccessor()->getData(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeBuffer(retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ImageData_getData, KInteropReturnBuffer, Ark_NativePointer)
void impl_ImageData_setData(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ImageData self = reinterpret_cast<Ark_ImageData>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Buffer dataValueTemp = static_cast<Ark_Buffer>(thisDeserializer.readBuffer());;
        GetAccessors()->getImageDataAccessor()->setData(self, static_cast<Ark_Buffer*>(&dataValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ImageData_setData, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_ImageData_getHeight(Ark_NativePointer thisPtr) {
        Ark_ImageData self = reinterpret_cast<Ark_ImageData>(thisPtr);
        return GetAccessors()->getImageDataAccessor()->getHeight(self);
}
KOALA_INTEROP_DIRECT_1(ImageData_getHeight, Ark_Int32, Ark_NativePointer)
void impl_ImageData_setHeight(Ark_NativePointer thisPtr, Ark_Int32 height) {
        Ark_ImageData self = reinterpret_cast<Ark_ImageData>(thisPtr);
        GetAccessors()->getImageDataAccessor()->setHeight(self, height);
}
KOALA_INTEROP_DIRECT_V2(ImageData_setHeight, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_ImageData_getWidth(Ark_NativePointer thisPtr) {
        Ark_ImageData self = reinterpret_cast<Ark_ImageData>(thisPtr);
        return GetAccessors()->getImageDataAccessor()->getWidth(self);
}
KOALA_INTEROP_DIRECT_1(ImageData_getWidth, Ark_Int32, Ark_NativePointer)
void impl_ImageData_setWidth(Ark_NativePointer thisPtr, Ark_Int32 width) {
        Ark_ImageData self = reinterpret_cast<Ark_ImageData>(thisPtr);
        GetAccessors()->getImageDataAccessor()->setWidth(self, width);
}
KOALA_INTEROP_DIRECT_V2(ImageData_setWidth, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_IndicatorComponentController_construct() {
        return GetAccessors()->getIndicatorComponentControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(IndicatorComponentController_construct, Ark_NativePointer)
Ark_NativePointer impl_IndicatorComponentController_getFinalizer() {
        return GetAccessors()->getIndicatorComponentControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(IndicatorComponentController_getFinalizer, Ark_NativePointer)
void impl_IndicatorComponentController_showNext(Ark_NativePointer thisPtr) {
        Ark_IndicatorComponentController self = reinterpret_cast<Ark_IndicatorComponentController>(thisPtr);
        GetAccessors()->getIndicatorComponentControllerAccessor()->showNext(self);
}
KOALA_INTEROP_DIRECT_V1(IndicatorComponentController_showNext, Ark_NativePointer)
void impl_IndicatorComponentController_showPrevious(Ark_NativePointer thisPtr) {
        Ark_IndicatorComponentController self = reinterpret_cast<Ark_IndicatorComponentController>(thisPtr);
        GetAccessors()->getIndicatorComponentControllerAccessor()->showPrevious(self);
}
KOALA_INTEROP_DIRECT_V1(IndicatorComponentController_showPrevious, Ark_NativePointer)
void impl_IndicatorComponentController_changeIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_IndicatorComponentController self = reinterpret_cast<Ark_IndicatorComponentController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto indexValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 indexValueTempTmpBuf = {};
        indexValueTempTmpBuf.tag = indexValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((indexValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            indexValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 indexValueTemp = indexValueTempTmpBuf;;
        const auto useAnimationValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean useAnimationValueTempTmpBuf = {};
        useAnimationValueTempTmpBuf.tag = useAnimationValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((useAnimationValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            useAnimationValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean useAnimationValueTemp = useAnimationValueTempTmpBuf;;
        GetAccessors()->getIndicatorComponentControllerAccessor()->changeIndex(self, static_cast<Opt_Int32*>(&indexValueTemp), static_cast<Opt_Boolean*>(&useAnimationValueTemp));
}
KOALA_INTEROP_DIRECT_V3(IndicatorComponentController_changeIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_IUIContext_freezeUINode0(const KStringPtr& id, Ark_Boolean isFrozen) {
        GetAccessors()->getIUIContextAccessor()->freezeUINode0((const Ark_String*) (&id), isFrozen);
}
KOALA_INTEROP_V2(IUIContext_freezeUINode0, KStringPtr, Ark_Boolean)
void impl_IUIContext_freezeUINode1(KInteropNumber id, Ark_Boolean isFrozen) {
        GetAccessors()->getIUIContextAccessor()->freezeUINode1((const Ark_Number*) (&id), isFrozen);
}
KOALA_INTEROP_DIRECT_V2(IUIContext_freezeUINode1, KInteropNumber, Ark_Boolean)
Ark_NativePointer impl_JsGeolocation_construct() {
        return GetAccessors()->getJsGeolocationAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(JsGeolocation_construct, Ark_NativePointer)
Ark_NativePointer impl_JsGeolocation_getFinalizer() {
        return GetAccessors()->getJsGeolocationAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(JsGeolocation_getFinalizer, Ark_NativePointer)
void impl_JsGeolocation_invoke(Ark_NativePointer thisPtr, const KStringPtr& origin, Ark_Boolean allow, Ark_Boolean retain) {
        Ark_JsGeolocation self = reinterpret_cast<Ark_JsGeolocation>(thisPtr);
        GetAccessors()->getJsGeolocationAccessor()->invoke(self, (const Ark_String*) (&origin), allow, retain);
}
KOALA_INTEROP_V4(JsGeolocation_invoke, Ark_NativePointer, KStringPtr, Ark_Boolean, Ark_Boolean)
Ark_NativePointer impl_JsResult_construct() {
        return GetAccessors()->getJsResultAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(JsResult_construct, Ark_NativePointer)
Ark_NativePointer impl_JsResult_getFinalizer() {
        return GetAccessors()->getJsResultAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(JsResult_getFinalizer, Ark_NativePointer)
void impl_JsResult_handleCancel(Ark_NativePointer thisPtr) {
        Ark_JsResult self = reinterpret_cast<Ark_JsResult>(thisPtr);
        GetAccessors()->getJsResultAccessor()->handleCancel(self);
}
KOALA_INTEROP_DIRECT_V1(JsResult_handleCancel, Ark_NativePointer)
void impl_JsResult_handleConfirm(Ark_NativePointer thisPtr) {
        Ark_JsResult self = reinterpret_cast<Ark_JsResult>(thisPtr);
        GetAccessors()->getJsResultAccessor()->handleConfirm(self);
}
KOALA_INTEROP_DIRECT_V1(JsResult_handleConfirm, Ark_NativePointer)
void impl_JsResult_handlePromptConfirm(Ark_NativePointer thisPtr, const KStringPtr& result) {
        Ark_JsResult self = reinterpret_cast<Ark_JsResult>(thisPtr);
        GetAccessors()->getJsResultAccessor()->handlePromptConfirm(self, (const Ark_String*) (&result));
}
KOALA_INTEROP_V2(JsResult_handlePromptConfirm, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_KeyEvent_construct() {
        return GetAccessors()->getKeyEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(KeyEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_KeyEvent_getFinalizer() {
        return GetAccessors()->getKeyEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(KeyEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_KeyEvent_getType(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getType(self);
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getType, Ark_Int32, Ark_NativePointer)
void impl_KeyEvent_setType(Ark_NativePointer thisPtr, Ark_Int32 type) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setType(self, static_cast<Ark_KeyType>(type));
}
KOALA_INTEROP_DIRECT_V2(KeyEvent_setType, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_KeyEvent_getKeyCode(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getKeyCode(self);
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getKeyCode, Ark_Int32, Ark_NativePointer)
void impl_KeyEvent_setKeyCode(Ark_NativePointer thisPtr, Ark_Int32 keyCode) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setKeyCode(self, keyCode);
}
KOALA_INTEROP_DIRECT_V2(KeyEvent_setKeyCode, Ark_NativePointer, Ark_Int32)
Ark_String impl_KeyEvent_getKeyText(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getKeyText(self);
}
KOALA_INTEROP_1(KeyEvent_getKeyText, KStringPtr, Ark_NativePointer)
void impl_KeyEvent_setKeyText(Ark_NativePointer thisPtr, const KStringPtr& keyText) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setKeyText(self, (const Ark_String*) (&keyText));
}
KOALA_INTEROP_V2(KeyEvent_setKeyText, Ark_NativePointer, KStringPtr)
Ark_Int32 impl_KeyEvent_getKeySource(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getKeySource(self);
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getKeySource, Ark_Int32, Ark_NativePointer)
void impl_KeyEvent_setKeySource(Ark_NativePointer thisPtr, Ark_Int32 keySource) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setKeySource(self, static_cast<Ark_KeySource>(keySource));
}
KOALA_INTEROP_DIRECT_V2(KeyEvent_setKeySource, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_KeyEvent_getDeviceId(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getDeviceId(self);
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getDeviceId, Ark_Int32, Ark_NativePointer)
void impl_KeyEvent_setDeviceId(Ark_NativePointer thisPtr, Ark_Int32 deviceId) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setDeviceId(self, deviceId);
}
KOALA_INTEROP_DIRECT_V2(KeyEvent_setDeviceId, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_KeyEvent_getMetaKey(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getMetaKey(self);
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getMetaKey, Ark_Int32, Ark_NativePointer)
void impl_KeyEvent_setMetaKey(Ark_NativePointer thisPtr, Ark_Int32 metaKey) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setMetaKey(self, metaKey);
}
KOALA_INTEROP_DIRECT_V2(KeyEvent_setMetaKey, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_KeyEvent_getTimestamp(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getTimestamp(self);
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getTimestamp, Ark_Int32, Ark_NativePointer)
void impl_KeyEvent_setTimestamp(Ark_NativePointer thisPtr, KLong timestamp) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setTimestamp(self, timestamp);
}
KOALA_INTEROP_DIRECT_V2(KeyEvent_setTimestamp, Ark_NativePointer, KLong)
Ark_NativePointer impl_KeyEvent_getStopPropagation(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getKeyEventAccessor()->getStopPropagation(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getStopPropagation, Ark_NativePointer, Ark_NativePointer)
void impl_KeyEvent_setStopPropagation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void stopPropagationValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getKeyEventAccessor()->setStopPropagation(self, static_cast<Callback_Void*>(&stopPropagationValueTemp));
}
KOALA_INTEROP_DIRECT_V3(KeyEvent_setStopPropagation, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_KeyEvent_getIntentionCode(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        return GetAccessors()->getKeyEventAccessor()->getIntentionCode(self);
}
KOALA_INTEROP_DIRECT_1(KeyEvent_getIntentionCode, Ark_Int32, Ark_NativePointer)
void impl_KeyEvent_setIntentionCode(Ark_NativePointer thisPtr, Ark_Int32 intentionCode) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        GetAccessors()->getKeyEventAccessor()->setIntentionCode(self, static_cast<Ark_IntentionCode>(intentionCode));
}
KOALA_INTEROP_DIRECT_V2(KeyEvent_setIntentionCode, Ark_NativePointer, Ark_Int32)
KInteropReturnBuffer impl_KeyEvent_getGetModifierKeyState(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getKeyEventAccessor()->getGetModifierKeyState(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(KeyEvent_getGetModifierKeyState, KInteropReturnBuffer, Ark_NativePointer)
void impl_KeyEvent_setGetModifierKeyState(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto getModifierKeyStateValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ModifierKeyStateGetter getModifierKeyStateValueTempTmpBuf = {};
        getModifierKeyStateValueTempTmpBuf.tag = getModifierKeyStateValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((getModifierKeyStateValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            getModifierKeyStateValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Array_String keys, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_ModifierKeyStateGetter)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Array_String keys, const Callback_Boolean_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_ModifierKeyStateGetter))))};
        }
        Opt_ModifierKeyStateGetter getModifierKeyStateValueTemp = getModifierKeyStateValueTempTmpBuf;;
        GetAccessors()->getKeyEventAccessor()->setGetModifierKeyState(self, static_cast<Opt_ModifierKeyStateGetter*>(&getModifierKeyStateValueTemp));
}
KOALA_INTEROP_DIRECT_V3(KeyEvent_setGetModifierKeyState, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_KeyEvent_getUnicode(Ark_NativePointer thisPtr) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getKeyEventAccessor()->getUnicode(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(KeyEvent_getUnicode, KInteropReturnBuffer, Ark_NativePointer)
void impl_KeyEvent_setUnicode(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_KeyEvent self = reinterpret_cast<Ark_KeyEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto unicodeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int64 unicodeValueTempTmpBuf = {};
        unicodeValueTempTmpBuf.tag = unicodeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unicodeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unicodeValueTempTmpBuf.value = thisDeserializer.readInt64();
        }
        Opt_Int64 unicodeValueTemp = unicodeValueTempTmpBuf;;
        GetAccessors()->getKeyEventAccessor()->setUnicode(self, static_cast<Opt_Int64*>(&unicodeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(KeyEvent_setUnicode, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Layoutable_construct() {
        return GetAccessors()->getLayoutableAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(Layoutable_construct, Ark_NativePointer)
Ark_NativePointer impl_Layoutable_getFinalizer() {
        return GetAccessors()->getLayoutableAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(Layoutable_getFinalizer, Ark_NativePointer)
void impl_Layoutable_layout(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Position positionValueTemp = Position_serializer::read(thisDeserializer);;
        GetAccessors()->getLayoutableAccessor()->layout(self, static_cast<Ark_Position*>(&positionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Layoutable_layout, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Layoutable_getMargin(Ark_NativePointer thisPtr) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        const auto &retValue = GetAccessors()->getLayoutableAccessor()->getMargin(self);
        SerializerBase _retSerializer {};
        DirectionalEdgesT_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Layoutable_getMargin, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_Layoutable_getPadding(Ark_NativePointer thisPtr) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        const auto &retValue = GetAccessors()->getLayoutableAccessor()->getPadding(self);
        SerializerBase _retSerializer {};
        DirectionalEdgesT_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Layoutable_getPadding, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_Layoutable_getBorderWidth(Ark_NativePointer thisPtr) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        const auto &retValue = GetAccessors()->getLayoutableAccessor()->getBorderWidth(self);
        SerializerBase _retSerializer {};
        DirectionalEdgesT_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Layoutable_getBorderWidth, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_Layoutable_getMeasureResult(Ark_NativePointer thisPtr) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        const auto &retValue = GetAccessors()->getLayoutableAccessor()->getMeasureResult(self);
        SerializerBase _retSerializer {};
        MeasureResult_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Layoutable_getMeasureResult, KInteropReturnBuffer, Ark_NativePointer)
void impl_Layoutable_setMeasureResult(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_MeasureResult measureResultValueTemp = MeasureResult_serializer::read(thisDeserializer);;
        GetAccessors()->getLayoutableAccessor()->setMeasureResult(self, static_cast<Ark_MeasureResult*>(&measureResultValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Layoutable_setMeasureResult, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Layoutable_getUniqueId(Ark_NativePointer thisPtr) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        const auto &retValue = GetAccessors()->getLayoutableAccessor()->getUniqueId(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Layoutable_getUniqueId, KInteropReturnBuffer, Ark_NativePointer)
void impl_Layoutable_setUniqueId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Layoutable self = reinterpret_cast<Ark_Layoutable>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto uniqueIdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number uniqueIdValueTempTmpBuf = {};
        uniqueIdValueTempTmpBuf.tag = uniqueIdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((uniqueIdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            uniqueIdValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number uniqueIdValueTemp = uniqueIdValueTempTmpBuf;;
        GetAccessors()->getLayoutableAccessor()->setUniqueId(self, static_cast<Opt_Number*>(&uniqueIdValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Layoutable_setUniqueId, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LayoutManager_construct() {
        return GetAccessors()->getLayoutManagerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(LayoutManager_construct, Ark_NativePointer)
Ark_NativePointer impl_LayoutManager_getFinalizer() {
        return GetAccessors()->getLayoutManagerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LayoutManager_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_LayoutManager_getLineCount(Ark_NativePointer thisPtr) {
        Ark_LayoutManager self = reinterpret_cast<Ark_LayoutManager>(thisPtr);
        return GetAccessors()->getLayoutManagerAccessor()->getLineCount(self);
}
KOALA_INTEROP_DIRECT_1(LayoutManager_getLineCount, Ark_Int32, Ark_NativePointer)
KInteropReturnBuffer impl_LayoutManager_getGlyphPositionAtCoordinate(Ark_NativePointer thisPtr, KDouble x, KDouble y) {
        Ark_LayoutManager self = reinterpret_cast<Ark_LayoutManager>(thisPtr);
        const auto &retValue = GetAccessors()->getLayoutManagerAccessor()->getGlyphPositionAtCoordinate(self, x, y);
        SerializerBase _retSerializer {};
        PositionWithAffinity_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(LayoutManager_getGlyphPositionAtCoordinate, KInteropReturnBuffer, Ark_NativePointer, KDouble, KDouble)
Ark_NativePointer impl_LayoutPolicy_construct() {
        return GetAccessors()->getLayoutPolicyAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(LayoutPolicy_construct, Ark_NativePointer)
Ark_NativePointer impl_LayoutPolicy_getFinalizer() {
        return GetAccessors()->getLayoutPolicyAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LayoutPolicy_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_LayoutPolicy_getMatchParent() {
        return GetAccessors()->getLayoutPolicyAccessor()->getMatchParent();
}
KOALA_INTEROP_DIRECT_0(LayoutPolicy_getMatchParent, Ark_NativePointer)
void impl_LazyBuild_ApplyLazyBuilder() {
        GetAccessors()->getLazyBuildAccessor()->ApplyLazyBuilder();
}
KOALA_INTEROP_DIRECT_V0(LazyBuild_ApplyLazyBuilder)
void impl_LazyBuild_SetListItemLazyBuilder(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        CustomNodeBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};;
        GetAccessors()->getLazyBuildAccessor()->SetListItemLazyBuilder(node, static_cast<CustomNodeBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LazyBuild_SetListItemLazyBuilder, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LazyBuild_SetTabContentLazyBuilder(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        CustomNodeBuilder builderValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};;
        GetAccessors()->getLazyBuildAccessor()->SetTabContentLazyBuilder(node, static_cast<CustomNodeBuilder*>(&builderValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LazyBuild_SetTabContentLazyBuilder, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LazyForEachOps_NotifyChange(Ark_NativePointer node, Ark_Int32 startIndex, Ark_Int32 endIndex, Ark_Int32 count) {
        GetAccessors()->getLazyForEachOpsAccessor()->NotifyChange(node, startIndex, endIndex, count);
}
KOALA_INTEROP_DIRECT_V4(LazyForEachOps_NotifyChange, Ark_NativePointer, Ark_Int32, Ark_Int32, Ark_Int32)
void impl_LazyForEachOps_Sync(Ark_NativePointer node, Ark_Int32 totalCount, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_CreateItem creatorValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 index, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_CreateItem)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 index, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_CreateItem))))};;
        Callback_RangeUpdate updaterValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 start, const Ark_Int32 end)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_RangeUpdate)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 start, const Ark_Int32 end)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_RangeUpdate))))};;
        GetAccessors()->getLazyForEachOpsAccessor()->Sync(node, totalCount, static_cast<Callback_CreateItem*>(&creatorValueTemp), static_cast<Callback_RangeUpdate*>(&updaterValueTemp));
}
KOALA_INTEROP_DIRECT_V4(LazyForEachOps_Sync, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
void impl_LazyForEachOps_SyncOnMoveOps(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_OnMoveFromTo onMoveFromToOpsValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_OnMoveFromTo)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_OnMoveFromTo))))};;
        const auto onMoveOpsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_OnMoveHandler onMoveOpsValueTempTmpBuf = {};
        onMoveOpsValueTempTmpBuf.tag = onMoveOpsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onMoveOpsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onMoveOpsValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_OnMoveHandler)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 from, const Ark_Int32 to)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_OnMoveHandler))))};
        }
        Opt_OnMoveHandler onMoveOpsValueTemp = onMoveOpsValueTempTmpBuf;;
        const auto onMoveDragEventOpsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ItemDragEventHandler onMoveDragEventOpsValueTempTmpBuf = {};
        onMoveDragEventOpsValueTempTmpBuf.tag = onMoveDragEventOpsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onMoveDragEventOpsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onMoveDragEventOpsValueTempTmpBuf.value = ItemDragEventHandler_serializer::read(thisDeserializer);
        }
        Opt_ItemDragEventHandler onMoveDragEventOpsValueTemp = onMoveDragEventOpsValueTempTmpBuf;;
        GetAccessors()->getLazyForEachOpsAccessor()->SyncOnMoveOps(node, static_cast<Callback_OnMoveFromTo*>(&onMoveFromToOpsValueTemp), static_cast<Opt_OnMoveHandler*>(&onMoveOpsValueTemp), static_cast<Opt_ItemDragEventHandler*>(&onMoveDragEventOpsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LazyForEachOps_SyncOnMoveOps, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LetterSpacingStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_LengthMetrics valueValueTemp = LengthMetrics_serializer::read(thisDeserializer);;
        return GetAccessors()->getLetterSpacingStyleAccessor()->construct(static_cast<Ark_LengthMetrics*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(LetterSpacingStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LetterSpacingStyle_getFinalizer() {
        return GetAccessors()->getLetterSpacingStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LetterSpacingStyle_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_LetterSpacingStyle_getLetterSpacing(Ark_NativePointer thisPtr) {
        Ark_LetterSpacingStyle self = reinterpret_cast<Ark_LetterSpacingStyle>(thisPtr);
        return GetAccessors()->getLetterSpacingStyleAccessor()->getLetterSpacing(self);
}
KOALA_INTEROP_1(LetterSpacingStyle_getLetterSpacing, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_LifeCycle_construct() {
        return GetAccessors()->getLifeCycleAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(LifeCycle_construct, Ark_NativePointer)
Ark_NativePointer impl_LifeCycle_getFinalizer() {
        return GetAccessors()->getLifeCycleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LifeCycle_getFinalizer, Ark_NativePointer)
void impl_LifeCycle_aboutToAppear(Ark_NativePointer thisPtr) {
        Ark_LifeCycle self = reinterpret_cast<Ark_LifeCycle>(thisPtr);
        GetAccessors()->getLifeCycleAccessor()->aboutToAppear(self);
}
KOALA_INTEROP_DIRECT_V1(LifeCycle_aboutToAppear, Ark_NativePointer)
void impl_LifeCycle_aboutToDisappear(Ark_NativePointer thisPtr) {
        Ark_LifeCycle self = reinterpret_cast<Ark_LifeCycle>(thisPtr);
        GetAccessors()->getLifeCycleAccessor()->aboutToDisappear(self);
}
KOALA_INTEROP_DIRECT_V1(LifeCycle_aboutToDisappear, Ark_NativePointer)
void impl_LifeCycle_onDidBuild(Ark_NativePointer thisPtr) {
        Ark_LifeCycle self = reinterpret_cast<Ark_LifeCycle>(thisPtr);
        GetAccessors()->getLifeCycleAccessor()->onDidBuild(self);
}
KOALA_INTEROP_DIRECT_V1(LifeCycle_onDidBuild, Ark_NativePointer)
void impl_LifeCycle_build(Ark_NativePointer thisPtr) {
        Ark_LifeCycle self = reinterpret_cast<Ark_LifeCycle>(thisPtr);
        GetAccessors()->getLifeCycleAccessor()->build(self);
}
KOALA_INTEROP_DIRECT_V1(LifeCycle_build, Ark_NativePointer)
Ark_NativePointer impl_LinearGradient_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 colorStopsValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_ColorStop colorStopsValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(colorStopsValueTempTmpBuf)>::type,
        std::decay<decltype(*colorStopsValueTempTmpBuf.array)>::type>(&colorStopsValueTempTmpBuf, colorStopsValueTempTmpBufLength);
        for (int colorStopsValueTempTmpBufBufCounterI = 0; colorStopsValueTempTmpBufBufCounterI < colorStopsValueTempTmpBufLength; colorStopsValueTempTmpBufBufCounterI++) {
            colorStopsValueTempTmpBuf.array[colorStopsValueTempTmpBufBufCounterI] = ColorStop_serializer::read(thisDeserializer);
        }
        Array_ColorStop colorStopsValueTemp = colorStopsValueTempTmpBuf;;
        return GetAccessors()->getLinearGradientAccessor()->construct(static_cast<Array_ColorStop*>(&colorStopsValueTemp));
}
KOALA_INTEROP_DIRECT_2(LinearGradient_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LinearGradient_getFinalizer() {
        return GetAccessors()->getLinearGradientAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LinearGradient_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_LinearIndicatorController_construct() {
        return GetAccessors()->getLinearIndicatorControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(LinearIndicatorController_construct, Ark_NativePointer)
Ark_NativePointer impl_LinearIndicatorController_getFinalizer() {
        return GetAccessors()->getLinearIndicatorControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LinearIndicatorController_getFinalizer, Ark_NativePointer)
void impl_LinearIndicatorController_setProgress(Ark_NativePointer thisPtr, KInteropNumber index, KInteropNumber progress) {
        Ark_LinearIndicatorController self = reinterpret_cast<Ark_LinearIndicatorController>(thisPtr);
        GetAccessors()->getLinearIndicatorControllerAccessor()->setProgress(self, (const Ark_Number*) (&index), (const Ark_Number*) (&progress));
}
KOALA_INTEROP_DIRECT_V3(LinearIndicatorController_setProgress, Ark_NativePointer, KInteropNumber, KInteropNumber)
void impl_LinearIndicatorController_start(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_LinearIndicatorController self = reinterpret_cast<Ark_LinearIndicatorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LinearIndicatorStartOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = LinearIndicatorStartOptions_serializer::read(thisDeserializer);
        }
        Opt_LinearIndicatorStartOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getLinearIndicatorControllerAccessor()->start(self, static_cast<Opt_LinearIndicatorStartOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(LinearIndicatorController_start, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_LinearIndicatorController_pause(Ark_NativePointer thisPtr) {
        Ark_LinearIndicatorController self = reinterpret_cast<Ark_LinearIndicatorController>(thisPtr);
        GetAccessors()->getLinearIndicatorControllerAccessor()->pause(self);
}
KOALA_INTEROP_DIRECT_V1(LinearIndicatorController_pause, Ark_NativePointer)
void impl_LinearIndicatorController_stop(Ark_NativePointer thisPtr) {
        Ark_LinearIndicatorController self = reinterpret_cast<Ark_LinearIndicatorController>(thisPtr);
        GetAccessors()->getLinearIndicatorControllerAccessor()->stop(self);
}
KOALA_INTEROP_DIRECT_V1(LinearIndicatorController_stop, Ark_NativePointer)
Ark_NativePointer impl_LineHeightStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_LengthMetrics lineHeightValueTemp = LengthMetrics_serializer::read(thisDeserializer);;
        return GetAccessors()->getLineHeightStyleAccessor()->construct(static_cast<Ark_LengthMetrics*>(&lineHeightValueTemp));
}
KOALA_INTEROP_DIRECT_2(LineHeightStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_LineHeightStyle_getFinalizer() {
        return GetAccessors()->getLineHeightStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LineHeightStyle_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_LineHeightStyle_getLineHeight(Ark_NativePointer thisPtr) {
        Ark_LineHeightStyle self = reinterpret_cast<Ark_LineHeightStyle>(thisPtr);
        return GetAccessors()->getLineHeightStyleAccessor()->getLineHeight(self);
}
KOALA_INTEROP_1(LineHeightStyle_getLineHeight, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_ListScroller_construct() {
        return GetAccessors()->getListScrollerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ListScroller_construct, Ark_NativePointer)
Ark_NativePointer impl_ListScroller_getFinalizer() {
        return GetAccessors()->getListScrollerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ListScroller_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_ListScroller_getItemRectInGroup(Ark_NativePointer thisPtr, Ark_Int32 index, Ark_Int32 indexInGroup) {
        Ark_ListScroller self = reinterpret_cast<Ark_ListScroller>(thisPtr);
        const auto &retValue = GetAccessors()->getListScrollerAccessor()->getItemRectInGroup(self, index, indexInGroup);
        SerializerBase _retSerializer {};
        RectResult_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(ListScroller_getItemRectInGroup, KInteropReturnBuffer, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_ListScroller_scrollToItemInGroup(Ark_NativePointer thisPtr, Ark_Int32 index, Ark_Int32 indexInGroup, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ListScroller self = reinterpret_cast<Ark_ListScroller>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto smoothValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean smoothValueTempTmpBuf = {};
        smoothValueTempTmpBuf.tag = smoothValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((smoothValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            smoothValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean smoothValueTemp = smoothValueTempTmpBuf;;
        const auto alignValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollAlign alignValueTempTmpBuf = {};
        alignValueTempTmpBuf.tag = alignValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((alignValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            alignValueTempTmpBuf.value = static_cast<Ark_ScrollAlign>(thisDeserializer.readInt32());
        }
        Opt_ScrollAlign alignValueTemp = alignValueTempTmpBuf;;
        GetAccessors()->getListScrollerAccessor()->scrollToItemInGroup(self, index, indexInGroup, static_cast<Opt_Boolean*>(&smoothValueTemp), static_cast<Opt_ScrollAlign*>(&alignValueTemp));
}
KOALA_INTEROP_DIRECT_V5(ListScroller_scrollToItemInGroup, Ark_NativePointer, Ark_Int32, Ark_Int32, KSerializerBuffer, int32_t)
void impl_ListScroller_closeAllSwipeActions(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ListScroller self = reinterpret_cast<Ark_ListScroller>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_CloseSwipeActionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = CloseSwipeActionOptions_serializer::read(thisDeserializer);
        }
        Opt_CloseSwipeActionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getListScrollerAccessor()->closeAllSwipeActions(self, static_cast<Opt_CloseSwipeActionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ListScroller_closeAllSwipeActions, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_ListScroller_getVisibleListContentInfo(Ark_NativePointer thisPtr, KDouble x, KDouble y) {
        Ark_ListScroller self = reinterpret_cast<Ark_ListScroller>(thisPtr);
        const auto &retValue = GetAccessors()->getListScrollerAccessor()->getVisibleListContentInfo(self, x, y);
        SerializerBase _retSerializer {};
        VisibleListContentInfo_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(ListScroller_getVisibleListContentInfo, KInteropReturnBuffer, Ark_NativePointer, KDouble, KDouble)
Ark_NativePointer impl_LongPressGestureEvent_construct() {
        return GetAccessors()->getLongPressGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(LongPressGestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_LongPressGestureEvent_getFinalizer() {
        return GetAccessors()->getLongPressGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LongPressGestureEvent_getFinalizer, Ark_NativePointer)
Ark_Boolean impl_LongPressGestureEvent_getRepeat(Ark_NativePointer thisPtr) {
        Ark_LongPressGestureEvent self = reinterpret_cast<Ark_LongPressGestureEvent>(thisPtr);
        return GetAccessors()->getLongPressGestureEventAccessor()->getRepeat(self);
}
KOALA_INTEROP_DIRECT_1(LongPressGestureEvent_getRepeat, Ark_Boolean, Ark_NativePointer)
void impl_LongPressGestureEvent_setRepeat(Ark_NativePointer thisPtr, Ark_Boolean repeat) {
        Ark_LongPressGestureEvent self = reinterpret_cast<Ark_LongPressGestureEvent>(thisPtr);
        GetAccessors()->getLongPressGestureEventAccessor()->setRepeat(self, repeat);
}
KOALA_INTEROP_DIRECT_V2(LongPressGestureEvent_setRepeat, Ark_NativePointer, Ark_Boolean)
Ark_NativePointer impl_LongPressRecognizer_construct() {
        return GetAccessors()->getLongPressRecognizerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(LongPressRecognizer_construct, Ark_NativePointer)
Ark_NativePointer impl_LongPressRecognizer_getFinalizer() {
        return GetAccessors()->getLongPressRecognizerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(LongPressRecognizer_getFinalizer, Ark_NativePointer)
Ark_Boolean impl_LongPressRecognizer_isRepeat(Ark_NativePointer thisPtr) {
        Ark_LongPressRecognizer self = reinterpret_cast<Ark_LongPressRecognizer>(thisPtr);
        return GetAccessors()->getLongPressRecognizerAccessor()->isRepeat(self);
}
KOALA_INTEROP_DIRECT_1(LongPressRecognizer_isRepeat, Ark_Boolean, Ark_NativePointer)
Ark_Int32 impl_LongPressRecognizer_getDuration(Ark_NativePointer thisPtr) {
        Ark_LongPressRecognizer self = reinterpret_cast<Ark_LongPressRecognizer>(thisPtr);
        return GetAccessors()->getLongPressRecognizerAccessor()->getDuration(self);
}
KOALA_INTEROP_DIRECT_1(LongPressRecognizer_getDuration, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_Matrix2D_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto unitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetricsUnit unitValueTempTmpBuf = {};
        unitValueTempTmpBuf.tag = unitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unitValueTempTmpBuf.value = static_cast<Ark_LengthMetricsUnit>(thisDeserializer.readInt32());
        }
        Opt_LengthMetricsUnit unitValueTemp = unitValueTempTmpBuf;;
        return GetAccessors()->getMatrix2DAccessor()->construct(static_cast<Opt_LengthMetricsUnit*>(&unitValueTemp));
}
KOALA_INTEROP_DIRECT_2(Matrix2D_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Matrix2D_getFinalizer() {
        return GetAccessors()->getMatrix2DAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(Matrix2D_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_Matrix2D_identity(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        return GetAccessors()->getMatrix2DAccessor()->identity(self);
}
KOALA_INTEROP_DIRECT_1(Matrix2D_identity, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_Matrix2D_invert(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        return GetAccessors()->getMatrix2DAccessor()->invert(self);
}
KOALA_INTEROP_DIRECT_1(Matrix2D_invert, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_Matrix2D_rotate(Ark_NativePointer thisPtr, KInteropNumber degree, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rxValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number rxValueTempTmpBuf = {};
        rxValueTempTmpBuf.tag = rxValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rxValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rxValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number rxValueTemp = rxValueTempTmpBuf;;
        const auto ryValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number ryValueTempTmpBuf = {};
        ryValueTempTmpBuf.tag = ryValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((ryValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            ryValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number ryValueTemp = ryValueTempTmpBuf;;
        return GetAccessors()->getMatrix2DAccessor()->rotate(self, (const Ark_Number*) (&degree), static_cast<Opt_Number*>(&rxValueTemp), static_cast<Opt_Number*>(&ryValueTemp));
}
KOALA_INTEROP_DIRECT_4(Matrix2D_rotate, Ark_NativePointer, Ark_NativePointer, KInteropNumber, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Matrix2D_translate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto txValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number txValueTempTmpBuf = {};
        txValueTempTmpBuf.tag = txValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((txValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            txValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number txValueTemp = txValueTempTmpBuf;;
        const auto tyValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number tyValueTempTmpBuf = {};
        tyValueTempTmpBuf.tag = tyValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((tyValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            tyValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number tyValueTemp = tyValueTempTmpBuf;;
        return GetAccessors()->getMatrix2DAccessor()->translate(self, static_cast<Opt_Number*>(&txValueTemp), static_cast<Opt_Number*>(&tyValueTemp));
}
KOALA_INTEROP_DIRECT_3(Matrix2D_translate, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Matrix2D_scale(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto sxValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number sxValueTempTmpBuf = {};
        sxValueTempTmpBuf.tag = sxValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sxValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            sxValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number sxValueTemp = sxValueTempTmpBuf;;
        const auto syValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number syValueTempTmpBuf = {};
        syValueTempTmpBuf.tag = syValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((syValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            syValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number syValueTemp = syValueTempTmpBuf;;
        return GetAccessors()->getMatrix2DAccessor()->scale(self, static_cast<Opt_Number*>(&sxValueTemp), static_cast<Opt_Number*>(&syValueTemp));
}
KOALA_INTEROP_DIRECT_3(Matrix2D_scale, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Matrix2D_getScaleX(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        const auto &retValue = GetAccessors()->getMatrix2DAccessor()->getScaleX(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Matrix2D_getScaleX, KInteropReturnBuffer, Ark_NativePointer)
void impl_Matrix2D_setScaleX(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scaleXValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number scaleXValueTempTmpBuf = {};
        scaleXValueTempTmpBuf.tag = scaleXValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scaleXValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scaleXValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number scaleXValueTemp = scaleXValueTempTmpBuf;;
        GetAccessors()->getMatrix2DAccessor()->setScaleX(self, static_cast<Opt_Number*>(&scaleXValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Matrix2D_setScaleX, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Matrix2D_getScaleY(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        const auto &retValue = GetAccessors()->getMatrix2DAccessor()->getScaleY(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Matrix2D_getScaleY, KInteropReturnBuffer, Ark_NativePointer)
void impl_Matrix2D_setScaleY(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scaleYValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number scaleYValueTempTmpBuf = {};
        scaleYValueTempTmpBuf.tag = scaleYValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scaleYValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scaleYValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number scaleYValueTemp = scaleYValueTempTmpBuf;;
        GetAccessors()->getMatrix2DAccessor()->setScaleY(self, static_cast<Opt_Number*>(&scaleYValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Matrix2D_setScaleY, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Matrix2D_getRotateX(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        const auto &retValue = GetAccessors()->getMatrix2DAccessor()->getRotateX(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Matrix2D_getRotateX, KInteropReturnBuffer, Ark_NativePointer)
void impl_Matrix2D_setRotateX(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rotateXValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number rotateXValueTempTmpBuf = {};
        rotateXValueTempTmpBuf.tag = rotateXValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rotateXValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rotateXValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number rotateXValueTemp = rotateXValueTempTmpBuf;;
        GetAccessors()->getMatrix2DAccessor()->setRotateX(self, static_cast<Opt_Number*>(&rotateXValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Matrix2D_setRotateX, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Matrix2D_getRotateY(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        const auto &retValue = GetAccessors()->getMatrix2DAccessor()->getRotateY(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Matrix2D_getRotateY, KInteropReturnBuffer, Ark_NativePointer)
void impl_Matrix2D_setRotateY(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rotateYValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number rotateYValueTempTmpBuf = {};
        rotateYValueTempTmpBuf.tag = rotateYValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rotateYValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rotateYValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number rotateYValueTemp = rotateYValueTempTmpBuf;;
        GetAccessors()->getMatrix2DAccessor()->setRotateY(self, static_cast<Opt_Number*>(&rotateYValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Matrix2D_setRotateY, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Matrix2D_getTranslateX(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        const auto &retValue = GetAccessors()->getMatrix2DAccessor()->getTranslateX(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Matrix2D_getTranslateX, KInteropReturnBuffer, Ark_NativePointer)
void impl_Matrix2D_setTranslateX(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto translateXValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number translateXValueTempTmpBuf = {};
        translateXValueTempTmpBuf.tag = translateXValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((translateXValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            translateXValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number translateXValueTemp = translateXValueTempTmpBuf;;
        GetAccessors()->getMatrix2DAccessor()->setTranslateX(self, static_cast<Opt_Number*>(&translateXValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Matrix2D_setTranslateX, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Matrix2D_getTranslateY(Ark_NativePointer thisPtr) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        const auto &retValue = GetAccessors()->getMatrix2DAccessor()->getTranslateY(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Matrix2D_getTranslateY, KInteropReturnBuffer, Ark_NativePointer)
void impl_Matrix2D_setTranslateY(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Matrix2D self = reinterpret_cast<Ark_Matrix2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto translateYValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number translateYValueTempTmpBuf = {};
        translateYValueTempTmpBuf.tag = translateYValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((translateYValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            translateYValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number translateYValueTemp = translateYValueTempTmpBuf;;
        GetAccessors()->getMatrix2DAccessor()->setTranslateY(self, static_cast<Opt_Number*>(&translateYValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Matrix2D_setTranslateY, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_Measurable_construct() {
        return GetAccessors()->getMeasurableAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(Measurable_construct, Ark_NativePointer)
Ark_NativePointer impl_Measurable_getFinalizer() {
        return GetAccessors()->getMeasurableAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(Measurable_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_Measurable_measure(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Measurable self = reinterpret_cast<Ark_Measurable>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ConstraintSizeOptions constraintValueTemp = ConstraintSizeOptions_serializer::read(thisDeserializer);;
        const auto &retValue = GetAccessors()->getMeasurableAccessor()->measure(self, static_cast<Ark_ConstraintSizeOptions*>(&constraintValueTemp));
        SerializerBase _retSerializer {};
        MeasureResult_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(Measurable_measure, KInteropReturnBuffer, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Measurable_getMargin(Ark_NativePointer thisPtr) {
        Ark_Measurable self = reinterpret_cast<Ark_Measurable>(thisPtr);
        const auto &retValue = GetAccessors()->getMeasurableAccessor()->getMargin(self);
        SerializerBase _retSerializer {};
        DirectionalEdgesT_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Measurable_getMargin, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_Measurable_getPadding(Ark_NativePointer thisPtr) {
        Ark_Measurable self = reinterpret_cast<Ark_Measurable>(thisPtr);
        const auto &retValue = GetAccessors()->getMeasurableAccessor()->getPadding(self);
        SerializerBase _retSerializer {};
        DirectionalEdgesT_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Measurable_getPadding, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_Measurable_getBorderWidth(Ark_NativePointer thisPtr) {
        Ark_Measurable self = reinterpret_cast<Ark_Measurable>(thisPtr);
        const auto &retValue = GetAccessors()->getMeasurableAccessor()->getBorderWidth(self);
        SerializerBase _retSerializer {};
        DirectionalEdgesT_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Measurable_getBorderWidth, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_Measurable_getUniqueId(Ark_NativePointer thisPtr) {
        Ark_Measurable self = reinterpret_cast<Ark_Measurable>(thisPtr);
        const auto &retValue = GetAccessors()->getMeasurableAccessor()->getUniqueId(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeNumber(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Measurable_getUniqueId, KInteropReturnBuffer, Ark_NativePointer)
void impl_Measurable_setUniqueId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Measurable self = reinterpret_cast<Ark_Measurable>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto uniqueIdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number uniqueIdValueTempTmpBuf = {};
        uniqueIdValueTempTmpBuf.tag = uniqueIdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((uniqueIdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            uniqueIdValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number uniqueIdValueTemp = uniqueIdValueTempTmpBuf;;
        GetAccessors()->getMeasurableAccessor()->setUniqueId(self, static_cast<Opt_Number*>(&uniqueIdValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Measurable_setUniqueId, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_MouseEvent_construct() {
        return GetAccessors()->getMouseEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(MouseEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_MouseEvent_getFinalizer() {
        return GetAccessors()->getMouseEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(MouseEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_MouseEvent_getButton(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getButton(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getButton, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setButton(Ark_NativePointer thisPtr, Ark_Int32 button) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setButton(self, static_cast<Ark_MouseButton>(button));
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setButton, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_MouseEvent_getAction(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getAction(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getAction, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setAction(Ark_NativePointer thisPtr, Ark_Int32 action) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setAction(self, static_cast<Ark_MouseAction>(action));
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setAction, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_MouseEvent_getDisplayX(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getDisplayX(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getDisplayX, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setDisplayX(Ark_NativePointer thisPtr, KDouble displayX) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setDisplayX(self, displayX);
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setDisplayX, Ark_NativePointer, KDouble)
Ark_Int32 impl_MouseEvent_getDisplayY(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getDisplayY(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getDisplayY, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setDisplayY(Ark_NativePointer thisPtr, KDouble displayY) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setDisplayY(self, displayY);
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setDisplayY, Ark_NativePointer, KDouble)
Ark_Int32 impl_MouseEvent_getWindowX(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getWindowX(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getWindowX, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setWindowX(Ark_NativePointer thisPtr, KDouble windowX) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setWindowX(self, windowX);
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setWindowX, Ark_NativePointer, KDouble)
Ark_Int32 impl_MouseEvent_getWindowY(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getWindowY(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getWindowY, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setWindowY(Ark_NativePointer thisPtr, KDouble windowY) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setWindowY(self, windowY);
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setWindowY, Ark_NativePointer, KDouble)
Ark_Int32 impl_MouseEvent_getX(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getX(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getX, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setX(Ark_NativePointer thisPtr, KDouble x) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setX(self, x);
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setX, Ark_NativePointer, KDouble)
Ark_Int32 impl_MouseEvent_getY(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        return GetAccessors()->getMouseEventAccessor()->getY(self);
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getY, Ark_Int32, Ark_NativePointer)
void impl_MouseEvent_setY(Ark_NativePointer thisPtr, KDouble y) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        GetAccessors()->getMouseEventAccessor()->setY(self, y);
}
KOALA_INTEROP_DIRECT_V2(MouseEvent_setY, Ark_NativePointer, KDouble)
Ark_NativePointer impl_MouseEvent_getStopPropagation(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getMouseEventAccessor()->getStopPropagation(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(MouseEvent_getStopPropagation, Ark_NativePointer, Ark_NativePointer)
void impl_MouseEvent_setStopPropagation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void stopPropagationValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getMouseEventAccessor()->setStopPropagation(self, static_cast<Callback_Void*>(&stopPropagationValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MouseEvent_setStopPropagation, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_MouseEvent_getRawDeltaX(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getMouseEventAccessor()->getRawDeltaX(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(MouseEvent_getRawDeltaX, KInteropReturnBuffer, Ark_NativePointer)
void impl_MouseEvent_setRawDeltaX(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rawDeltaXValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 rawDeltaXValueTempTmpBuf = {};
        rawDeltaXValueTempTmpBuf.tag = rawDeltaXValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rawDeltaXValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rawDeltaXValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 rawDeltaXValueTemp = rawDeltaXValueTempTmpBuf;;
        GetAccessors()->getMouseEventAccessor()->setRawDeltaX(self, static_cast<Opt_Float64*>(&rawDeltaXValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MouseEvent_setRawDeltaX, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_MouseEvent_getRawDeltaY(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getMouseEventAccessor()->getRawDeltaY(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(MouseEvent_getRawDeltaY, KInteropReturnBuffer, Ark_NativePointer)
void impl_MouseEvent_setRawDeltaY(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rawDeltaYValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Float64 rawDeltaYValueTempTmpBuf = {};
        rawDeltaYValueTempTmpBuf.tag = rawDeltaYValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rawDeltaYValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rawDeltaYValueTempTmpBuf.value = thisDeserializer.readFloat64();
        }
        Opt_Float64 rawDeltaYValueTemp = rawDeltaYValueTempTmpBuf;;
        GetAccessors()->getMouseEventAccessor()->setRawDeltaY(self, static_cast<Opt_Float64*>(&rawDeltaYValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MouseEvent_setRawDeltaY, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_MouseEvent_getPressedButtons(Ark_NativePointer thisPtr) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getMouseEventAccessor()->getPressedButtons(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(retValueTmpValue.length);
            for (int retValueTmpValueCounterI = 0; retValueTmpValueCounterI < retValueTmpValue.length; retValueTmpValueCounterI++) {
                const Ark_MouseButton retValueTmpValueTmpElement = retValueTmpValue.array[retValueTmpValueCounterI];
                _retSerializer.writeInt32(static_cast<Ark_MouseButton>(retValueTmpValueTmpElement));
            }
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(MouseEvent_getPressedButtons, KInteropReturnBuffer, Ark_NativePointer)
void impl_MouseEvent_setPressedButtons(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_MouseEvent self = reinterpret_cast<Ark_MouseEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto pressedButtonsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_MouseButton pressedButtonsValueTempTmpBuf = {};
        pressedButtonsValueTempTmpBuf.tag = pressedButtonsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((pressedButtonsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 pressedButtonsValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_MouseButton pressedButtonsValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(pressedButtonsValueTempTmpBuf_)>::type,
        std::decay<decltype(*pressedButtonsValueTempTmpBuf_.array)>::type>(&pressedButtonsValueTempTmpBuf_, pressedButtonsValueTempTmpBuf_Length);
            for (int pressedButtonsValueTempTmpBuf_BufCounterI = 0; pressedButtonsValueTempTmpBuf_BufCounterI < pressedButtonsValueTempTmpBuf_Length; pressedButtonsValueTempTmpBuf_BufCounterI++) {
                pressedButtonsValueTempTmpBuf_.array[pressedButtonsValueTempTmpBuf_BufCounterI] = static_cast<Ark_MouseButton>(thisDeserializer.readInt32());
            }
            pressedButtonsValueTempTmpBuf.value = pressedButtonsValueTempTmpBuf_;
        }
        Opt_Array_MouseButton pressedButtonsValueTemp = pressedButtonsValueTempTmpBuf;;
        GetAccessors()->getMouseEventAccessor()->setPressedButtons(self, static_cast<Opt_Array_MouseButton*>(&pressedButtonsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MouseEvent_setPressedButtons, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_MutableStyledString_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_ImageAttachment_CustomSpan valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = static_cast<Ark_ImageAttachment>(ImageAttachment_serializer::read(thisDeserializer));
        } else if (valueValueTempTmpBufUnionSelector == 2) {
            valueValueTempTmpBuf.selector = 2;
            valueValueTempTmpBuf.value2 = static_cast<Ark_CustomSpan>(CustomSpan_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_ImageAttachment_CustomSpan valueValueTemp = static_cast<Ark_Union_String_ImageAttachment_CustomSpan>(valueValueTempTmpBuf);;
        const auto stylesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_StyleOptions stylesValueTempTmpBuf = {};
        stylesValueTempTmpBuf.tag = stylesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((stylesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 stylesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_StyleOptions stylesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(stylesValueTempTmpBuf_)>::type,
        std::decay<decltype(*stylesValueTempTmpBuf_.array)>::type>(&stylesValueTempTmpBuf_, stylesValueTempTmpBuf_Length);
            for (int stylesValueTempTmpBuf_BufCounterI = 0; stylesValueTempTmpBuf_BufCounterI < stylesValueTempTmpBuf_Length; stylesValueTempTmpBuf_BufCounterI++) {
                stylesValueTempTmpBuf_.array[stylesValueTempTmpBuf_BufCounterI] = StyleOptions_serializer::read(thisDeserializer);
            }
            stylesValueTempTmpBuf.value = stylesValueTempTmpBuf_;
        }
        Opt_Array_StyleOptions stylesValueTemp = stylesValueTempTmpBuf;;
        return GetAccessors()->getMutableStyledStringAccessor()->construct(static_cast<Ark_Union_String_ImageAttachment_CustomSpan*>(&valueValueTemp), static_cast<Opt_Array_StyleOptions*>(&stylesValueTemp));
}
KOALA_INTEROP_DIRECT_2(MutableStyledString_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_MutableStyledString_getFinalizer() {
        return GetAccessors()->getMutableStyledStringAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(MutableStyledString_getFinalizer, Ark_NativePointer)
void impl_MutableStyledString_replaceString(Ark_NativePointer thisPtr, Ark_Int32 start, Ark_Int32 length, const KStringPtr& other) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->replaceString(self, start, length, (const Ark_String*) (&other));
}
KOALA_INTEROP_V4(MutableStyledString_replaceString, Ark_NativePointer, Ark_Int32, Ark_Int32, KStringPtr)
void impl_MutableStyledString_insertString(Ark_NativePointer thisPtr, Ark_Int32 start, const KStringPtr& other) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->insertString(self, start, (const Ark_String*) (&other));
}
KOALA_INTEROP_V3(MutableStyledString_insertString, Ark_NativePointer, Ark_Int32, KStringPtr)
void impl_MutableStyledString_removeString(Ark_NativePointer thisPtr, Ark_Int32 start, Ark_Int32 length) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->removeString(self, start, length);
}
KOALA_INTEROP_DIRECT_V3(MutableStyledString_removeString, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_MutableStyledString_replaceStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_SpanStyle spanStyleValueTemp = SpanStyle_serializer::read(thisDeserializer);;
        GetAccessors()->getMutableStyledStringAccessor()->replaceStyle(self, static_cast<Ark_SpanStyle*>(&spanStyleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MutableStyledString_replaceStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MutableStyledString_setStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_SpanStyle spanStyleValueTemp = SpanStyle_serializer::read(thisDeserializer);;
        GetAccessors()->getMutableStyledStringAccessor()->setStyle(self, static_cast<Ark_SpanStyle*>(&spanStyleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(MutableStyledString_setStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_MutableStyledString_removeStyle(Ark_NativePointer thisPtr, Ark_Int32 start, Ark_Int32 length, Ark_Int32 styledKey) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->removeStyle(self, start, length, static_cast<Ark_StyledStringKey>(styledKey));
}
KOALA_INTEROP_DIRECT_V4(MutableStyledString_removeStyle, Ark_NativePointer, Ark_Int32, Ark_Int32, Ark_Int32)
void impl_MutableStyledString_removeStyles(Ark_NativePointer thisPtr, Ark_Int32 start, Ark_Int32 length) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->removeStyles(self, start, length);
}
KOALA_INTEROP_DIRECT_V3(MutableStyledString_removeStyles, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_MutableStyledString_clearStyles(Ark_NativePointer thisPtr) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->clearStyles(self);
}
KOALA_INTEROP_DIRECT_V1(MutableStyledString_clearStyles, Ark_NativePointer)
void impl_MutableStyledString_replaceStyledString(Ark_NativePointer thisPtr, Ark_Int32 start, Ark_Int32 length, Ark_NativePointer other) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->replaceStyledString(self, start, length, static_cast<Ark_StyledString>(other));
}
KOALA_INTEROP_DIRECT_V4(MutableStyledString_replaceStyledString, Ark_NativePointer, Ark_Int32, Ark_Int32, Ark_NativePointer)
void impl_MutableStyledString_insertStyledString(Ark_NativePointer thisPtr, Ark_Int32 start, Ark_NativePointer other) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->insertStyledString(self, start, static_cast<Ark_StyledString>(other));
}
KOALA_INTEROP_DIRECT_V3(MutableStyledString_insertStyledString, Ark_NativePointer, Ark_Int32, Ark_NativePointer)
void impl_MutableStyledString_appendStyledString(Ark_NativePointer thisPtr, Ark_NativePointer other) {
        Ark_MutableStyledString self = reinterpret_cast<Ark_MutableStyledString>(thisPtr);
        GetAccessors()->getMutableStyledStringAccessor()->appendStyledString(self, static_cast<Ark_StyledString>(other));
}
KOALA_INTEROP_DIRECT_V2(MutableStyledString_appendStyledString, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_NavDestinationContext_construct() {
        return GetAccessors()->getNavDestinationContextAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(NavDestinationContext_construct, Ark_NativePointer)
Ark_NativePointer impl_NavDestinationContext_getFinalizer() {
        return GetAccessors()->getNavDestinationContextAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(NavDestinationContext_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_NavDestinationContext_getConfigInRouteMap(Ark_NativePointer thisPtr) {
        Ark_NavDestinationContext self = reinterpret_cast<Ark_NavDestinationContext>(thisPtr);
        const auto &retValue = GetAccessors()->getNavDestinationContextAccessor()->getConfigInRouteMap(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            RouteMapConfig_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavDestinationContext_getConfigInRouteMap, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_NavDestinationContext_getPathInfo(Ark_NativePointer thisPtr) {
        Ark_NavDestinationContext self = reinterpret_cast<Ark_NavDestinationContext>(thisPtr);
        return GetAccessors()->getNavDestinationContextAccessor()->getPathInfo(self);
}
KOALA_INTEROP_DIRECT_1(NavDestinationContext_getPathInfo, Ark_NativePointer, Ark_NativePointer)
void impl_NavDestinationContext_setPathInfo(Ark_NativePointer thisPtr, Ark_NativePointer pathInfo) {
        Ark_NavDestinationContext self = reinterpret_cast<Ark_NavDestinationContext>(thisPtr);
        GetAccessors()->getNavDestinationContextAccessor()->setPathInfo(self, static_cast<Ark_NavPathInfo>(pathInfo));
}
KOALA_INTEROP_DIRECT_V2(NavDestinationContext_setPathInfo, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_NavDestinationContext_getPathStack(Ark_NativePointer thisPtr) {
        Ark_NavDestinationContext self = reinterpret_cast<Ark_NavDestinationContext>(thisPtr);
        return GetAccessors()->getNavDestinationContextAccessor()->getPathStack(self);
}
KOALA_INTEROP_DIRECT_1(NavDestinationContext_getPathStack, Ark_NativePointer, Ark_NativePointer)
void impl_NavDestinationContext_setPathStack(Ark_NativePointer thisPtr, Ark_NativePointer pathStack) {
        Ark_NavDestinationContext self = reinterpret_cast<Ark_NavDestinationContext>(thisPtr);
        GetAccessors()->getNavDestinationContextAccessor()->setPathStack(self, static_cast<Ark_NavPathStack>(pathStack));
}
KOALA_INTEROP_DIRECT_V2(NavDestinationContext_setPathStack, Ark_NativePointer, Ark_NativePointer)
KInteropReturnBuffer impl_NavDestinationContext_getNavDestinationId(Ark_NativePointer thisPtr) {
        Ark_NavDestinationContext self = reinterpret_cast<Ark_NavDestinationContext>(thisPtr);
        const auto &retValue = GetAccessors()->getNavDestinationContextAccessor()->getNavDestinationId(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeString(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavDestinationContext_getNavDestinationId, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavDestinationContext_setNavDestinationId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavDestinationContext self = reinterpret_cast<Ark_NavDestinationContext>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto navDestinationIdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String navDestinationIdValueTempTmpBuf = {};
        navDestinationIdValueTempTmpBuf.tag = navDestinationIdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((navDestinationIdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            navDestinationIdValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String navDestinationIdValueTemp = navDestinationIdValueTempTmpBuf;;
        GetAccessors()->getNavDestinationContextAccessor()->setNavDestinationId(self, static_cast<Opt_String*>(&navDestinationIdValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavDestinationContext_setNavDestinationId, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavExtender_setNavigationOptions(Ark_NativePointer ptr, Ark_NativePointer pathStack) {
        GetAccessors()->getNavExtenderAccessor()->setNavigationOptions(ptr, static_cast<Ark_NavPathStack>(pathStack));
}
KOALA_INTEROP_DIRECT_V2(NavExtender_setNavigationOptions, Ark_NativePointer, Ark_NativePointer)
void impl_NavExtender_setUpdateStackCallback(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        NavExtender_OnUpdateStack callbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_NavExtender_OnUpdateStack)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_NavExtender_OnUpdateStack))))};;
        GetAccessors()->getNavExtenderAccessor()->setUpdateStackCallback(static_cast<Ark_NavPathStack>(peer), static_cast<NavExtender_OnUpdateStack*>(&callbackValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavExtender_setUpdateStackCallback, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavExtender_syncStack(Ark_NativePointer peer) {
        GetAccessors()->getNavExtenderAccessor()->syncStack(static_cast<Ark_NavPathStack>(peer));
}
KOALA_INTEROP_DIRECT_V1(NavExtender_syncStack, Ark_NativePointer)
Ark_Boolean impl_NavExtender_checkNeedCreate(Ark_NativePointer navigation, Ark_Int32 index) {
        return GetAccessors()->getNavExtenderAccessor()->checkNeedCreate(navigation, index);
}
KOALA_INTEROP_DIRECT_2(NavExtender_checkNeedCreate, Ark_Boolean, Ark_NativePointer, Ark_Int32)
void impl_NavExtender_setNavDestinationNode(Ark_NativePointer peer, Ark_Int32 index, Ark_NativePointer node) {
        GetAccessors()->getNavExtenderAccessor()->setNavDestinationNode(static_cast<Ark_NavPathStack>(peer), index, node);
}
KOALA_INTEROP_DIRECT_V3(NavExtender_setNavDestinationNode, Ark_NativePointer, Ark_Int32, Ark_NativePointer)
void impl_NavExtender_pushPath(Ark_NativePointer pathStack, Ark_NativePointer info, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_NavigationOptions optionsValueTemp = NavigationOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getNavExtenderAccessor()->pushPath(static_cast<Ark_NavPathStack>(pathStack), static_cast<Ark_NavPathInfo>(info), static_cast<Ark_NavigationOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V4(NavExtender_pushPath, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavExtender_replacePath(Ark_NativePointer pathStack, Ark_NativePointer info, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_NavigationOptions optionsValueTemp = NavigationOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getNavExtenderAccessor()->replacePath(static_cast<Ark_NavPathStack>(pathStack), static_cast<Ark_NavPathInfo>(info), static_cast<Ark_NavigationOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V4(NavExtender_replacePath, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_String impl_NavExtender_pop(Ark_NativePointer pathStack, Ark_Boolean animated) {
        return GetAccessors()->getNavExtenderAccessor()->pop(static_cast<Ark_NavPathStack>(pathStack), animated);
}
KOALA_INTEROP_2(NavExtender_pop, KStringPtr, Ark_NativePointer, Ark_Boolean)
void impl_NavExtender_setOnPopCallback(Ark_NativePointer pathStack, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_String_Void popCallbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String breakpoints)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String breakpoints)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};;
        GetAccessors()->getNavExtenderAccessor()->setOnPopCallback(static_cast<Ark_NavPathStack>(pathStack), static_cast<Callback_String_Void*>(&popCallbackValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavExtender_setOnPopCallback, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_String impl_NavExtender_getIdByIndex(Ark_NativePointer pathStack, Ark_Int32 index) {
        return GetAccessors()->getNavExtenderAccessor()->getIdByIndex(static_cast<Ark_NavPathStack>(pathStack), index);
}
KOALA_INTEROP_2(NavExtender_getIdByIndex, KStringPtr, Ark_NativePointer, Ark_Int32)
KInteropReturnBuffer impl_NavExtender_getIdByName(Ark_NativePointer pathStack, const KStringPtr& name) {
        const auto &retValue = GetAccessors()->getNavExtenderAccessor()->getIdByName(static_cast<Ark_NavPathStack>(pathStack), (const Ark_String*) (&name));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_String retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeString(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(NavExtender_getIdByName, KInteropReturnBuffer, Ark_NativePointer, KStringPtr)
void impl_NavExtender_popToIndex(Ark_NativePointer pathStack, Ark_Int32 index, Ark_Boolean animated) {
        GetAccessors()->getNavExtenderAccessor()->popToIndex(static_cast<Ark_NavPathStack>(pathStack), index, animated);
}
KOALA_INTEROP_DIRECT_V3(NavExtender_popToIndex, Ark_NativePointer, Ark_Int32, Ark_Boolean)
Ark_Int32 impl_NavExtender_popToName(Ark_NativePointer pathStack, const KStringPtr& name, Ark_Boolean animated) {
        return GetAccessors()->getNavExtenderAccessor()->popToName(static_cast<Ark_NavPathStack>(pathStack), (const Ark_String*) (&name), animated);
}
KOALA_INTEROP_3(NavExtender_popToName, KInteropNumber, Ark_NativePointer, KStringPtr, Ark_Boolean)
Ark_NativePointer impl_NavigationTransitionProxy_construct() {
        return GetAccessors()->getNavigationTransitionProxyAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(NavigationTransitionProxy_construct, Ark_NativePointer)
Ark_NativePointer impl_NavigationTransitionProxy_getFinalizer() {
        return GetAccessors()->getNavigationTransitionProxyAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(NavigationTransitionProxy_getFinalizer, Ark_NativePointer)
void impl_NavigationTransitionProxy_finishTransition(Ark_NativePointer thisPtr) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        GetAccessors()->getNavigationTransitionProxyAccessor()->finishTransition(self);
}
KOALA_INTEROP_DIRECT_V1(NavigationTransitionProxy_finishTransition, Ark_NativePointer)
KInteropReturnBuffer impl_NavigationTransitionProxy_getFrom(Ark_NativePointer thisPtr) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        const auto &retValue = GetAccessors()->getNavigationTransitionProxyAccessor()->getFrom(self);
        SerializerBase _retSerializer {};
        NavContentInfo_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavigationTransitionProxy_getFrom, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavigationTransitionProxy_setFrom(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_NavContentInfo fromValueTemp = NavContentInfo_serializer::read(thisDeserializer);;
        GetAccessors()->getNavigationTransitionProxyAccessor()->setFrom(self, static_cast<Ark_NavContentInfo*>(&fromValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationTransitionProxy_setFrom, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavigationTransitionProxy_getTo(Ark_NativePointer thisPtr) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        const auto &retValue = GetAccessors()->getNavigationTransitionProxyAccessor()->getTo(self);
        SerializerBase _retSerializer {};
        NavContentInfo_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavigationTransitionProxy_getTo, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavigationTransitionProxy_setTo(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_NavContentInfo toValueTemp = NavContentInfo_serializer::read(thisDeserializer);;
        GetAccessors()->getNavigationTransitionProxyAccessor()->setTo(self, static_cast<Ark_NavContentInfo*>(&toValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationTransitionProxy_setTo, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavigationTransitionProxy_getIsInteractive(Ark_NativePointer thisPtr) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        const auto &retValue = GetAccessors()->getNavigationTransitionProxyAccessor()->getIsInteractive(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeBoolean(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavigationTransitionProxy_getIsInteractive, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavigationTransitionProxy_setIsInteractive(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isInteractiveValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isInteractiveValueTempTmpBuf = {};
        isInteractiveValueTempTmpBuf.tag = isInteractiveValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isInteractiveValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isInteractiveValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isInteractiveValueTemp = isInteractiveValueTempTmpBuf;;
        GetAccessors()->getNavigationTransitionProxyAccessor()->setIsInteractive(self, static_cast<Opt_Boolean*>(&isInteractiveValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationTransitionProxy_setIsInteractive, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavigationTransitionProxy_getCancelTransition(Ark_NativePointer thisPtr) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        const auto &retValue = GetAccessors()->getNavigationTransitionProxyAccessor()->getCancelTransition(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavigationTransitionProxy_getCancelTransition, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavigationTransitionProxy_setCancelTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto cancelTransitionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback cancelTransitionValueTempTmpBuf = {};
        cancelTransitionValueTempTmpBuf.tag = cancelTransitionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((cancelTransitionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            cancelTransitionValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback cancelTransitionValueTemp = cancelTransitionValueTempTmpBuf;;
        GetAccessors()->getNavigationTransitionProxyAccessor()->setCancelTransition(self, static_cast<Opt_VoidCallback*>(&cancelTransitionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationTransitionProxy_setCancelTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavigationTransitionProxy_getUpdateTransition(Ark_NativePointer thisPtr) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        const auto &retValue = GetAccessors()->getNavigationTransitionProxyAccessor()->getUpdateTransition(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavigationTransitionProxy_getUpdateTransition, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavigationTransitionProxy_setUpdateTransition(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavigationTransitionProxy self = reinterpret_cast<Ark_NavigationTransitionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto updateTransitionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_UpdateTransitionCallback updateTransitionValueTempTmpBuf = {};
        updateTransitionValueTempTmpBuf.tag = updateTransitionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((updateTransitionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            updateTransitionValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Float64 progress)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_UpdateTransitionCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Float64 progress)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_UpdateTransitionCallback))))};
        }
        Opt_UpdateTransitionCallback updateTransitionValueTemp = updateTransitionValueTempTmpBuf;;
        GetAccessors()->getNavigationTransitionProxyAccessor()->setUpdateTransition(self, static_cast<Opt_UpdateTransitionCallback*>(&updateTransitionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavigationTransitionProxy_setUpdateTransition, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_NavPathInfo_construct(const KStringPtr& name, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto paramValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Object paramValueTempTmpBuf = {};
        paramValueTempTmpBuf.tag = paramValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((paramValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            paramValueTempTmpBuf.value = static_cast<Ark_Object>(thisDeserializer.readObject());
        }
        Opt_Object paramValueTemp = paramValueTempTmpBuf;;
        const auto onPopValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_PopInfo_Void onPopValueTempTmpBuf = {};
        onPopValueTempTmpBuf.tag = onPopValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onPopValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onPopValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PopInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PopInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PopInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PopInfo_Void))))};
        }
        Opt_Callback_PopInfo_Void onPopValueTemp = onPopValueTempTmpBuf;;
        const auto isEntryValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isEntryValueTempTmpBuf = {};
        isEntryValueTempTmpBuf.tag = isEntryValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isEntryValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isEntryValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isEntryValueTemp = isEntryValueTempTmpBuf;;
        return GetAccessors()->getNavPathInfoAccessor()->construct((const Ark_String*) (&name), static_cast<Opt_Object*>(&paramValueTemp), static_cast<Opt_Callback_PopInfo_Void*>(&onPopValueTemp), static_cast<Opt_Boolean*>(&isEntryValueTemp));
}
KOALA_INTEROP_3(NavPathInfo_construct, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
Ark_NativePointer impl_NavPathInfo_getFinalizer() {
        return GetAccessors()->getNavPathInfoAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(NavPathInfo_getFinalizer, Ark_NativePointer)
Ark_String impl_NavPathInfo_getName(Ark_NativePointer thisPtr) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        return GetAccessors()->getNavPathInfoAccessor()->getName(self);
}
KOALA_INTEROP_1(NavPathInfo_getName, KStringPtr, Ark_NativePointer)
void impl_NavPathInfo_setName(Ark_NativePointer thisPtr, const KStringPtr& name) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        GetAccessors()->getNavPathInfoAccessor()->setName(self, (const Ark_String*) (&name));
}
KOALA_INTEROP_V2(NavPathInfo_setName, Ark_NativePointer, KStringPtr)
KInteropReturnBuffer impl_NavPathInfo_getParam(Ark_NativePointer thisPtr) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathInfoAccessor()->getParam(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeObject(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavPathInfo_getParam, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavPathInfo_setParam(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto paramValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Object paramValueTempTmpBuf = {};
        paramValueTempTmpBuf.tag = paramValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((paramValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            paramValueTempTmpBuf.value = static_cast<Ark_Object>(thisDeserializer.readObject());
        }
        Opt_Object paramValueTemp = paramValueTempTmpBuf;;
        GetAccessors()->getNavPathInfoAccessor()->setParam(self, static_cast<Opt_Object*>(&paramValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavPathInfo_setParam, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavPathInfo_getOnPop(Ark_NativePointer thisPtr) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathInfoAccessor()->getOnPop(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavPathInfo_getOnPop, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavPathInfo_setOnPop(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto onPopValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_PopInfo_Void onPopValueTempTmpBuf = {};
        onPopValueTempTmpBuf.tag = onPopValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onPopValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onPopValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PopInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PopInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PopInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PopInfo_Void))))};
        }
        Opt_Callback_PopInfo_Void onPopValueTemp = onPopValueTempTmpBuf;;
        GetAccessors()->getNavPathInfoAccessor()->setOnPop(self, static_cast<Opt_Callback_PopInfo_Void*>(&onPopValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavPathInfo_setOnPop, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavPathInfo_getIsEntry(Ark_NativePointer thisPtr) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathInfoAccessor()->getIsEntry(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeBoolean(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavPathInfo_getIsEntry, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavPathInfo_setIsEntry(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto isEntryValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean isEntryValueTempTmpBuf = {};
        isEntryValueTempTmpBuf.tag = isEntryValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((isEntryValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            isEntryValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean isEntryValueTemp = isEntryValueTempTmpBuf;;
        GetAccessors()->getNavPathInfoAccessor()->setIsEntry(self, static_cast<Opt_Boolean*>(&isEntryValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavPathInfo_setIsEntry, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavPathInfo_getNavDestinationId(Ark_NativePointer thisPtr) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathInfoAccessor()->getNavDestinationId(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeString(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavPathInfo_getNavDestinationId, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavPathInfo_setNavDestinationId(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathInfo self = reinterpret_cast<Ark_NavPathInfo>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto navDestinationIdValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String navDestinationIdValueTempTmpBuf = {};
        navDestinationIdValueTempTmpBuf.tag = navDestinationIdValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((navDestinationIdValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            navDestinationIdValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String navDestinationIdValueTemp = navDestinationIdValueTempTmpBuf;;
        GetAccessors()->getNavPathInfoAccessor()->setNavDestinationId(self, static_cast<Opt_String*>(&navDestinationIdValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavPathInfo_setNavDestinationId, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_NavPathStack_construct() {
        return GetAccessors()->getNavPathStackAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(NavPathStack_construct, Ark_NativePointer)
Ark_NativePointer impl_NavPathStack_getFinalizer() {
        return GetAccessors()->getNavPathStackAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(NavPathStack_getFinalizer, Ark_NativePointer)
void impl_NavPathStack_pushDestination0(KVMContext vmContext, Ark_NativePointer thisPtr, Ark_NativePointer info, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getNavPathStackAccessor()->pushDestination0(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, static_cast<Ark_NavPathInfo>(info), static_cast<Opt_Boolean*>(&animatedValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V4(NavPathStack_pushDestination0, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavPathStack_pushDestination1(KVMContext vmContext, Ark_NativePointer thisPtr, Ark_NativePointer info, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationOptions optionsValueTemp = optionsValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getNavPathStackAccessor()->pushDestination1(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, static_cast<Ark_NavPathInfo>(info), static_cast<Opt_NavigationOptions*>(&optionsValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V4(NavPathStack_pushDestination1, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NavPathStack_pushDestinationByName0(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& name, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object paramValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getNavPathStackAccessor()->pushDestinationByName0(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, (const Ark_String*) (&name), static_cast<Ark_Object*>(&paramValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V4(NavPathStack_pushDestinationByName0, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_NavPathStack_pushDestinationByName1(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& name, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object paramValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        Callback_PopInfo_Void onPopValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_PopInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_PopInfo_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_PopInfo value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_PopInfo_Void))))};;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getNavPathStackAccessor()->pushDestinationByName1(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, (const Ark_String*) (&name), static_cast<Ark_Object*>(&paramValueTemp), static_cast<Callback_PopInfo_Void*>(&onPopValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V4(NavPathStack_pushDestinationByName1, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_NavPathStack_replaceDestination(KVMContext vmContext, Ark_NativePointer thisPtr, Ark_NativePointer info, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_NavigationOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = NavigationOptions_serializer::read(thisDeserializer);
        }
        Opt_NavigationOptions optionsValueTemp = optionsValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getNavPathStackAccessor()->replaceDestination(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, static_cast<Ark_NavPathInfo>(info), static_cast<Opt_NavigationOptions*>(&optionsValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V4(NavPathStack_replaceDestination, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_NavPathStack_removeByIndexes(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 indexesValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_Int32 indexesValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(indexesValueTempTmpBuf)>::type,
        std::decay<decltype(*indexesValueTempTmpBuf.array)>::type>(&indexesValueTempTmpBuf, indexesValueTempTmpBufLength);
        for (int indexesValueTempTmpBufBufCounterI = 0; indexesValueTempTmpBufBufCounterI < indexesValueTempTmpBufLength; indexesValueTempTmpBufBufCounterI++) {
            indexesValueTempTmpBuf.array[indexesValueTempTmpBufBufCounterI] = thisDeserializer.readInt32();
        }
        Array_Int32 indexesValueTemp = indexesValueTempTmpBuf;;
        return GetAccessors()->getNavPathStackAccessor()->removeByIndexes(self, static_cast<Array_Int32*>(&indexesValueTemp));
}
KOALA_INTEROP_DIRECT_3(NavPathStack_removeByIndexes, Ark_Int32, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_NavPathStack_removeByName(Ark_NativePointer thisPtr, const KStringPtr& name) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        return GetAccessors()->getNavPathStackAccessor()->removeByName(self, (const Ark_String*) (&name));
}
KOALA_INTEROP_2(NavPathStack_removeByName, Ark_Int32, Ark_NativePointer, KStringPtr)
Ark_Boolean impl_NavPathStack_removeByNavDestinationId(Ark_NativePointer thisPtr, const KStringPtr& navDestinationId) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        return GetAccessors()->getNavPathStackAccessor()->removeByNavDestinationId(self, (const Ark_String*) (&navDestinationId));
}
KOALA_INTEROP_2(NavPathStack_removeByNavDestinationId, Ark_Boolean, Ark_NativePointer, KStringPtr)
Ark_Int32 impl_NavPathStack_moveToTop(Ark_NativePointer thisPtr, const KStringPtr& name, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        return GetAccessors()->getNavPathStackAccessor()->moveToTop(self, (const Ark_String*) (&name), static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_4(NavPathStack_moveToTop, Ark_Int32, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_NavPathStack_moveIndexToTop(Ark_NativePointer thisPtr, Ark_Int32 index, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetAccessors()->getNavPathStackAccessor()->moveIndexToTop(self, index, static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V4(NavPathStack_moveIndexToTop, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
void impl_NavPathStack_clear(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetAccessors()->getNavPathStackAccessor()->clear(self, static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavPathStack_clear, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavPathStack_getAllPathName(Ark_NativePointer thisPtr) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathStackAccessor()->getAllPathName(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_String retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeString(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavPathStack_getAllPathName, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_NavPathStack_getIndexByName(Ark_NativePointer thisPtr, const KStringPtr& name) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathStackAccessor()->getIndexByName(self, (const Ark_String*) (&name));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_Int32 retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeInt32(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(NavPathStack_getIndexByName, KInteropReturnBuffer, Ark_NativePointer, KStringPtr)
KInteropReturnBuffer impl_NavPathStack_getParent(Ark_NativePointer thisPtr) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathStackAccessor()->getParent(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            NavPathStack_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavPathStack_getParent, KInteropReturnBuffer, Ark_NativePointer)
Ark_Int32 impl_NavPathStack_size(Ark_NativePointer thisPtr) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        return GetAccessors()->getNavPathStackAccessor()->size(self);
}
KOALA_INTEROP_DIRECT_1(NavPathStack_size, Ark_Int32, Ark_NativePointer)
void impl_NavPathStack_disableAnimation(Ark_NativePointer thisPtr, Ark_Boolean value) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        GetAccessors()->getNavPathStackAccessor()->disableAnimation(self, value);
}
KOALA_INTEROP_DIRECT_V2(NavPathStack_disableAnimation, Ark_NativePointer, Ark_Boolean)
void impl_NavPathStack_setInterception(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_NavigationInterception interceptionValueTemp = NavigationInterception_serializer::read(thisDeserializer);;
        GetAccessors()->getNavPathStackAccessor()->setInterception(self, static_cast<Ark_NavigationInterception*>(&interceptionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavPathStack_setInterception, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_NavPathStack_getPathStack(Ark_NativePointer thisPtr) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        const auto &retValue = GetAccessors()->getNavPathStackAccessor()->getPathStack(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_NavPathInfo retValueTmpElement = retValue.array[retValueCounterI];
            NavPathInfo_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(NavPathStack_getPathStack, KInteropReturnBuffer, Ark_NativePointer)
void impl_NavPathStack_setPathStack(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_NavPathStack self = reinterpret_cast<Ark_NavPathStack>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 pathStackValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_NavPathInfo pathStackValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(pathStackValueTempTmpBuf)>::type,
        std::decay<decltype(*pathStackValueTempTmpBuf.array)>::type>(&pathStackValueTempTmpBuf, pathStackValueTempTmpBufLength);
        for (int pathStackValueTempTmpBufBufCounterI = 0; pathStackValueTempTmpBufBufCounterI < pathStackValueTempTmpBufLength; pathStackValueTempTmpBufBufCounterI++) {
            pathStackValueTempTmpBuf.array[pathStackValueTempTmpBufBufCounterI] = static_cast<Ark_NavPathInfo>(NavPathInfo_serializer::read(thisDeserializer));
        }
        Array_NavPathInfo pathStackValueTemp = pathStackValueTempTmpBuf;;
        const auto animatedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean animatedValueTempTmpBuf = {};
        animatedValueTempTmpBuf.tag = animatedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animatedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            animatedValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean animatedValueTemp = animatedValueTempTmpBuf;;
        GetAccessors()->getNavPathStackAccessor()->setPathStack(self, static_cast<Array_NavPathInfo*>(&pathStackValueTemp), static_cast<Opt_Boolean*>(&animatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NavPathStack_setPathStack, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_NodeContainerOps_nodeContainerOpsConstruct(Ark_Int32 id, Ark_Int32 flags) {
        return GetAccessors()->getNodeContainerOpsAccessor()->nodeContainerOpsConstruct(id, flags);
}
KOALA_INTEROP_DIRECT_2(NodeContainerOps_nodeContainerOpsConstruct, Ark_NativePointer, Ark_Int32, Ark_Int32)
void impl_NodeContainerOps_nodeContainerSetNodeContainerOptions(Ark_NativePointer ptr, Ark_NativePointer controller) {
        GetAccessors()->getNodeContainerOpsAccessor()->nodeContainerSetNodeContainerOptions(ptr, controller);
}
KOALA_INTEROP_DIRECT_V2(NodeContainerOps_nodeContainerSetNodeContainerOptions, Ark_NativePointer, Ark_NativePointer)
void impl_NodeContainerOps_addNodeContainerRootNode(Ark_NativePointer self, Ark_NativePointer child) {
        GetAccessors()->getNodeContainerOpsAccessor()->addNodeContainerRootNode(self, child);
}
KOALA_INTEROP_DIRECT_V2(NodeContainerOps_addNodeContainerRootNode, Ark_NativePointer, Ark_NativePointer)
void impl_NodeContainerOps_setAboutToAppear(Ark_NativePointer self, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getNodeContainerOpsAccessor()->setAboutToAppear(self, static_cast<Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NodeContainerOps_setAboutToAppear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NodeContainerOps_setAboutToDisappear(Ark_NativePointer self, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getNodeContainerOpsAccessor()->setAboutToDisappear(self, static_cast<Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NodeContainerOps_setAboutToDisappear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NodeContainerOps_setAboutToResize(Ark_NativePointer self, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Size_Void valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Size size)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Size_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Size size)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Size_Void))))};;
        GetAccessors()->getNodeContainerOpsAccessor()->setAboutToResize(self, static_cast<Callback_Size_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NodeContainerOps_setAboutToResize, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NodeContainerOps_setOnAttach(Ark_NativePointer self, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getNodeContainerOpsAccessor()->setOnAttach(self, static_cast<Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NodeContainerOps_setOnAttach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NodeContainerOps_setOnDetach(Ark_NativePointer self, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Void valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getNodeContainerOpsAccessor()->setOnDetach(self, static_cast<Callback_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NodeContainerOps_setOnDetach, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_NodeContainerOps_setOnTouchEvent(Ark_NativePointer self, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TouchEvent_Void valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TouchEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TouchEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TouchEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TouchEvent_Void))))};
        }
        Opt_Callback_TouchEvent_Void valueValueTemp = valueValueTempTmpBuf;;
        GetAccessors()->getNodeContainerOpsAccessor()->setOnTouchEvent(self, static_cast<Opt_Callback_TouchEvent_Void*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(NodeContainerOps_setOnTouchEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_NodeContentExtender_constructorNodeContent() {
        return GetAccessors()->getNodeContentExtenderAccessor()->constructorNodeContent();
}
KOALA_INTEROP_DIRECT_0(NodeContentExtender_constructorNodeContent, Ark_NativePointer)
Ark_NativePointer impl_NodeContentExtender_getDestroy() {
        return GetAccessors()->getNodeContentExtenderAccessor()->getDestroy();
}
KOALA_INTEROP_DIRECT_0(NodeContentExtender_getDestroy, Ark_NativePointer)
Ark_Boolean impl_NodeContentExtender_addFrameNode(Ark_NativePointer content, Ark_NativePointer node) {
        return GetAccessors()->getNodeContentExtenderAccessor()->addFrameNode(content, node);
}
KOALA_INTEROP_DIRECT_2(NodeContentExtender_addFrameNode, Ark_Boolean, Ark_NativePointer, Ark_NativePointer)
Ark_Boolean impl_NodeContentExtender_removeFrameNode(Ark_NativePointer content, Ark_NativePointer node) {
        return GetAccessors()->getNodeContentExtenderAccessor()->removeFrameNode(content, node);
}
KOALA_INTEROP_DIRECT_2(NodeContentExtender_removeFrameNode, Ark_Boolean, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_OffscreenCanvas_construct(KInteropNumber width, KInteropNumber height, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto unitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetricsUnit unitValueTempTmpBuf = {};
        unitValueTempTmpBuf.tag = unitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unitValueTempTmpBuf.value = static_cast<Ark_LengthMetricsUnit>(thisDeserializer.readInt32());
        }
        Opt_LengthMetricsUnit unitValueTemp = unitValueTempTmpBuf;;
        return GetAccessors()->getOffscreenCanvasAccessor()->construct((const Ark_Number*) (&width), (const Ark_Number*) (&height), static_cast<Opt_LengthMetricsUnit*>(&unitValueTemp));
}
KOALA_INTEROP_DIRECT_4(OffscreenCanvas_construct, Ark_NativePointer, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
Ark_NativePointer impl_OffscreenCanvas_getFinalizer() {
        return GetAccessors()->getOffscreenCanvasAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(OffscreenCanvas_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_OffscreenCanvas_transferToImageBitmap(Ark_NativePointer thisPtr) {
        Ark_OffscreenCanvas self = reinterpret_cast<Ark_OffscreenCanvas>(thisPtr);
        return GetAccessors()->getOffscreenCanvasAccessor()->transferToImageBitmap(self);
}
KOALA_INTEROP_DIRECT_1(OffscreenCanvas_transferToImageBitmap, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_OffscreenCanvas_getContext2d(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_OffscreenCanvas self = reinterpret_cast<Ark_OffscreenCanvas>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RenderingContextSettings optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = static_cast<Ark_RenderingContextSettings>(RenderingContextSettings_serializer::read(thisDeserializer));
        }
        Opt_RenderingContextSettings optionsValueTemp = optionsValueTempTmpBuf;;
        return GetAccessors()->getOffscreenCanvasAccessor()->getContext2d(self, static_cast<Opt_RenderingContextSettings*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_3(OffscreenCanvas_getContext2d, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Number impl_OffscreenCanvas_getHeight(Ark_NativePointer thisPtr) {
        Ark_OffscreenCanvas self = reinterpret_cast<Ark_OffscreenCanvas>(thisPtr);
        return GetAccessors()->getOffscreenCanvasAccessor()->getHeight(self);
}
KOALA_INTEROP_DIRECT_1(OffscreenCanvas_getHeight, KInteropNumber, Ark_NativePointer)
void impl_OffscreenCanvas_setHeight(Ark_NativePointer thisPtr, KInteropNumber height) {
        Ark_OffscreenCanvas self = reinterpret_cast<Ark_OffscreenCanvas>(thisPtr);
        GetAccessors()->getOffscreenCanvasAccessor()->setHeight(self, (const Ark_Number*) (&height));
}
KOALA_INTEROP_DIRECT_V2(OffscreenCanvas_setHeight, Ark_NativePointer, KInteropNumber)
Ark_Number impl_OffscreenCanvas_getWidth(Ark_NativePointer thisPtr) {
        Ark_OffscreenCanvas self = reinterpret_cast<Ark_OffscreenCanvas>(thisPtr);
        return GetAccessors()->getOffscreenCanvasAccessor()->getWidth(self);
}
KOALA_INTEROP_DIRECT_1(OffscreenCanvas_getWidth, KInteropNumber, Ark_NativePointer)
void impl_OffscreenCanvas_setWidth(Ark_NativePointer thisPtr, KInteropNumber width) {
        Ark_OffscreenCanvas self = reinterpret_cast<Ark_OffscreenCanvas>(thisPtr);
        GetAccessors()->getOffscreenCanvasAccessor()->setWidth(self, (const Ark_Number*) (&width));
}
KOALA_INTEROP_DIRECT_V2(OffscreenCanvas_setWidth, Ark_NativePointer, KInteropNumber)
Ark_NativePointer impl_OffscreenCanvasRenderingContext2D_construct(KInteropNumber width, KInteropNumber height, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto settingsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RenderingContextSettings settingsValueTempTmpBuf = {};
        settingsValueTempTmpBuf.tag = settingsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((settingsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            settingsValueTempTmpBuf.value = static_cast<Ark_RenderingContextSettings>(RenderingContextSettings_serializer::read(thisDeserializer));
        }
        Opt_RenderingContextSettings settingsValueTemp = settingsValueTempTmpBuf;;
        const auto unitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_LengthMetricsUnit unitValueTempTmpBuf = {};
        unitValueTempTmpBuf.tag = unitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((unitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            unitValueTempTmpBuf.value = static_cast<Ark_LengthMetricsUnit>(thisDeserializer.readInt32());
        }
        Opt_LengthMetricsUnit unitValueTemp = unitValueTempTmpBuf;;
        return GetAccessors()->getOffscreenCanvasRenderingContext2DAccessor()->construct((const Ark_Number*) (&width), (const Ark_Number*) (&height), static_cast<Opt_RenderingContextSettings*>(&settingsValueTemp), static_cast<Opt_LengthMetricsUnit*>(&unitValueTemp));
}
KOALA_INTEROP_DIRECT_4(OffscreenCanvasRenderingContext2D_construct, Ark_NativePointer, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
Ark_NativePointer impl_OffscreenCanvasRenderingContext2D_getFinalizer() {
        return GetAccessors()->getOffscreenCanvasRenderingContext2DAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(OffscreenCanvasRenderingContext2D_getFinalizer, Ark_NativePointer)
Ark_String impl_OffscreenCanvasRenderingContext2D_toDataURL(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_OffscreenCanvasRenderingContext2D self = reinterpret_cast<Ark_OffscreenCanvasRenderingContext2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto typeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String typeValueTempTmpBuf = {};
        typeValueTempTmpBuf.tag = typeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((typeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            typeValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String typeValueTemp = typeValueTempTmpBuf;;
        const auto qualityValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Number qualityValueTempTmpBuf = {};
        qualityValueTempTmpBuf.tag = qualityValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((qualityValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            qualityValueTempTmpBuf.value = static_cast<Ark_Number>(thisDeserializer.readNumber());
        }
        Opt_Number qualityValueTemp = qualityValueTempTmpBuf;;
        return GetAccessors()->getOffscreenCanvasRenderingContext2DAccessor()->toDataURL(self, static_cast<Opt_String*>(&typeValueTemp), static_cast<Opt_Number*>(&qualityValueTemp));
}
KOALA_INTEROP_3(OffscreenCanvasRenderingContext2D_toDataURL, KStringPtr, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_OffscreenCanvasRenderingContext2D_transferToImageBitmap(Ark_NativePointer thisPtr) {
        Ark_OffscreenCanvasRenderingContext2D self = reinterpret_cast<Ark_OffscreenCanvasRenderingContext2D>(thisPtr);
        return GetAccessors()->getOffscreenCanvasRenderingContext2DAccessor()->transferToImageBitmap(self);
}
KOALA_INTEROP_DIRECT_1(OffscreenCanvasRenderingContext2D_transferToImageBitmap, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_PanGestureEvent_construct() {
        return GetAccessors()->getPanGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PanGestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_PanGestureEvent_getFinalizer() {
        return GetAccessors()->getPanGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PanGestureEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_PanGestureEvent_getOffsetX(Ark_NativePointer thisPtr) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        return GetAccessors()->getPanGestureEventAccessor()->getOffsetX(self);
}
KOALA_INTEROP_DIRECT_1(PanGestureEvent_getOffsetX, Ark_Int32, Ark_NativePointer)
void impl_PanGestureEvent_setOffsetX(Ark_NativePointer thisPtr, KDouble offsetX) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        GetAccessors()->getPanGestureEventAccessor()->setOffsetX(self, offsetX);
}
KOALA_INTEROP_DIRECT_V2(PanGestureEvent_setOffsetX, Ark_NativePointer, KDouble)
Ark_Int32 impl_PanGestureEvent_getOffsetY(Ark_NativePointer thisPtr) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        return GetAccessors()->getPanGestureEventAccessor()->getOffsetY(self);
}
KOALA_INTEROP_DIRECT_1(PanGestureEvent_getOffsetY, Ark_Int32, Ark_NativePointer)
void impl_PanGestureEvent_setOffsetY(Ark_NativePointer thisPtr, KDouble offsetY) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        GetAccessors()->getPanGestureEventAccessor()->setOffsetY(self, offsetY);
}
KOALA_INTEROP_DIRECT_V2(PanGestureEvent_setOffsetY, Ark_NativePointer, KDouble)
Ark_Int32 impl_PanGestureEvent_getVelocityX(Ark_NativePointer thisPtr) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        return GetAccessors()->getPanGestureEventAccessor()->getVelocityX(self);
}
KOALA_INTEROP_DIRECT_1(PanGestureEvent_getVelocityX, Ark_Int32, Ark_NativePointer)
void impl_PanGestureEvent_setVelocityX(Ark_NativePointer thisPtr, KDouble velocityX) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        GetAccessors()->getPanGestureEventAccessor()->setVelocityX(self, velocityX);
}
KOALA_INTEROP_DIRECT_V2(PanGestureEvent_setVelocityX, Ark_NativePointer, KDouble)
Ark_Int32 impl_PanGestureEvent_getVelocityY(Ark_NativePointer thisPtr) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        return GetAccessors()->getPanGestureEventAccessor()->getVelocityY(self);
}
KOALA_INTEROP_DIRECT_1(PanGestureEvent_getVelocityY, Ark_Int32, Ark_NativePointer)
void impl_PanGestureEvent_setVelocityY(Ark_NativePointer thisPtr, KDouble velocityY) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        GetAccessors()->getPanGestureEventAccessor()->setVelocityY(self, velocityY);
}
KOALA_INTEROP_DIRECT_V2(PanGestureEvent_setVelocityY, Ark_NativePointer, KDouble)
Ark_Int32 impl_PanGestureEvent_getVelocity(Ark_NativePointer thisPtr) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        return GetAccessors()->getPanGestureEventAccessor()->getVelocity(self);
}
KOALA_INTEROP_DIRECT_1(PanGestureEvent_getVelocity, Ark_Int32, Ark_NativePointer)
void impl_PanGestureEvent_setVelocity(Ark_NativePointer thisPtr, KDouble velocity) {
        Ark_PanGestureEvent self = reinterpret_cast<Ark_PanGestureEvent>(thisPtr);
        GetAccessors()->getPanGestureEventAccessor()->setVelocity(self, velocity);
}
KOALA_INTEROP_DIRECT_V2(PanGestureEvent_setVelocity, Ark_NativePointer, KDouble)
Ark_NativePointer impl_PanGestureOptions_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PanGestureHandlerOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = PanGestureHandlerOptions_serializer::read(thisDeserializer);
        }
        Opt_PanGestureHandlerOptions valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getPanGestureOptionsAccessor()->construct(static_cast<Opt_PanGestureHandlerOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(PanGestureOptions_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_PanGestureOptions_getFinalizer() {
        return GetAccessors()->getPanGestureOptionsAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PanGestureOptions_getFinalizer, Ark_NativePointer)
void impl_PanGestureOptions_setDirection(Ark_NativePointer thisPtr, Ark_Int32 value) {
        Ark_PanGestureOptions self = reinterpret_cast<Ark_PanGestureOptions>(thisPtr);
        GetAccessors()->getPanGestureOptionsAccessor()->setDirection(self, static_cast<Ark_PanDirection>(value));
}
KOALA_INTEROP_DIRECT_V2(PanGestureOptions_setDirection, Ark_NativePointer, Ark_Int32)
void impl_PanGestureOptions_setDistance(Ark_NativePointer thisPtr, KDouble value) {
        Ark_PanGestureOptions self = reinterpret_cast<Ark_PanGestureOptions>(thisPtr);
        GetAccessors()->getPanGestureOptionsAccessor()->setDistance(self, value);
}
KOALA_INTEROP_DIRECT_V2(PanGestureOptions_setDistance, Ark_NativePointer, KDouble)
void impl_PanGestureOptions_setFingers(Ark_NativePointer thisPtr, Ark_Int32 value) {
        Ark_PanGestureOptions self = reinterpret_cast<Ark_PanGestureOptions>(thisPtr);
        GetAccessors()->getPanGestureOptionsAccessor()->setFingers(self, value);
}
KOALA_INTEROP_DIRECT_V2(PanGestureOptions_setFingers, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_PanGestureOptions_getDirection(Ark_NativePointer thisPtr) {
        Ark_PanGestureOptions self = reinterpret_cast<Ark_PanGestureOptions>(thisPtr);
        return GetAccessors()->getPanGestureOptionsAccessor()->getDirection(self);
}
KOALA_INTEROP_DIRECT_1(PanGestureOptions_getDirection, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_PanGestureOptions_getDistance(Ark_NativePointer thisPtr) {
        Ark_PanGestureOptions self = reinterpret_cast<Ark_PanGestureOptions>(thisPtr);
        return GetAccessors()->getPanGestureOptionsAccessor()->getDistance(self);
}
KOALA_INTEROP_DIRECT_1(PanGestureOptions_getDistance, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_PanRecognizer_construct() {
        return GetAccessors()->getPanRecognizerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PanRecognizer_construct, Ark_NativePointer)
Ark_NativePointer impl_PanRecognizer_getFinalizer() {
        return GetAccessors()->getPanRecognizerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PanRecognizer_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_PanRecognizer_getPanGestureOptions(Ark_NativePointer thisPtr) {
        Ark_PanRecognizer self = reinterpret_cast<Ark_PanRecognizer>(thisPtr);
        return GetAccessors()->getPanRecognizerAccessor()->getPanGestureOptions(self);
}
KOALA_INTEROP_DIRECT_1(PanRecognizer_getPanGestureOptions, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_ParagraphStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ParagraphStyleInterface valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = ParagraphStyleInterface_serializer::read(thisDeserializer);
        }
        Opt_ParagraphStyleInterface valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getParagraphStyleAccessor()->construct(static_cast<Opt_ParagraphStyleInterface*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(ParagraphStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ParagraphStyle_getFinalizer() {
        return GetAccessors()->getParagraphStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ParagraphStyle_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_ParagraphStyle_getTextAlign(Ark_NativePointer thisPtr) {
        Ark_ParagraphStyle self = reinterpret_cast<Ark_ParagraphStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getParagraphStyleAccessor()->getTextAlign(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_TextAlign>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ParagraphStyle_getTextAlign, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ParagraphStyle_getTextIndent(Ark_NativePointer thisPtr) {
        Ark_ParagraphStyle self = reinterpret_cast<Ark_ParagraphStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getParagraphStyleAccessor()->getTextIndent(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ParagraphStyle_getTextIndent, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ParagraphStyle_getMaxLines(Ark_NativePointer thisPtr) {
        Ark_ParagraphStyle self = reinterpret_cast<Ark_ParagraphStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getParagraphStyleAccessor()->getMaxLines(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ParagraphStyle_getMaxLines, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ParagraphStyle_getOverflow(Ark_NativePointer thisPtr) {
        Ark_ParagraphStyle self = reinterpret_cast<Ark_ParagraphStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getParagraphStyleAccessor()->getOverflow(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_TextOverflow>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ParagraphStyle_getOverflow, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ParagraphStyle_getWordBreak(Ark_NativePointer thisPtr) {
        Ark_ParagraphStyle self = reinterpret_cast<Ark_ParagraphStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getParagraphStyleAccessor()->getWordBreak(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_WordBreak>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ParagraphStyle_getWordBreak, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ParagraphStyle_getLeadingMargin(Ark_NativePointer thisPtr) {
        Ark_ParagraphStyle self = reinterpret_cast<Ark_ParagraphStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getParagraphStyleAccessor()->getLeadingMargin(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            if (retValueTmpValue.selector == 0) {
                _retSerializer.writeInt8(0);
                const auto retValueTmpValueForIdx0 = retValueTmpValue.value0;
                _retSerializer.writeFloat64(retValueTmpValueForIdx0);
            } else if (retValueTmpValue.selector == 1) {
                _retSerializer.writeInt8(1);
                const auto retValueTmpValueForIdx1 = retValueTmpValue.value1;
                LeadingMarginPlaceholder_serializer::write(_retSerializer, retValueTmpValueForIdx1);
            }
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ParagraphStyle_getLeadingMargin, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_ParagraphStyle_getParagraphSpacing(Ark_NativePointer thisPtr) {
        Ark_ParagraphStyle self = reinterpret_cast<Ark_ParagraphStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getParagraphStyleAccessor()->getParagraphSpacing(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ParagraphStyle_getParagraphSpacing, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_Path2D_construct0() {
        return GetAccessors()->getPath2DAccessor()->construct0();
}
KOALA_INTEROP_DIRECT_0(Path2D_construct0, Ark_NativePointer)
Ark_NativePointer impl_Path2D_construct1(Ark_Int32 unit) {
        return GetAccessors()->getPath2DAccessor()->construct1(static_cast<Ark_LengthMetricsUnit>(unit));
}
KOALA_INTEROP_DIRECT_1(Path2D_construct1, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_Path2D_construct2(Ark_NativePointer path) {
        return GetAccessors()->getPath2DAccessor()->construct2(static_cast<Ark_Path2D>(path));
}
KOALA_INTEROP_DIRECT_1(Path2D_construct2, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_Path2D_construct3(Ark_NativePointer path, Ark_Int32 unit) {
        return GetAccessors()->getPath2DAccessor()->construct3(static_cast<Ark_Path2D>(path), static_cast<Ark_LengthMetricsUnit>(unit));
}
KOALA_INTEROP_DIRECT_2(Path2D_construct3, Ark_NativePointer, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_Path2D_construct4(const KStringPtr& d) {
        return GetAccessors()->getPath2DAccessor()->construct4((const Ark_String*) (&d));
}
KOALA_INTEROP_1(Path2D_construct4, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_Path2D_construct5(const KStringPtr& description, Ark_Int32 unit) {
        return GetAccessors()->getPath2DAccessor()->construct5((const Ark_String*) (&description), static_cast<Ark_LengthMetricsUnit>(unit));
}
KOALA_INTEROP_2(Path2D_construct5, Ark_NativePointer, KStringPtr, Ark_Int32)
Ark_NativePointer impl_Path2D_getFinalizer() {
        return GetAccessors()->getPath2DAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(Path2D_getFinalizer, Ark_NativePointer)
void impl_Path2D_addPath(Ark_NativePointer thisPtr, Ark_NativePointer path, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Path2D self = reinterpret_cast<Ark_Path2D>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto transformValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Matrix2D transformValueTempTmpBuf = {};
        transformValueTempTmpBuf.tag = transformValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((transformValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            transformValueTempTmpBuf.value = static_cast<Ark_Matrix2D>(Matrix2D_serializer::read(thisDeserializer));
        }
        Opt_Matrix2D transformValueTemp = transformValueTempTmpBuf;;
        GetAccessors()->getPath2DAccessor()->addPath(self, static_cast<Ark_Path2D>(path), static_cast<Opt_Matrix2D*>(&transformValueTemp));
}
KOALA_INTEROP_DIRECT_V4(Path2D_addPath, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_PatternLockController_construct() {
        return GetAccessors()->getPatternLockControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PatternLockController_construct, Ark_NativePointer)
Ark_NativePointer impl_PatternLockController_getFinalizer() {
        return GetAccessors()->getPatternLockControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PatternLockController_getFinalizer, Ark_NativePointer)
void impl_PatternLockController_reset(Ark_NativePointer thisPtr) {
        Ark_PatternLockController self = reinterpret_cast<Ark_PatternLockController>(thisPtr);
        GetAccessors()->getPatternLockControllerAccessor()->reset(self);
}
KOALA_INTEROP_DIRECT_V1(PatternLockController_reset, Ark_NativePointer)
void impl_PatternLockController_setChallengeResult(Ark_NativePointer thisPtr, Ark_Int32 result) {
        Ark_PatternLockController self = reinterpret_cast<Ark_PatternLockController>(thisPtr);
        GetAccessors()->getPatternLockControllerAccessor()->setChallengeResult(self, static_cast<Ark_PatternLockChallengeResult>(result));
}
KOALA_INTEROP_DIRECT_V2(PatternLockController_setChallengeResult, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_PermissionRequest_construct() {
        return GetAccessors()->getPermissionRequestAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PermissionRequest_construct, Ark_NativePointer)
Ark_NativePointer impl_PermissionRequest_getFinalizer() {
        return GetAccessors()->getPermissionRequestAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PermissionRequest_getFinalizer, Ark_NativePointer)
void impl_PermissionRequest_deny(Ark_NativePointer thisPtr) {
        Ark_PermissionRequest self = reinterpret_cast<Ark_PermissionRequest>(thisPtr);
        GetAccessors()->getPermissionRequestAccessor()->deny(self);
}
KOALA_INTEROP_DIRECT_V1(PermissionRequest_deny, Ark_NativePointer)
Ark_String impl_PermissionRequest_getOrigin(Ark_NativePointer thisPtr) {
        Ark_PermissionRequest self = reinterpret_cast<Ark_PermissionRequest>(thisPtr);
        return GetAccessors()->getPermissionRequestAccessor()->getOrigin(self);
}
KOALA_INTEROP_1(PermissionRequest_getOrigin, KStringPtr, Ark_NativePointer)
KInteropReturnBuffer impl_PermissionRequest_getAccessibleResource(Ark_NativePointer thisPtr) {
        Ark_PermissionRequest self = reinterpret_cast<Ark_PermissionRequest>(thisPtr);
        const auto &retValue = GetAccessors()->getPermissionRequestAccessor()->getAccessibleResource(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_String retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeString(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(PermissionRequest_getAccessibleResource, KInteropReturnBuffer, Ark_NativePointer)
void impl_PermissionRequest_grant(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_PermissionRequest self = reinterpret_cast<Ark_PermissionRequest>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 resourcesValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_String resourcesValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(resourcesValueTempTmpBuf)>::type,
        std::decay<decltype(*resourcesValueTempTmpBuf.array)>::type>(&resourcesValueTempTmpBuf, resourcesValueTempTmpBufLength);
        for (int resourcesValueTempTmpBufBufCounterI = 0; resourcesValueTempTmpBufBufCounterI < resourcesValueTempTmpBufLength; resourcesValueTempTmpBufBufCounterI++) {
            resourcesValueTempTmpBuf.array[resourcesValueTempTmpBufBufCounterI] = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Array_String resourcesValueTemp = resourcesValueTempTmpBuf;;
        GetAccessors()->getPermissionRequestAccessor()->grant(self, static_cast<Array_String*>(&resourcesValueTemp));
}
KOALA_INTEROP_DIRECT_V3(PermissionRequest_grant, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_PersistentStorageBackend_get(const KStringPtr& key) {
        const auto &retValue = GetAccessors()->getPersistentStorageBackendAccessor()->get((const Ark_String*) (&key));
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeString(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(PersistentStorageBackend_get, KInteropReturnBuffer, KStringPtr)
Ark_Boolean impl_PersistentStorageBackend_has(const KStringPtr& key) {
        return GetAccessors()->getPersistentStorageBackendAccessor()->has((const Ark_String*) (&key));
}
KOALA_INTEROP_1(PersistentStorageBackend_has, Ark_Boolean, KStringPtr)
void impl_PersistentStorageBackend_remove(const KStringPtr& key) {
        GetAccessors()->getPersistentStorageBackendAccessor()->remove((const Ark_String*) (&key));
}
KOALA_INTEROP_V1(PersistentStorageBackend_remove, KStringPtr)
void impl_PersistentStorageBackend_set(const KStringPtr& key, const KStringPtr& value) {
        GetAccessors()->getPersistentStorageBackendAccessor()->set((const Ark_String*) (&key), (const Ark_String*) (&value));
}
KOALA_INTEROP_V2(PersistentStorageBackend_set, KStringPtr, KStringPtr)
void impl_PersistentStorageBackend_clear() {
        GetAccessors()->getPersistentStorageBackendAccessor()->clear();
}
KOALA_INTEROP_DIRECT_V0(PersistentStorageBackend_clear)
Ark_NativePointer impl_PinchGestureEvent_construct() {
        return GetAccessors()->getPinchGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PinchGestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_PinchGestureEvent_getFinalizer() {
        return GetAccessors()->getPinchGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PinchGestureEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_PinchGestureEvent_getScale(Ark_NativePointer thisPtr) {
        Ark_PinchGestureEvent self = reinterpret_cast<Ark_PinchGestureEvent>(thisPtr);
        return GetAccessors()->getPinchGestureEventAccessor()->getScale(self);
}
KOALA_INTEROP_DIRECT_1(PinchGestureEvent_getScale, Ark_Int32, Ark_NativePointer)
void impl_PinchGestureEvent_setScale(Ark_NativePointer thisPtr, KDouble scale) {
        Ark_PinchGestureEvent self = reinterpret_cast<Ark_PinchGestureEvent>(thisPtr);
        GetAccessors()->getPinchGestureEventAccessor()->setScale(self, scale);
}
KOALA_INTEROP_DIRECT_V2(PinchGestureEvent_setScale, Ark_NativePointer, KDouble)
Ark_Int32 impl_PinchGestureEvent_getPinchCenterX(Ark_NativePointer thisPtr) {
        Ark_PinchGestureEvent self = reinterpret_cast<Ark_PinchGestureEvent>(thisPtr);
        return GetAccessors()->getPinchGestureEventAccessor()->getPinchCenterX(self);
}
KOALA_INTEROP_DIRECT_1(PinchGestureEvent_getPinchCenterX, Ark_Int32, Ark_NativePointer)
void impl_PinchGestureEvent_setPinchCenterX(Ark_NativePointer thisPtr, KDouble pinchCenterX) {
        Ark_PinchGestureEvent self = reinterpret_cast<Ark_PinchGestureEvent>(thisPtr);
        GetAccessors()->getPinchGestureEventAccessor()->setPinchCenterX(self, pinchCenterX);
}
KOALA_INTEROP_DIRECT_V2(PinchGestureEvent_setPinchCenterX, Ark_NativePointer, KDouble)
Ark_Int32 impl_PinchGestureEvent_getPinchCenterY(Ark_NativePointer thisPtr) {
        Ark_PinchGestureEvent self = reinterpret_cast<Ark_PinchGestureEvent>(thisPtr);
        return GetAccessors()->getPinchGestureEventAccessor()->getPinchCenterY(self);
}
KOALA_INTEROP_DIRECT_1(PinchGestureEvent_getPinchCenterY, Ark_Int32, Ark_NativePointer)
void impl_PinchGestureEvent_setPinchCenterY(Ark_NativePointer thisPtr, KDouble pinchCenterY) {
        Ark_PinchGestureEvent self = reinterpret_cast<Ark_PinchGestureEvent>(thisPtr);
        GetAccessors()->getPinchGestureEventAccessor()->setPinchCenterY(self, pinchCenterY);
}
KOALA_INTEROP_DIRECT_V2(PinchGestureEvent_setPinchCenterY, Ark_NativePointer, KDouble)
Ark_NativePointer impl_PinchRecognizer_construct() {
        return GetAccessors()->getPinchRecognizerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PinchRecognizer_construct, Ark_NativePointer)
Ark_NativePointer impl_PinchRecognizer_getFinalizer() {
        return GetAccessors()->getPinchRecognizerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PinchRecognizer_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_PinchRecognizer_getDistance(Ark_NativePointer thisPtr) {
        Ark_PinchRecognizer self = reinterpret_cast<Ark_PinchRecognizer>(thisPtr);
        return GetAccessors()->getPinchRecognizerAccessor()->getDistance(self);
}
KOALA_INTEROP_DIRECT_1(PinchRecognizer_getDistance, KInteropNumber, Ark_NativePointer)
Ark_NativePointer impl_PixelMapMock_construct() {
        return GetAccessors()->getPixelMapMockAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PixelMapMock_construct, Ark_NativePointer)
Ark_NativePointer impl_PixelMapMock_getFinalizer() {
        return GetAccessors()->getPixelMapMockAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PixelMapMock_getFinalizer, Ark_NativePointer)
void impl_PixelMapMock_release(Ark_NativePointer thisPtr) {
        Ark_PixelMapMock self = reinterpret_cast<Ark_PixelMapMock>(thisPtr);
        GetAccessors()->getPixelMapMockAccessor()->release(self);
}
KOALA_INTEROP_DIRECT_V1(PixelMapMock_release, Ark_NativePointer)
Ark_NativePointer impl_ProgressMask_construct(KDouble value, KDouble total, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 colorValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceColor colorValueTempTmpBuf = {};
        colorValueTempTmpBuf.selector = colorValueTempTmpBufUnionSelector;
        if (colorValueTempTmpBufUnionSelector == 0) {
            colorValueTempTmpBuf.selector = 0;
            colorValueTempTmpBuf.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
        } else if (colorValueTempTmpBufUnionSelector == 1) {
            colorValueTempTmpBuf.selector = 1;
            colorValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (colorValueTempTmpBufUnionSelector == 2) {
            colorValueTempTmpBuf.selector = 2;
            colorValueTempTmpBuf.value2 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (colorValueTempTmpBufUnionSelector == 3) {
            colorValueTempTmpBuf.selector = 3;
            colorValueTempTmpBuf.value3 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for colorValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceColor colorValueTemp = static_cast<Ark_ResourceColor>(colorValueTempTmpBuf);;
        return GetAccessors()->getProgressMaskAccessor()->construct(value, total, static_cast<Ark_ResourceColor*>(&colorValueTemp));
}
KOALA_INTEROP_4(ProgressMask_construct, Ark_NativePointer, KDouble, KDouble, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ProgressMask_getFinalizer() {
        return GetAccessors()->getProgressMaskAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ProgressMask_getFinalizer, Ark_NativePointer)
void impl_ProgressMask_updateProgress(Ark_NativePointer thisPtr, KDouble value) {
        Ark_ProgressMask self = reinterpret_cast<Ark_ProgressMask>(thisPtr);
        GetAccessors()->getProgressMaskAccessor()->updateProgress(self, value);
}
KOALA_INTEROP_V2(ProgressMask_updateProgress, Ark_NativePointer, KDouble)
void impl_ProgressMask_updateColor(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ProgressMask self = reinterpret_cast<Ark_ProgressMask>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (valueValueTempTmpBufUnionSelector == 2) {
            valueValueTempTmpBuf.selector = 2;
            valueValueTempTmpBuf.value2 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (valueValueTempTmpBufUnionSelector == 3) {
            valueValueTempTmpBuf.selector = 3;
            valueValueTempTmpBuf.value3 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceColor valueValueTemp = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf);;
        GetAccessors()->getProgressMaskAccessor()->updateColor(self, static_cast<Ark_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ProgressMask_updateColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ProgressMask_enableBreathingAnimation(Ark_NativePointer thisPtr, Ark_Boolean value) {
        Ark_ProgressMask self = reinterpret_cast<Ark_ProgressMask>(thisPtr);
        GetAccessors()->getProgressMaskAccessor()->enableBreathingAnimation(self, value);
}
KOALA_INTEROP_DIRECT_V2(ProgressMask_enableBreathingAnimation, Ark_NativePointer, Ark_Boolean)
void impl_PromptActionExtender_openPopup(KVMContext vmContext, Ark_NativePointer content, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TargetInfo targetValueTemp = TargetInfo_serializer::read(thisDeserializer);;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PopupCommonOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = PopupCommonOptions_serializer::read(thisDeserializer);
        }
        Opt_PopupCommonOptions optionsValueTemp = optionsValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getPromptActionExtenderAccessor()->openPopup(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), content, static_cast<Ark_TargetInfo*>(&targetValueTemp), static_cast<Opt_PopupCommonOptions*>(&optionsValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(PromptActionExtender_openPopup, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PromptActionExtender_updatePopup(KVMContext vmContext, Ark_NativePointer content, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PopupCommonOptions optionsValueTemp = PopupCommonOptions_serializer::read(thisDeserializer);;
        const auto partialUpdateValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean partialUpdateValueTempTmpBuf = {};
        partialUpdateValueTempTmpBuf.tag = partialUpdateValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((partialUpdateValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            partialUpdateValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean partialUpdateValueTemp = partialUpdateValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getPromptActionExtenderAccessor()->updatePopup(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), content, static_cast<Ark_PopupCommonOptions*>(&optionsValueTemp), static_cast<Opt_Boolean*>(&partialUpdateValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(PromptActionExtender_updatePopup, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PromptActionExtender_closePopup(KVMContext vmContext, Ark_NativePointer content, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getPromptActionExtenderAccessor()->closePopup(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), content, static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(PromptActionExtender_closePopup, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PromptActionExtender_openMenu(KVMContext vmContext, Ark_NativePointer content, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TargetInfo targetValueTemp = TargetInfo_serializer::read(thisDeserializer);;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_MenuOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = MenuOptions_serializer::read(thisDeserializer);
        }
        Opt_MenuOptions optionsValueTemp = optionsValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getPromptActionExtenderAccessor()->openMenu(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), content, static_cast<Ark_TargetInfo*>(&targetValueTemp), static_cast<Opt_MenuOptions*>(&optionsValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(PromptActionExtender_openMenu, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PromptActionExtender_updateMenu(KVMContext vmContext, Ark_NativePointer content, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_MenuOptions optionsValueTemp = MenuOptions_serializer::read(thisDeserializer);;
        const auto partialUpdateValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean partialUpdateValueTempTmpBuf = {};
        partialUpdateValueTempTmpBuf.tag = partialUpdateValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((partialUpdateValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            partialUpdateValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean partialUpdateValueTemp = partialUpdateValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getPromptActionExtenderAccessor()->updateMenu(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), content, static_cast<Ark_MenuOptions*>(&optionsValueTemp), static_cast<Opt_Boolean*>(&partialUpdateValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(PromptActionExtender_updateMenu, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_PromptActionExtender_closeMenu(KVMContext vmContext, Ark_NativePointer content, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getPromptActionExtenderAccessor()->closeMenu(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), content, static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(PromptActionExtender_closeMenu, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_PulseSymbolEffect_construct() {
        return GetAccessors()->getPulseSymbolEffectAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(PulseSymbolEffect_construct, Ark_NativePointer)
Ark_NativePointer impl_PulseSymbolEffect_getFinalizer() {
        return GetAccessors()->getPulseSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(PulseSymbolEffect_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_RenderingContextSettings_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto antialiasValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean antialiasValueTempTmpBuf = {};
        antialiasValueTempTmpBuf.tag = antialiasValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((antialiasValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            antialiasValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean antialiasValueTemp = antialiasValueTempTmpBuf;;
        return GetAccessors()->getRenderingContextSettingsAccessor()->construct(static_cast<Opt_Boolean*>(&antialiasValueTemp));
}
KOALA_INTEROP_DIRECT_2(RenderingContextSettings_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RenderingContextSettings_getFinalizer() {
        return GetAccessors()->getRenderingContextSettingsAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(RenderingContextSettings_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_RenderingContextSettings_getAntialias(Ark_NativePointer thisPtr) {
        Ark_RenderingContextSettings self = reinterpret_cast<Ark_RenderingContextSettings>(thisPtr);
        const auto &retValue = GetAccessors()->getRenderingContextSettingsAccessor()->getAntialias(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeBoolean(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RenderingContextSettings_getAntialias, KInteropReturnBuffer, Ark_NativePointer)
void impl_RenderingContextSettings_setAntialias(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RenderingContextSettings self = reinterpret_cast<Ark_RenderingContextSettings>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto antialiasValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean antialiasValueTempTmpBuf = {};
        antialiasValueTempTmpBuf.tag = antialiasValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((antialiasValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            antialiasValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean antialiasValueTemp = antialiasValueTempTmpBuf;;
        GetAccessors()->getRenderingContextSettingsAccessor()->setAntialias(self, static_cast<Opt_Boolean*>(&antialiasValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderingContextSettings_setAntialias, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RenderNodeExtender_constructorRenderNode(Ark_Int32 nodeId) {
        return GetAccessors()->getRenderNodeExtenderAccessor()->constructorRenderNode(nodeId);
}
KOALA_INTEROP_DIRECT_1(RenderNodeExtender_constructorRenderNode, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_RenderNodeExtender_getDestroy() {
        return GetAccessors()->getRenderNodeExtenderAccessor()->getDestroy();
}
KOALA_INTEROP_DIRECT_0(RenderNodeExtender_getDestroy, Ark_NativePointer)
void impl_RenderNodeExtender_destroyPeer(Ark_NativePointer peer) {
        GetAccessors()->getRenderNodeExtenderAccessor()->destroyPeer(static_cast<Ark_RenderNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(RenderNodeExtender_destroyPeer, Ark_NativePointer)
void impl_RenderNodeExtender_setBackgroundColor(Ark_NativePointer peer, KInteropNumber backgroundColor) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setBackgroundColor(static_cast<Ark_RenderNode>(peer), (const Ark_Number*) (&backgroundColor));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setBackgroundColor, Ark_NativePointer, KInteropNumber)
void impl_RenderNodeExtender_setClipToFrame(Ark_NativePointer peer, Ark_Boolean clipToFrame) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setClipToFrame(static_cast<Ark_RenderNode>(peer), clipToFrame);
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setClipToFrame, Ark_NativePointer, Ark_Boolean)
void impl_RenderNodeExtender_setOpacity(Ark_NativePointer peer, KInteropNumber opacity) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setOpacity(static_cast<Ark_RenderNode>(peer), (const Ark_Number*) (&opacity));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setOpacity, Ark_NativePointer, KInteropNumber)
void impl_RenderNodeExtender_setSize(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, Ark_Int32 unitValue) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Size sizeValueTemp = Size_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setSize(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Size*>(&sizeValueTemp), unitValue);
}
KOALA_INTEROP_DIRECT_V4(RenderNodeExtender_setSize, Ark_NativePointer, KSerializerBuffer, int32_t, Ark_Int32)
void impl_RenderNodeExtender_setPosition(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, Ark_Int32 unitValue) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Vector2 positionValueTemp = Vector2_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setPosition(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Vector2*>(&positionValueTemp), unitValue);
}
KOALA_INTEROP_DIRECT_V4(RenderNodeExtender_setPosition, Ark_NativePointer, KSerializerBuffer, int32_t, Ark_Int32)
void impl_RenderNodeExtender_setPivot(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Vector2 pivotValueTemp = Vector2_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setPivot(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Vector2*>(&pivotValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setPivot, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setScale(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Vector2 scaleValueTemp = Vector2_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setScale(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Vector2*>(&scaleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setScale, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setTranslation(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Vector2 translationValueTemp = Vector2_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setTranslation(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Vector2*>(&translationValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setTranslation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setRotation(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, Ark_Int32 unitValue) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Vector3 rotationValueTemp = Vector3_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setRotation(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Vector3*>(&rotationValueTemp), unitValue);
}
KOALA_INTEROP_DIRECT_V4(RenderNodeExtender_setRotation, Ark_NativePointer, KSerializerBuffer, int32_t, Ark_Int32)
void impl_RenderNodeExtender_setTransform(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Matrix4 transformValueTempTmpBuf = {};
        transformValueTempTmpBuf.value0 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value2 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value3 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value4 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value5 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value6 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value7 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value8 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value9 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value10 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value11 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value12 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value13 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value14 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        transformValueTempTmpBuf.value15 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        Ark_Matrix4 transformValueTemp = transformValueTempTmpBuf;;
        GetAccessors()->getRenderNodeExtenderAccessor()->setTransform(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Matrix4*>(&transformValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setTransform, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setShadowColor(Ark_NativePointer peer, KInteropNumber shadowColor) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setShadowColor(static_cast<Ark_RenderNode>(peer), (const Ark_Number*) (&shadowColor));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setShadowColor, Ark_NativePointer, KInteropNumber)
void impl_RenderNodeExtender_setShadowOffset(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, Ark_Int32 unitValue) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Vector2 shadowOffsetValueTemp = Vector2_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setShadowOffset(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Vector2*>(&shadowOffsetValueTemp), unitValue);
}
KOALA_INTEROP_DIRECT_V4(RenderNodeExtender_setShadowOffset, Ark_NativePointer, KSerializerBuffer, int32_t, Ark_Int32)
void impl_RenderNodeExtender_setLabel(Ark_NativePointer peer, const KStringPtr& label) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setLabel(static_cast<Ark_RenderNode>(peer), (const Ark_String*) (&label));
}
KOALA_INTEROP_V2(RenderNodeExtender_setLabel, Ark_NativePointer, KStringPtr)
void impl_RenderNodeExtender_setShadowAlpha(Ark_NativePointer peer, KInteropNumber shadowAlpha) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setShadowAlpha(static_cast<Ark_RenderNode>(peer), (const Ark_Number*) (&shadowAlpha));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setShadowAlpha, Ark_NativePointer, KInteropNumber)
void impl_RenderNodeExtender_setShadowElevation(Ark_NativePointer peer, KInteropNumber shadowElevation) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setShadowElevation(static_cast<Ark_RenderNode>(peer), (const Ark_Number*) (&shadowElevation));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setShadowElevation, Ark_NativePointer, KInteropNumber)
void impl_RenderNodeExtender_setShadowRadius(Ark_NativePointer peer, KInteropNumber shadowRadius) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setShadowRadius(static_cast<Ark_RenderNode>(peer), (const Ark_Number*) (&shadowRadius));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setShadowRadius, Ark_NativePointer, KInteropNumber)
void impl_RenderNodeExtender_setBorderStyle(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_NodeEdgeStyles borderStyleValueTemp = NodeEdgeStyles_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setBorderStyle(static_cast<Ark_RenderNode>(peer), static_cast<Ark_NodeEdgeStyles*>(&borderStyleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setBorderStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setBorderWidth(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, Ark_Int32 unitValue) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_EdgeNumber borderWidthValueTemp = EdgeNumber_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setBorderWidth(static_cast<Ark_RenderNode>(peer), static_cast<Ark_EdgeNumber*>(&borderWidthValueTemp), unitValue);
}
KOALA_INTEROP_DIRECT_V4(RenderNodeExtender_setBorderWidth, Ark_NativePointer, KSerializerBuffer, int32_t, Ark_Int32)
void impl_RenderNodeExtender_setBorderColor(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_EdgeNumber borderColorValueTemp = EdgeNumber_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setBorderColor(static_cast<Ark_RenderNode>(peer), static_cast<Ark_EdgeNumber*>(&borderColorValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setBorderColor, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setBorderRadius(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, Ark_Int32 unitValue) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_BorderRadiuses_graphics borderRadiusValueTemp = BorderRadiuses_graphics_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setBorderRadius(static_cast<Ark_RenderNode>(peer), static_cast<Ark_BorderRadiuses_graphics*>(&borderRadiusValueTemp), unitValue);
}
KOALA_INTEROP_DIRECT_V4(RenderNodeExtender_setBorderRadius, Ark_NativePointer, KSerializerBuffer, int32_t, Ark_Int32)
void impl_RenderNodeExtender_setMarkNodeGroup(Ark_NativePointer peer, Ark_Boolean markNodeGroup) {
        GetAccessors()->getRenderNodeExtenderAccessor()->setMarkNodeGroup(static_cast<Ark_RenderNode>(peer), markNodeGroup);
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_setMarkNodeGroup, Ark_NativePointer, Ark_Boolean)
void impl_RenderNodeExtender_setRectMask(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber fillColor, KInteropNumber strokeColor, KInteropNumber strokeWidth) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_common2D_Rect rectValueTemp = common2D_Rect_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setRectMask(static_cast<Ark_RenderNode>(peer), static_cast<Ark_common2D_Rect*>(&rectValueTemp), (const Ark_Number*) (&fillColor), (const Ark_Number*) (&strokeColor), (const Ark_Number*) (&strokeWidth));
}
KOALA_INTEROP_DIRECT_V6(RenderNodeExtender_setRectMask, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_RenderNodeExtender_setCircleMask(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber fillColor, KInteropNumber strokeColor, KInteropNumber strokeWidth) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Circle circleValueTemp = Circle_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setCircleMask(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Circle*>(&circleValueTemp), (const Ark_Number*) (&fillColor), (const Ark_Number*) (&strokeColor), (const Ark_Number*) (&strokeWidth));
}
KOALA_INTEROP_DIRECT_V6(RenderNodeExtender_setCircleMask, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_RenderNodeExtender_setRoundRectMask(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber fillColor, KInteropNumber strokeColor, KInteropNumber strokeWidth) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RoundRect roundRectValueTemp = RoundRect_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setRoundRectMask(static_cast<Ark_RenderNode>(peer), static_cast<Ark_RoundRect*>(&roundRectValueTemp), (const Ark_Number*) (&fillColor), (const Ark_Number*) (&strokeColor), (const Ark_Number*) (&strokeWidth));
}
KOALA_INTEROP_DIRECT_V6(RenderNodeExtender_setRoundRectMask, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_RenderNodeExtender_setOvalMask(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber fillColor, KInteropNumber strokeColor, KInteropNumber strokeWidth) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_common2D_Rect rectValueTemp = common2D_Rect_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setOvalMask(static_cast<Ark_RenderNode>(peer), static_cast<Ark_common2D_Rect*>(&rectValueTemp), (const Ark_Number*) (&fillColor), (const Ark_Number*) (&strokeColor), (const Ark_Number*) (&strokeWidth));
}
KOALA_INTEROP_DIRECT_V6(RenderNodeExtender_setOvalMask, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_RenderNodeExtender_setPath(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber fillColor, KInteropNumber strokeColor, KInteropNumber strokeWidth) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_CommandPath pathValueTemp = CommandPath_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setPath(static_cast<Ark_RenderNode>(peer), static_cast<Ark_CommandPath*>(&pathValueTemp), (const Ark_Number*) (&fillColor), (const Ark_Number*) (&strokeColor), (const Ark_Number*) (&strokeWidth));
}
KOALA_INTEROP_DIRECT_V6(RenderNodeExtender_setPath, Ark_NativePointer, KSerializerBuffer, int32_t, KInteropNumber, KInteropNumber, KInteropNumber)
void impl_RenderNodeExtender_setRectClip(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_common2D_Rect rectValueTemp = common2D_Rect_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setRectClip(static_cast<Ark_RenderNode>(peer), static_cast<Ark_common2D_Rect*>(&rectValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setRectClip, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setCircleClip(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Circle circleValueTemp = Circle_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setCircleClip(static_cast<Ark_RenderNode>(peer), static_cast<Ark_Circle*>(&circleValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setCircleClip, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setRoundRectClip(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RoundRect roundRectValueTemp = RoundRect_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setRoundRectClip(static_cast<Ark_RenderNode>(peer), static_cast<Ark_RoundRect*>(&roundRectValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setRoundRectClip, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setOvalClip(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_common2D_Rect rectValueTemp = common2D_Rect_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setOvalClip(static_cast<Ark_RenderNode>(peer), static_cast<Ark_common2D_Rect*>(&rectValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setOvalClip, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_setPathClip(Ark_NativePointer peer, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_CommandPath pathValueTemp = CommandPath_serializer::read(thisDeserializer);;
        GetAccessors()->getRenderNodeExtenderAccessor()->setPathClip(static_cast<Ark_RenderNode>(peer), static_cast<Ark_CommandPath*>(&pathValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_setPathClip, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RenderNodeExtender_appendChild(Ark_NativePointer peer, Ark_NativePointer node) {
        GetAccessors()->getRenderNodeExtenderAccessor()->appendChild(static_cast<Ark_RenderNode>(peer), static_cast<Ark_RenderNode>(node));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_appendChild, Ark_NativePointer, Ark_NativePointer)
void impl_RenderNodeExtender_insertChildAfter(Ark_NativePointer peer, Ark_NativePointer child, Ark_NativePointer sibling) {
        GetAccessors()->getRenderNodeExtenderAccessor()->insertChildAfter(static_cast<Ark_RenderNode>(peer), static_cast<Ark_RenderNode>(child), static_cast<Ark_RenderNode>(sibling));
}
KOALA_INTEROP_DIRECT_V3(RenderNodeExtender_insertChildAfter, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
void impl_RenderNodeExtender_removeChild(Ark_NativePointer peer, Ark_NativePointer node) {
        GetAccessors()->getRenderNodeExtenderAccessor()->removeChild(static_cast<Ark_RenderNode>(peer), static_cast<Ark_RenderNode>(node));
}
KOALA_INTEROP_DIRECT_V2(RenderNodeExtender_removeChild, Ark_NativePointer, Ark_NativePointer)
void impl_RenderNodeExtender_clearChildren(Ark_NativePointer peer) {
        GetAccessors()->getRenderNodeExtenderAccessor()->clearChildren(static_cast<Ark_RenderNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(RenderNodeExtender_clearChildren, Ark_NativePointer)
void impl_RenderNodeExtender_invalidate(Ark_NativePointer peer) {
        GetAccessors()->getRenderNodeExtenderAccessor()->invalidate(static_cast<Ark_RenderNode>(peer));
}
KOALA_INTEROP_DIRECT_V1(RenderNodeExtender_invalidate, Ark_NativePointer)
Ark_Int32 impl_RenderServiceNode_getNodeId(const KStringPtr& nodeId) {
        return GetAccessors()->getRenderServiceNodeAccessor()->getNodeId((const Ark_String*) (&nodeId));
}
KOALA_INTEROP_1(RenderServiceNode_getNodeId, Ark_Int32, KStringPtr)
Ark_NativePointer impl_ReplaceSymbolEffect_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        return GetAccessors()->getReplaceSymbolEffectAccessor()->construct(static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_2(ReplaceSymbolEffect_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ReplaceSymbolEffect_getFinalizer() {
        return GetAccessors()->getReplaceSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ReplaceSymbolEffect_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_ReplaceSymbolEffect_getScope(Ark_NativePointer thisPtr) {
        Ark_ReplaceSymbolEffect self = reinterpret_cast<Ark_ReplaceSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getReplaceSymbolEffectAccessor()->getScope(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectScope>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ReplaceSymbolEffect_getScope, KInteropReturnBuffer, Ark_NativePointer)
void impl_ReplaceSymbolEffect_setScope(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ReplaceSymbolEffect self = reinterpret_cast<Ark_ReplaceSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        GetAccessors()->getReplaceSymbolEffectAccessor()->setScope(self, static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ReplaceSymbolEffect_setScope, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RestrictedWorker_construct(const KStringPtr& scriptURL, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WorkerOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = WorkerOptions_serializer::read(thisDeserializer);
        }
        Opt_WorkerOptions optionsValueTemp = optionsValueTempTmpBuf;;
        return GetAccessors()->getRestrictedWorkerAccessor()->construct((const Ark_String*) (&scriptURL), static_cast<Opt_WorkerOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_3(RestrictedWorker_construct, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RestrictedWorker_getFinalizer() {
        return GetAccessors()->getRestrictedWorkerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(RestrictedWorker_getFinalizer, Ark_NativePointer)
void impl_RestrictedWorker_postMessage0(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object messageValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        const Ark_Int32 transferValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_Buffer transferValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(transferValueTempTmpBuf)>::type,
        std::decay<decltype(*transferValueTempTmpBuf.array)>::type>(&transferValueTempTmpBuf, transferValueTempTmpBufLength);
        for (int transferValueTempTmpBufBufCounterI = 0; transferValueTempTmpBufBufCounterI < transferValueTempTmpBufLength; transferValueTempTmpBufBufCounterI++) {
            transferValueTempTmpBuf.array[transferValueTempTmpBufBufCounterI] = static_cast<Ark_Buffer>(thisDeserializer.readBuffer());
        }
        Array_Buffer transferValueTemp = transferValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->postMessage0(reinterpret_cast<Ark_VMContext>(vmContext), self, static_cast<Ark_Object*>(&messageValueTemp), static_cast<Array_Buffer*>(&transferValueTemp));
}
KOALA_INTEROP_CTX_V3(RestrictedWorker_postMessage0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_postMessage1(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object messageValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_PostMessageOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = PostMessageOptions_serializer::read(thisDeserializer);
        }
        Opt_PostMessageOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->postMessage1(reinterpret_cast<Ark_VMContext>(vmContext), self, static_cast<Ark_Object*>(&messageValueTemp), static_cast<Opt_PostMessageOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_CTX_V3(RestrictedWorker_postMessage1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_postMessageWithSharedSendable(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object messageValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        const auto transferValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Buffer transferValueTempTmpBuf = {};
        transferValueTempTmpBuf.tag = transferValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((transferValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 transferValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Buffer transferValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(transferValueTempTmpBuf_)>::type,
        std::decay<decltype(*transferValueTempTmpBuf_.array)>::type>(&transferValueTempTmpBuf_, transferValueTempTmpBuf_Length);
            for (int transferValueTempTmpBuf_BufCounterI = 0; transferValueTempTmpBuf_BufCounterI < transferValueTempTmpBuf_Length; transferValueTempTmpBuf_BufCounterI++) {
                transferValueTempTmpBuf_.array[transferValueTempTmpBuf_BufCounterI] = static_cast<Ark_Buffer>(thisDeserializer.readBuffer());
            }
            transferValueTempTmpBuf.value = transferValueTempTmpBuf_;
        }
        Opt_Array_Buffer transferValueTemp = transferValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->postMessageWithSharedSendable(reinterpret_cast<Ark_VMContext>(vmContext), self, static_cast<Ark_Object*>(&messageValueTemp), static_cast<Opt_Array_Buffer*>(&transferValueTemp));
}
KOALA_INTEROP_CTX_V3(RestrictedWorker_postMessageWithSharedSendable, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_on(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& Type, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        WorkerEventListener listenerValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_WorkerEventListener)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_WorkerEventListener))))};;
        GetAccessors()->getRestrictedWorkerAccessor()->on(reinterpret_cast<Ark_VMContext>(vmContext), self, (const Ark_String*) (&Type), static_cast<WorkerEventListener*>(&listenerValueTemp));
}
KOALA_INTEROP_CTX_V4(RestrictedWorker_on, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_once(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& Type, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        WorkerEventListener listenerValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_WorkerEventListener)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_WorkerEventListener))))};;
        GetAccessors()->getRestrictedWorkerAccessor()->once(reinterpret_cast<Ark_VMContext>(vmContext), self, (const Ark_String*) (&Type), static_cast<WorkerEventListener*>(&listenerValueTemp));
}
KOALA_INTEROP_CTX_V4(RestrictedWorker_once, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_off(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& Type, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto listenerValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WorkerEventListener listenerValueTempTmpBuf = {};
        listenerValueTempTmpBuf.tag = listenerValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((listenerValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            listenerValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_WorkerEventListener)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_WorkerEventListener))))};
        }
        Opt_WorkerEventListener listenerValueTemp = listenerValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->off(reinterpret_cast<Ark_VMContext>(vmContext), self, (const Ark_String*) (&Type), static_cast<Opt_WorkerEventListener*>(&listenerValueTemp));
}
KOALA_INTEROP_CTX_V4(RestrictedWorker_off, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_terminate(KVMContext vmContext, Ark_NativePointer thisPtr) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        GetAccessors()->getRestrictedWorkerAccessor()->terminate(reinterpret_cast<Ark_VMContext>(vmContext), self);
}
KOALA_INTEROP_CTX_V1(RestrictedWorker_terminate, Ark_NativePointer)
void impl_RestrictedWorker_addEventListener(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& Type, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        WorkerEventListener listenerValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_WorkerEventListener)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_WorkerEventListener))))};;
        GetAccessors()->getRestrictedWorkerAccessor()->addEventListener(reinterpret_cast<Ark_VMContext>(vmContext), self, (const Ark_String*) (&Type), static_cast<WorkerEventListener*>(&listenerValueTemp));
}
KOALA_INTEROP_CTX_V4(RestrictedWorker_addEventListener, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
Ark_Boolean impl_RestrictedWorker_dispatchEvent(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Event eventValueTemp = Event_serializer::read(thisDeserializer);;
        return GetAccessors()->getRestrictedWorkerAccessor()->dispatchEvent(reinterpret_cast<Ark_VMContext>(vmContext), self, static_cast<Ark_Event*>(&eventValueTemp));
}
KOALA_INTEROP_CTX_3(RestrictedWorker_dispatchEvent, Ark_Boolean, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_removeEventListener(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& Type, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_WorkerEventListener callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_WorkerEventListener)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Event event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_WorkerEventListener))))};
        }
        Opt_WorkerEventListener callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->removeEventListener(reinterpret_cast<Ark_VMContext>(vmContext), self, (const Ark_String*) (&Type), static_cast<Opt_WorkerEventListener*>(&callback_ValueTemp));
}
KOALA_INTEROP_CTX_V4(RestrictedWorker_removeEventListener, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_removeAllListener(KVMContext vmContext, Ark_NativePointer thisPtr) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        GetAccessors()->getRestrictedWorkerAccessor()->removeAllListener(reinterpret_cast<Ark_VMContext>(vmContext), self);
}
KOALA_INTEROP_CTX_V1(RestrictedWorker_removeAllListener, Ark_NativePointer)
void impl_RestrictedWorker_registerGlobalCallObject(KVMContext vmContext, Ark_NativePointer thisPtr, const KStringPtr& instanceName, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object globalCallObjectValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        GetAccessors()->getRestrictedWorkerAccessor()->registerGlobalCallObject(reinterpret_cast<Ark_VMContext>(vmContext), self, (const Ark_String*) (&instanceName), static_cast<Ark_Object*>(&globalCallObjectValueTemp));
}
KOALA_INTEROP_CTX_V4(RestrictedWorker_registerGlobalCallObject, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_RestrictedWorker_unregisterGlobalCallObject(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto instanceNameValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_String instanceNameValueTempTmpBuf = {};
        instanceNameValueTempTmpBuf.tag = instanceNameValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((instanceNameValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            instanceNameValueTempTmpBuf.value = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Opt_String instanceNameValueTemp = instanceNameValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->unregisterGlobalCallObject(reinterpret_cast<Ark_VMContext>(vmContext), self, static_cast<Opt_String*>(&instanceNameValueTemp));
}
KOALA_INTEROP_CTX_V3(RestrictedWorker_unregisterGlobalCallObject, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_RestrictedWorker_getOnexit(Ark_NativePointer thisPtr) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        const auto &retValue = GetAccessors()->getRestrictedWorkerAccessor()->getOnexit(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RestrictedWorker_getOnexit, KInteropReturnBuffer, Ark_NativePointer)
void impl_RestrictedWorker_setOnexit(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto onexitValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RestrictedWorker_onexit_Callback onexitValueTempTmpBuf = {};
        onexitValueTempTmpBuf.tag = onexitValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onexitValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onexitValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Number code)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RestrictedWorker_onexit_Callback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Number code)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RestrictedWorker_onexit_Callback))))};
        }
        Opt_RestrictedWorker_onexit_Callback onexitValueTemp = onexitValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->setOnexit(self, static_cast<Opt_RestrictedWorker_onexit_Callback*>(&onexitValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RestrictedWorker_setOnexit, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_RestrictedWorker_getOnerror(Ark_NativePointer thisPtr) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        const auto &retValue = GetAccessors()->getRestrictedWorkerAccessor()->getOnerror(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RestrictedWorker_getOnerror, KInteropReturnBuffer, Ark_NativePointer)
void impl_RestrictedWorker_setOnerror(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto onerrorValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RestrictedWorker_onerror_Callback onerrorValueTempTmpBuf = {};
        onerrorValueTempTmpBuf.tag = onerrorValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onerrorValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onerrorValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ErrorEvent ev)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RestrictedWorker_onerror_Callback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ErrorEvent ev)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RestrictedWorker_onerror_Callback))))};
        }
        Opt_RestrictedWorker_onerror_Callback onerrorValueTemp = onerrorValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->setOnerror(self, static_cast<Opt_RestrictedWorker_onerror_Callback*>(&onerrorValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RestrictedWorker_setOnerror, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_RestrictedWorker_getOnmessage(Ark_NativePointer thisPtr) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        const auto &retValue = GetAccessors()->getRestrictedWorkerAccessor()->getOnmessage(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RestrictedWorker_getOnmessage, KInteropReturnBuffer, Ark_NativePointer)
void impl_RestrictedWorker_setOnmessage(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto onmessageValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RestrictedWorker_onmessage_Callback onmessageValueTempTmpBuf = {};
        onmessageValueTempTmpBuf.tag = onmessageValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onmessageValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onmessageValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_MessageEvents event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RestrictedWorker_onmessage_Callback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_MessageEvents event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RestrictedWorker_onmessage_Callback))))};
        }
        Opt_RestrictedWorker_onmessage_Callback onmessageValueTemp = onmessageValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->setOnmessage(self, static_cast<Opt_RestrictedWorker_onmessage_Callback*>(&onmessageValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RestrictedWorker_setOnmessage, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_RestrictedWorker_getOnmessageerror(Ark_NativePointer thisPtr) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        const auto &retValue = GetAccessors()->getRestrictedWorkerAccessor()->getOnmessageerror(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeCallbackResource(retValueTmpValue.resource);
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.call));
            _retSerializer.writePointer(reinterpret_cast<Ark_NativePointer>(retValueTmpValue.callSync));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RestrictedWorker_getOnmessageerror, KInteropReturnBuffer, Ark_NativePointer)
void impl_RestrictedWorker_setOnmessageerror(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RestrictedWorker self = reinterpret_cast<Ark_RestrictedWorker>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto onmessageerrorValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RestrictedWorker_onmessage_Callback onmessageerrorValueTempTmpBuf = {};
        onmessageerrorValueTempTmpBuf.tag = onmessageerrorValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((onmessageerrorValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            onmessageerrorValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_MessageEvents event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RestrictedWorker_onmessage_Callback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_MessageEvents event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RestrictedWorker_onmessage_Callback))))};
        }
        Opt_RestrictedWorker_onmessage_Callback onmessageerrorValueTemp = onmessageerrorValueTempTmpBuf;;
        GetAccessors()->getRestrictedWorkerAccessor()->setOnmessageerror(self, static_cast<Opt_RestrictedWorker_onmessage_Callback*>(&onmessageerrorValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RestrictedWorker_setOnmessageerror, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RichEditorBaseController_construct() {
        return GetAccessors()->getRichEditorBaseControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(RichEditorBaseController_construct, Ark_NativePointer)
Ark_NativePointer impl_RichEditorBaseController_getFinalizer() {
        return GetAccessors()->getRichEditorBaseControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(RichEditorBaseController_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_RichEditorBaseController_getCaretOffset(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        return GetAccessors()->getRichEditorBaseControllerAccessor()->getCaretOffset(self);
}
KOALA_INTEROP_DIRECT_1(RichEditorBaseController_getCaretOffset, Ark_Int32, Ark_NativePointer)
Ark_Boolean impl_RichEditorBaseController_setCaretOffset(Ark_NativePointer thisPtr, Ark_Int32 offset) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        return GetAccessors()->getRichEditorBaseControllerAccessor()->setCaretOffset(self, (const Ark_Int32*) (&offset));
}
KOALA_INTEROP_DIRECT_2(RichEditorBaseController_setCaretOffset, Ark_Boolean, Ark_NativePointer, Ark_Int32)
void impl_RichEditorBaseController_closeSelectionMenu(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        GetAccessors()->getRichEditorBaseControllerAccessor()->closeSelectionMenu(self);
}
KOALA_INTEROP_DIRECT_V1(RichEditorBaseController_closeSelectionMenu, Ark_NativePointer)
KInteropReturnBuffer impl_RichEditorBaseController_getTypingStyle(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        const auto &retValue = GetAccessors()->getRichEditorBaseControllerAccessor()->getTypingStyle(self);
        SerializerBase _retSerializer {};
        RichEditorTextStyle_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RichEditorBaseController_getTypingStyle, KInteropReturnBuffer, Ark_NativePointer)
void impl_RichEditorBaseController_setTypingStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RichEditorTextStyle valueValueTemp = RichEditorTextStyle_serializer::read(thisDeserializer);;
        GetAccessors()->getRichEditorBaseControllerAccessor()->setTypingStyle(self, static_cast<Ark_RichEditorTextStyle*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorBaseController_setTypingStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorBaseController_setSelection(Ark_NativePointer thisPtr, Ark_Int32 selectionStart, Ark_Int32 selectionEnd, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionOptions_serializer::read(thisDeserializer);
        }
        Opt_SelectionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getRichEditorBaseControllerAccessor()->setSelection(self, (const Ark_Int32*) (&selectionStart), (const Ark_Int32*) (&selectionEnd), static_cast<Opt_SelectionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V5(RichEditorBaseController_setSelection, Ark_NativePointer, Ark_Int32, Ark_Int32, KSerializerBuffer, int32_t)
Ark_Boolean impl_RichEditorBaseController_isEditing(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        return GetAccessors()->getRichEditorBaseControllerAccessor()->isEditing(self);
}
KOALA_INTEROP_DIRECT_1(RichEditorBaseController_isEditing, Ark_Boolean, Ark_NativePointer)
void impl_RichEditorBaseController_stopEditing(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        GetAccessors()->getRichEditorBaseControllerAccessor()->stopEditing(self);
}
KOALA_INTEROP_DIRECT_V1(RichEditorBaseController_stopEditing, Ark_NativePointer)
Ark_NativePointer impl_RichEditorBaseController_getLayoutManager(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        return GetAccessors()->getRichEditorBaseControllerAccessor()->getLayoutManager(self);
}
KOALA_INTEROP_DIRECT_1(RichEditorBaseController_getLayoutManager, Ark_NativePointer, Ark_NativePointer)
KInteropReturnBuffer impl_RichEditorBaseController_getPreviewText(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        const auto &retValue = GetAccessors()->getRichEditorBaseControllerAccessor()->getPreviewText(self);
        SerializerBase _retSerializer {};
        PreviewText_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RichEditorBaseController_getPreviewText, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_RichEditorBaseController_getCaretRect(Ark_NativePointer thisPtr) {
        Ark_RichEditorBaseController self = reinterpret_cast<Ark_RichEditorBaseController>(thisPtr);
        const auto &retValue = GetAccessors()->getRichEditorBaseControllerAccessor()->getCaretRect(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            RectResult_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RichEditorBaseController_getCaretRect, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_RichEditorController_construct() {
        return GetAccessors()->getRichEditorControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(RichEditorController_construct, Ark_NativePointer)
Ark_NativePointer impl_RichEditorController_getFinalizer() {
        return GetAccessors()->getRichEditorControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(RichEditorController_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_RichEditorController_addTextSpan(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 contentValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceStr contentValueTempTmpBuf = {};
        contentValueTempTmpBuf.selector = contentValueTempTmpBufUnionSelector;
        if (contentValueTempTmpBufUnionSelector == 0) {
            contentValueTempTmpBuf.selector = 0;
            contentValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (contentValueTempTmpBufUnionSelector == 1) {
            contentValueTempTmpBuf.selector = 1;
            contentValueTempTmpBuf.value1 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for contentValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceStr contentValueTemp = static_cast<Ark_ResourceStr>(contentValueTempTmpBuf);;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorTextSpanOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = RichEditorTextSpanOptions_serializer::read(thisDeserializer);
        }
        Opt_RichEditorTextSpanOptions optionsValueTemp = optionsValueTempTmpBuf;;
        return GetAccessors()->getRichEditorControllerAccessor()->addTextSpan(self, static_cast<Ark_ResourceStr*>(&contentValueTemp), static_cast<Opt_RichEditorTextSpanOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_3(RichEditorController_addTextSpan, Ark_Int32, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_RichEditorController_addImageSpan(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_PixelMap_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = static_cast<Ark_image_PixelMap>(image_PixelMap_serializer::read(thisDeserializer));
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            const Ark_Int8 valueValueTempTmpBufBufUUnionSelector = thisDeserializer.readInt8();
            Ark_ResourceStr valueValueTempTmpBufBufU = {};
            valueValueTempTmpBufBufU.selector = valueValueTempTmpBufBufUUnionSelector;
            if (valueValueTempTmpBufBufUUnionSelector == 0) {
                valueValueTempTmpBufBufU.selector = 0;
                valueValueTempTmpBufBufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBufBufUUnionSelector == 1) {
                valueValueTempTmpBufBufU.selector = 1;
                valueValueTempTmpBufBufU.value1 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBufBufU has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value1 = static_cast<Ark_ResourceStr>(valueValueTempTmpBufBufU);
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_PixelMap_ResourceStr valueValueTemp = static_cast<Ark_Union_PixelMap_ResourceStr>(valueValueTempTmpBuf);;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorImageSpanOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = RichEditorImageSpanOptions_serializer::read(thisDeserializer);
        }
        Opt_RichEditorImageSpanOptions optionsValueTemp = optionsValueTempTmpBuf;;
        return GetAccessors()->getRichEditorControllerAccessor()->addImageSpan(self, static_cast<Ark_Union_PixelMap_ResourceStr*>(&valueValueTemp), static_cast<Opt_RichEditorImageSpanOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_3(RichEditorController_addImageSpan, Ark_Int32, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_RichEditorController_addBuilderSpan(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        CustomNodeBuilder valueValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_CustomNodeBuilder)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer parentNode, const Callback_Pointer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_CustomNodeBuilder))))};;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorBuilderSpanOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = RichEditorBuilderSpanOptions_serializer::read(thisDeserializer);
        }
        Opt_RichEditorBuilderSpanOptions optionsValueTemp = optionsValueTempTmpBuf;;
        return GetAccessors()->getRichEditorControllerAccessor()->addBuilderSpan(self, static_cast<CustomNodeBuilder*>(&valueValueTemp), static_cast<Opt_RichEditorBuilderSpanOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_3(RichEditorController_addBuilderSpan, Ark_Int32, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Int32 impl_RichEditorController_addSymbolSpan(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Resource valueValueTemp = Resource_serializer::read(thisDeserializer);;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorSymbolSpanOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = RichEditorSymbolSpanOptions_serializer::read(thisDeserializer);
        }
        Opt_RichEditorSymbolSpanOptions optionsValueTemp = optionsValueTempTmpBuf;;
        return GetAccessors()->getRichEditorControllerAccessor()->addSymbolSpan(self, static_cast<Ark_Resource*>(&valueValueTemp), static_cast<Opt_RichEditorSymbolSpanOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_3(RichEditorController_addSymbolSpan, Ark_Int32, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorController_updateSpanStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_RichEditorUpdateTextSpanStyleOptions_RichEditorUpdateImageSpanStyleOptions_RichEditorUpdateSymbolSpanStyleOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = RichEditorUpdateTextSpanStyleOptions_serializer::read(thisDeserializer);
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = RichEditorUpdateImageSpanStyleOptions_serializer::read(thisDeserializer);
        } else if (valueValueTempTmpBufUnionSelector == 2) {
            valueValueTempTmpBuf.selector = 2;
            valueValueTempTmpBuf.value2 = RichEditorUpdateSymbolSpanStyleOptions_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_RichEditorUpdateTextSpanStyleOptions_RichEditorUpdateImageSpanStyleOptions_RichEditorUpdateSymbolSpanStyleOptions valueValueTemp = static_cast<Ark_Union_RichEditorUpdateTextSpanStyleOptions_RichEditorUpdateImageSpanStyleOptions_RichEditorUpdateSymbolSpanStyleOptions>(valueValueTempTmpBuf);;
        GetAccessors()->getRichEditorControllerAccessor()->updateSpanStyle(self, static_cast<Ark_Union_RichEditorUpdateTextSpanStyleOptions_RichEditorUpdateImageSpanStyleOptions_RichEditorUpdateSymbolSpanStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorController_updateSpanStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorController_updateParagraphStyle(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RichEditorParagraphStyleOptions valueValueTemp = RichEditorParagraphStyleOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getRichEditorControllerAccessor()->updateParagraphStyle(self, static_cast<Ark_RichEditorParagraphStyleOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorController_updateParagraphStyle, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RichEditorController_deleteSpans(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorRange valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = RichEditorRange_serializer::read(thisDeserializer);
        }
        Opt_RichEditorRange valueValueTemp = valueValueTempTmpBuf;;
        GetAccessors()->getRichEditorControllerAccessor()->deleteSpans(self, static_cast<Opt_RichEditorRange*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorController_deleteSpans, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_RichEditorController_getSpans(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorRange valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = RichEditorRange_serializer::read(thisDeserializer);
        }
        Opt_RichEditorRange valueValueTemp = valueValueTempTmpBuf;;
        const auto &retValue = GetAccessors()->getRichEditorControllerAccessor()->getSpans(self, static_cast<Opt_RichEditorRange*>(&valueValueTemp));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_Union_RichEditorImageSpanResult_RichEditorTextSpanResult retValueTmpElement = retValue.array[retValueCounterI];
            if (retValueTmpElement.selector == 0) {
                _retSerializer.writeInt8(0);
                const auto retValueTmpElementForIdx0 = retValueTmpElement.value0;
                RichEditorImageSpanResult_serializer::write(_retSerializer, retValueTmpElementForIdx0);
            } else if (retValueTmpElement.selector == 1) {
                _retSerializer.writeInt8(1);
                const auto retValueTmpElementForIdx1 = retValueTmpElement.value1;
                RichEditorTextSpanResult_serializer::write(_retSerializer, retValueTmpElementForIdx1);
            }
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(RichEditorController_getSpans, KInteropReturnBuffer, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_RichEditorController_getParagraphs(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RichEditorRange valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = RichEditorRange_serializer::read(thisDeserializer);
        }
        Opt_RichEditorRange valueValueTemp = valueValueTempTmpBuf;;
        const auto &retValue = GetAccessors()->getRichEditorControllerAccessor()->getParagraphs(self, static_cast<Opt_RichEditorRange*>(&valueValueTemp));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_RichEditorParagraphResult retValueTmpElement = retValue.array[retValueCounterI];
            RichEditorParagraphResult_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(RichEditorController_getParagraphs, KInteropReturnBuffer, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_RichEditorController_getSelection(Ark_NativePointer thisPtr) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        const auto &retValue = GetAccessors()->getRichEditorControllerAccessor()->getSelection(self);
        SerializerBase _retSerializer {};
        RichEditorSelection_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RichEditorController_getSelection, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_RichEditorController_fromStyledString(Ark_NativePointer thisPtr, Ark_NativePointer value) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        const auto &retValue = GetAccessors()->getRichEditorControllerAccessor()->fromStyledString(self, static_cast<Ark_StyledString>(value));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_RichEditorSpan retValueTmpElement = retValue.array[retValueCounterI];
            if (retValueTmpElement.selector == 0) {
                _retSerializer.writeInt8(0);
                const auto retValueTmpElementForIdx0 = retValueTmpElement.value0;
                RichEditorImageSpanResult_serializer::write(_retSerializer, retValueTmpElementForIdx0);
            } else if (retValueTmpElement.selector == 1) {
                _retSerializer.writeInt8(1);
                const auto retValueTmpElementForIdx1 = retValueTmpElement.value1;
                RichEditorTextSpanResult_serializer::write(_retSerializer, retValueTmpElementForIdx1);
            }
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(RichEditorController_fromStyledString, KInteropReturnBuffer, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_RichEditorController_toStyledString(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorController self = reinterpret_cast<Ark_RichEditorController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RichEditorRange valueValueTemp = RichEditorRange_serializer::read(thisDeserializer);;
        return GetAccessors()->getRichEditorControllerAccessor()->toStyledString(self, static_cast<Ark_RichEditorRange*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(RichEditorController_toStyledString, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RichEditorStyledStringController_construct() {
        return GetAccessors()->getRichEditorStyledStringControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(RichEditorStyledStringController_construct, Ark_NativePointer)
Ark_NativePointer impl_RichEditorStyledStringController_getFinalizer() {
        return GetAccessors()->getRichEditorStyledStringControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(RichEditorStyledStringController_getFinalizer, Ark_NativePointer)
void impl_RichEditorStyledStringController_setStyledString(Ark_NativePointer thisPtr, Ark_NativePointer styledString) {
        Ark_RichEditorStyledStringController self = reinterpret_cast<Ark_RichEditorStyledStringController>(thisPtr);
        GetAccessors()->getRichEditorStyledStringControllerAccessor()->setStyledString(self, static_cast<Ark_StyledString>(styledString));
}
KOALA_INTEROP_DIRECT_V2(RichEditorStyledStringController_setStyledString, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_RichEditorStyledStringController_getStyledString(Ark_NativePointer thisPtr) {
        Ark_RichEditorStyledStringController self = reinterpret_cast<Ark_RichEditorStyledStringController>(thisPtr);
        return GetAccessors()->getRichEditorStyledStringControllerAccessor()->getStyledString(self);
}
KOALA_INTEROP_DIRECT_1(RichEditorStyledStringController_getStyledString, Ark_NativePointer, Ark_NativePointer)
KInteropReturnBuffer impl_RichEditorStyledStringController_getSelection(Ark_NativePointer thisPtr) {
        Ark_RichEditorStyledStringController self = reinterpret_cast<Ark_RichEditorStyledStringController>(thisPtr);
        const auto &retValue = GetAccessors()->getRichEditorStyledStringControllerAccessor()->getSelection(self);
        SerializerBase _retSerializer {};
        RichEditorRange_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RichEditorStyledStringController_getSelection, KInteropReturnBuffer, Ark_NativePointer)
void impl_RichEditorStyledStringController_onContentChanged(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_RichEditorStyledStringController self = reinterpret_cast<Ark_RichEditorStyledStringController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_StyledStringChangedListener listenerValueTemp = StyledStringChangedListener_serializer::read(thisDeserializer);;
        GetAccessors()->getRichEditorStyledStringControllerAccessor()->onContentChanged(self, static_cast<Ark_StyledStringChangedListener*>(&listenerValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RichEditorStyledStringController_onContentChanged, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_RotationGestureEvent_construct() {
        return GetAccessors()->getRotationGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(RotationGestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_RotationGestureEvent_getFinalizer() {
        return GetAccessors()->getRotationGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(RotationGestureEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_RotationGestureEvent_getAngle(Ark_NativePointer thisPtr) {
        Ark_RotationGestureEvent self = reinterpret_cast<Ark_RotationGestureEvent>(thisPtr);
        return GetAccessors()->getRotationGestureEventAccessor()->getAngle(self);
}
KOALA_INTEROP_DIRECT_1(RotationGestureEvent_getAngle, Ark_Int32, Ark_NativePointer)
void impl_RotationGestureEvent_setAngle(Ark_NativePointer thisPtr, KDouble angle) {
        Ark_RotationGestureEvent self = reinterpret_cast<Ark_RotationGestureEvent>(thisPtr);
        GetAccessors()->getRotationGestureEventAccessor()->setAngle(self, angle);
}
KOALA_INTEROP_DIRECT_V2(RotationGestureEvent_setAngle, Ark_NativePointer, KDouble)
Ark_NativePointer impl_RotationRecognizer_construct() {
        return GetAccessors()->getRotationRecognizerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(RotationRecognizer_construct, Ark_NativePointer)
Ark_NativePointer impl_RotationRecognizer_getFinalizer() {
        return GetAccessors()->getRotationRecognizerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(RotationRecognizer_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_RotationRecognizer_getAngle(Ark_NativePointer thisPtr) {
        Ark_RotationRecognizer self = reinterpret_cast<Ark_RotationRecognizer>(thisPtr);
        return GetAccessors()->getRotationRecognizerAccessor()->getAngle(self);
}
KOALA_INTEROP_DIRECT_1(RotationRecognizer_getAngle, Ark_Int32, Ark_NativePointer)
void impl_RouterExtender_push0(KVMContext vmContext, Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getRouterExtenderAccessor()->push0(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(RouterExtender_push0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_push1(Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AsyncCallback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AsyncCallback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AsyncCallback_Void))))};
        }
        Opt_AsyncCallback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getRouterExtenderAccessor()->push1(jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp), static_cast<Opt_AsyncCallback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RouterExtender_push1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_replace0(KVMContext vmContext, Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto enterFinishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback enterFinishCallbackValueTempTmpBuf = {};
        enterFinishCallbackValueTempTmpBuf.tag = enterFinishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((enterFinishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            enterFinishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback enterFinishCallbackValueTemp = enterFinishCallbackValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getRouterExtenderAccessor()->replace0(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&enterFinishCallbackValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(RouterExtender_replace0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_replace1(Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AsyncCallback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AsyncCallback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AsyncCallback_Void))))};
        }
        Opt_AsyncCallback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getRouterExtenderAccessor()->replace1(jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp), static_cast<Opt_AsyncCallback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RouterExtender_replace1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_back0(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_router_RouterOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = router_RouterOptions_serializer::read(thisDeserializer);
        }
        Opt_router_RouterOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getRouterExtenderAccessor()->back0(static_cast<Opt_router_RouterOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V2(RouterExtender_back0, KSerializerBuffer, int32_t)
void impl_RouterExtender_back1(Ark_Int32 index, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto paramsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Object paramsValueTempTmpBuf = {};
        paramsValueTempTmpBuf.tag = paramsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((paramsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            paramsValueTempTmpBuf.value = static_cast<Ark_Object>(thisDeserializer.readObject());
        }
        Opt_Object paramsValueTemp = paramsValueTempTmpBuf;;
        GetAccessors()->getRouterExtenderAccessor()->back1(index, static_cast<Opt_Object*>(&paramsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RouterExtender_back1, Ark_Int32, KSerializerBuffer, int32_t)
void impl_RouterExtender_runPage(Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        GetAccessors()->getRouterExtenderAccessor()->runPage(jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RouterExtender_runPage, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_clear() {
        GetAccessors()->getRouterExtenderAccessor()->clear();
}
KOALA_INTEROP_DIRECT_V0(RouterExtender_clear)
void impl_RouterExtender_showAlertBeforeBackPage(const KStringPtr& message) {
        GetAccessors()->getRouterExtenderAccessor()->showAlertBeforeBackPage((const Ark_String*) (&message));
}
KOALA_INTEROP_V1(RouterExtender_showAlertBeforeBackPage, KStringPtr)
void impl_RouterExtender_hideAlertBeforeBackPage() {
        GetAccessors()->getRouterExtenderAccessor()->hideAlertBeforeBackPage();
}
KOALA_INTEROP_DIRECT_V0(RouterExtender_hideAlertBeforeBackPage)
Ark_String impl_RouterExtender_getLength() {
        return GetAccessors()->getRouterExtenderAccessor()->getLength();
}
KOALA_INTEROP_0(RouterExtender_getLength, KStringPtr)
KInteropReturnBuffer impl_RouterExtender_getState() {
        const auto &retValue = GetAccessors()->getRouterExtenderAccessor()->getState();
        SerializerBase _retSerializer {};
        router_RouterState_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_0(RouterExtender_getState, KInteropReturnBuffer)
KInteropReturnBuffer impl_RouterExtender_getStateByIndex(Ark_Int32 index) {
        const auto &retValue = GetAccessors()->getRouterExtenderAccessor()->getStateByIndex(index);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            router_RouterState_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RouterExtender_getStateByIndex, KInteropReturnBuffer, Ark_Int32)
KInteropReturnBuffer impl_RouterExtender_getStateByUrl(const KStringPtr& url) {
        const auto &retValue = GetAccessors()->getRouterExtenderAccessor()->getStateByUrl((const Ark_String*) (&url));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_router_RouterState retValueTmpElement = retValue.array[retValueCounterI];
            router_RouterState_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(RouterExtender_getStateByUrl, KInteropReturnBuffer, KStringPtr)
void impl_RouterExtender_getParams() {
        GetAccessors()->getRouterExtenderAccessor()->getParams();
}
KOALA_INTEROP_V0(RouterExtender_getParams)
void impl_RouterExtender_pushNamedRoute0(KVMContext vmContext, Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getRouterExtenderAccessor()->pushNamedRoute0(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(RouterExtender_pushNamedRoute0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_pushNamedRoute1(Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AsyncCallback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AsyncCallback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AsyncCallback_Void))))};
        }
        Opt_AsyncCallback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getRouterExtenderAccessor()->pushNamedRoute1(jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp), static_cast<Opt_AsyncCallback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RouterExtender_pushNamedRoute1, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_replaceNamedRoute0(KVMContext vmContext, Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getRouterExtenderAccessor()->replaceNamedRoute0(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(RouterExtender_replaceNamedRoute0, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_RouterExtender_replaceNamedRoute1(Ark_NativePointer jsView, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_PageRouterOptions optionsValueTemp = PageRouterOptions_serializer::read(thisDeserializer);;
        const auto finishCallbackValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_RouterFinishCallback finishCallbackValueTempTmpBuf = {};
        finishCallbackValueTempTmpBuf.tag = finishCallbackValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((finishCallbackValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            finishCallbackValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_RouterFinishCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_NativePointer value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_RouterFinishCallback))))};
        }
        Opt_RouterFinishCallback finishCallbackValueTemp = finishCallbackValueTempTmpBuf;;
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_AsyncCallback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_AsyncCallback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_BusinessError err, const Opt_void data)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_AsyncCallback_Void))))};
        }
        Opt_AsyncCallback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getRouterExtenderAccessor()->replaceNamedRoute1(jsView, static_cast<Ark_PageRouterOptions*>(&optionsValueTemp), static_cast<Opt_RouterFinishCallback*>(&finishCallbackValueTemp), static_cast<Opt_AsyncCallback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(RouterExtender_replaceNamedRoute1, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ScaleSymbolEffect_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        const auto directionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectDirection directionValueTempTmpBuf = {};
        directionValueTempTmpBuf.tag = directionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((directionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            directionValueTempTmpBuf.value = static_cast<Ark_EffectDirection>(thisDeserializer.readInt32());
        }
        Opt_EffectDirection directionValueTemp = directionValueTempTmpBuf;;
        return GetAccessors()->getScaleSymbolEffectAccessor()->construct(static_cast<Opt_EffectScope*>(&scopeValueTemp), static_cast<Opt_EffectDirection*>(&directionValueTemp));
}
KOALA_INTEROP_DIRECT_2(ScaleSymbolEffect_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ScaleSymbolEffect_getFinalizer() {
        return GetAccessors()->getScaleSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ScaleSymbolEffect_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_ScaleSymbolEffect_getScope(Ark_NativePointer thisPtr) {
        Ark_ScaleSymbolEffect self = reinterpret_cast<Ark_ScaleSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getScaleSymbolEffectAccessor()->getScope(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectScope>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ScaleSymbolEffect_getScope, KInteropReturnBuffer, Ark_NativePointer)
void impl_ScaleSymbolEffect_setScope(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ScaleSymbolEffect self = reinterpret_cast<Ark_ScaleSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto scopeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectScope scopeValueTempTmpBuf = {};
        scopeValueTempTmpBuf.tag = scopeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((scopeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            scopeValueTempTmpBuf.value = static_cast<Ark_EffectScope>(thisDeserializer.readInt32());
        }
        Opt_EffectScope scopeValueTemp = scopeValueTempTmpBuf;;
        GetAccessors()->getScaleSymbolEffectAccessor()->setScope(self, static_cast<Opt_EffectScope*>(&scopeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScaleSymbolEffect_setScope, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_ScaleSymbolEffect_getDirection(Ark_NativePointer thisPtr) {
        Ark_ScaleSymbolEffect self = reinterpret_cast<Ark_ScaleSymbolEffect>(thisPtr);
        const auto &retValue = GetAccessors()->getScaleSymbolEffectAccessor()->getDirection(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_EffectDirection>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(ScaleSymbolEffect_getDirection, KInteropReturnBuffer, Ark_NativePointer)
void impl_ScaleSymbolEffect_setDirection(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ScaleSymbolEffect self = reinterpret_cast<Ark_ScaleSymbolEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto directionValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_EffectDirection directionValueTempTmpBuf = {};
        directionValueTempTmpBuf.tag = directionValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((directionValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            directionValueTempTmpBuf.value = static_cast<Ark_EffectDirection>(thisDeserializer.readInt32());
        }
        Opt_EffectDirection directionValueTemp = directionValueTempTmpBuf;;
        GetAccessors()->getScaleSymbolEffectAccessor()->setDirection(self, static_cast<Opt_EffectDirection*>(&directionValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScaleSymbolEffect_setDirection, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_ScreenCaptureHandler_construct() {
        return GetAccessors()->getScreenCaptureHandlerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ScreenCaptureHandler_construct, Ark_NativePointer)
Ark_NativePointer impl_ScreenCaptureHandler_getFinalizer() {
        return GetAccessors()->getScreenCaptureHandlerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ScreenCaptureHandler_getFinalizer, Ark_NativePointer)
Ark_String impl_ScreenCaptureHandler_getOrigin(Ark_NativePointer thisPtr) {
        Ark_ScreenCaptureHandler self = reinterpret_cast<Ark_ScreenCaptureHandler>(thisPtr);
        return GetAccessors()->getScreenCaptureHandlerAccessor()->getOrigin(self);
}
KOALA_INTEROP_1(ScreenCaptureHandler_getOrigin, KStringPtr, Ark_NativePointer)
void impl_ScreenCaptureHandler_grant(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_ScreenCaptureHandler self = reinterpret_cast<Ark_ScreenCaptureHandler>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ScreenCaptureConfig configValueTemp = ScreenCaptureConfig_serializer::read(thisDeserializer);;
        GetAccessors()->getScreenCaptureHandlerAccessor()->grant(self, static_cast<Ark_ScreenCaptureConfig*>(&configValueTemp));
}
KOALA_INTEROP_DIRECT_V3(ScreenCaptureHandler_grant, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_ScreenCaptureHandler_deny(Ark_NativePointer thisPtr) {
        Ark_ScreenCaptureHandler self = reinterpret_cast<Ark_ScreenCaptureHandler>(thisPtr);
        GetAccessors()->getScreenCaptureHandlerAccessor()->deny(self);
}
KOALA_INTEROP_DIRECT_V1(ScreenCaptureHandler_deny, Ark_NativePointer)
Ark_Boolean impl_ScreenshotService_requestScreenshot(const KStringPtr& target, const KStringPtr& name) {
        return GetAccessors()->getScreenshotServiceAccessor()->requestScreenshot((const Ark_String*) (&target), (const Ark_String*) (&name));
}
KOALA_INTEROP_2(ScreenshotService_requestScreenshot, Ark_Boolean, KStringPtr, KStringPtr)
Ark_NativePointer impl_ScrollableTargetInfo_construct() {
        return GetAccessors()->getScrollableTargetInfoAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ScrollableTargetInfo_construct, Ark_NativePointer)
Ark_NativePointer impl_ScrollableTargetInfo_getFinalizer() {
        return GetAccessors()->getScrollableTargetInfoAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ScrollableTargetInfo_getFinalizer, Ark_NativePointer)
Ark_Boolean impl_ScrollableTargetInfo_isBegin(Ark_NativePointer thisPtr) {
        Ark_ScrollableTargetInfo self = reinterpret_cast<Ark_ScrollableTargetInfo>(thisPtr);
        return GetAccessors()->getScrollableTargetInfoAccessor()->isBegin(self);
}
KOALA_INTEROP_DIRECT_1(ScrollableTargetInfo_isBegin, Ark_Boolean, Ark_NativePointer)
Ark_Boolean impl_ScrollableTargetInfo_isEnd(Ark_NativePointer thisPtr) {
        Ark_ScrollableTargetInfo self = reinterpret_cast<Ark_ScrollableTargetInfo>(thisPtr);
        return GetAccessors()->getScrollableTargetInfoAccessor()->isEnd(self);
}
KOALA_INTEROP_DIRECT_1(ScrollableTargetInfo_isEnd, Ark_Boolean, Ark_NativePointer)
Ark_NativePointer impl_Scroller_construct() {
        return GetAccessors()->getScrollerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(Scroller_construct, Ark_NativePointer)
Ark_NativePointer impl_Scroller_getFinalizer() {
        return GetAccessors()->getScrollerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(Scroller_getFinalizer, Ark_NativePointer)
void impl_Scroller_scrollTo(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ScrollOptions optionsValueTemp = ScrollOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getScrollerAccessor()->scrollTo(self, static_cast<Ark_ScrollOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Scroller_scrollTo, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_Scroller_scrollEdge(Ark_NativePointer thisPtr, Ark_Int32 value, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollEdgeOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ScrollEdgeOptions_serializer::read(thisDeserializer);
        }
        Opt_ScrollEdgeOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getScrollerAccessor()->scrollEdge(self, static_cast<Ark_Edge>(value), static_cast<Opt_ScrollEdgeOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V4(Scroller_scrollEdge, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
void impl_Scroller_fling(Ark_NativePointer thisPtr, KDouble velocity) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        GetAccessors()->getScrollerAccessor()->fling(self, velocity);
}
KOALA_INTEROP_V2(Scroller_fling, Ark_NativePointer, KDouble)
void impl_Scroller_scrollPage(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ScrollPageOptions valueValueTemp = ScrollPageOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getScrollerAccessor()->scrollPage(self, static_cast<Ark_ScrollPageOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Scroller_scrollPage, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_Scroller_currentOffset(Ark_NativePointer thisPtr) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        const auto &retValue = GetAccessors()->getScrollerAccessor()->currentOffset(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            OffsetResult_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(Scroller_currentOffset, KInteropReturnBuffer, Ark_NativePointer)
void impl_Scroller_scrollToIndex(Ark_NativePointer thisPtr, Ark_Int32 value, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto smoothValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Boolean smoothValueTempTmpBuf = {};
        smoothValueTempTmpBuf.tag = smoothValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((smoothValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            smoothValueTempTmpBuf.value = thisDeserializer.readBoolean();
        }
        Opt_Boolean smoothValueTemp = smoothValueTempTmpBuf;;
        const auto alignValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollAlign alignValueTempTmpBuf = {};
        alignValueTempTmpBuf.tag = alignValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((alignValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            alignValueTempTmpBuf.value = static_cast<Ark_ScrollAlign>(thisDeserializer.readInt32());
        }
        Opt_ScrollAlign alignValueTemp = alignValueTempTmpBuf;;
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ScrollToIndexOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = ScrollToIndexOptions_serializer::read(thisDeserializer);
        }
        Opt_ScrollToIndexOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getScrollerAccessor()->scrollToIndex(self, value, static_cast<Opt_Boolean*>(&smoothValueTemp), static_cast<Opt_ScrollAlign*>(&alignValueTemp), static_cast<Opt_ScrollToIndexOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V4(Scroller_scrollToIndex, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
void impl_Scroller_scrollBy(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 dxValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Length dxValueTempTmpBuf = {};
        dxValueTempTmpBuf.selector = dxValueTempTmpBufUnionSelector;
        if (dxValueTempTmpBufUnionSelector == 0) {
            dxValueTempTmpBuf.selector = 0;
            dxValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (dxValueTempTmpBufUnionSelector == 1) {
            dxValueTempTmpBuf.selector = 1;
            dxValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dxValueTempTmpBufUnionSelector == 2) {
            dxValueTempTmpBuf.selector = 2;
            dxValueTempTmpBuf.value2 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for dxValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Length dxValueTemp = static_cast<Ark_Length>(dxValueTempTmpBuf);;
        const Ark_Int8 dyValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Length dyValueTempTmpBuf = {};
        dyValueTempTmpBuf.selector = dyValueTempTmpBufUnionSelector;
        if (dyValueTempTmpBufUnionSelector == 0) {
            dyValueTempTmpBuf.selector = 0;
            dyValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (dyValueTempTmpBufUnionSelector == 1) {
            dyValueTempTmpBuf.selector = 1;
            dyValueTempTmpBuf.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
        } else if (dyValueTempTmpBufUnionSelector == 2) {
            dyValueTempTmpBuf.selector = 2;
            dyValueTempTmpBuf.value2 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for dyValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Length dyValueTemp = static_cast<Ark_Length>(dyValueTempTmpBuf);;
        GetAccessors()->getScrollerAccessor()->scrollBy(self, static_cast<Ark_Length*>(&dxValueTemp), static_cast<Ark_Length*>(&dyValueTemp));
}
KOALA_INTEROP_DIRECT_V3(Scroller_scrollBy, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Boolean impl_Scroller_isAtEnd(Ark_NativePointer thisPtr) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        return GetAccessors()->getScrollerAccessor()->isAtEnd(self);
}
KOALA_INTEROP_DIRECT_1(Scroller_isAtEnd, Ark_Boolean, Ark_NativePointer)
KInteropReturnBuffer impl_Scroller_getItemRect(Ark_NativePointer thisPtr, Ark_Int32 index) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        const auto &retValue = GetAccessors()->getScrollerAccessor()->getItemRect(self, index);
        SerializerBase _retSerializer {};
        RectResult_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(Scroller_getItemRect, KInteropReturnBuffer, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_Scroller_getItemIndex(Ark_NativePointer thisPtr, KDouble x, KDouble y) {
        Ark_Scroller self = reinterpret_cast<Ark_Scroller>(thisPtr);
        return GetAccessors()->getScrollerAccessor()->getItemIndex(self, x, y);
}
KOALA_INTEROP_3(Scroller_getItemIndex, Ark_Int32, Ark_NativePointer, KDouble, KDouble)
Ark_NativePointer impl_ScrollMotion_construct(KInteropNumber position, KInteropNumber velocity, KInteropNumber min, KInteropNumber max, Ark_NativePointer prop) {
        return GetAccessors()->getScrollMotionAccessor()->construct((const Ark_Number*) (&position), (const Ark_Number*) (&velocity), (const Ark_Number*) (&min), (const Ark_Number*) (&max), static_cast<Ark_SpringProp>(prop));
}
KOALA_INTEROP_DIRECT_5(ScrollMotion_construct, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, KInteropNumber, Ark_NativePointer)
Ark_NativePointer impl_ScrollMotion_getFinalizer() {
        return GetAccessors()->getScrollMotionAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ScrollMotion_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_ScrollResult_construct() {
        return GetAccessors()->getScrollResultAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(ScrollResult_construct, Ark_NativePointer)
Ark_NativePointer impl_ScrollResult_getFinalizer() {
        return GetAccessors()->getScrollResultAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(ScrollResult_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_ScrollResult_getOffsetRemain(Ark_NativePointer thisPtr) {
        Ark_ScrollResult self = reinterpret_cast<Ark_ScrollResult>(thisPtr);
        return GetAccessors()->getScrollResultAccessor()->getOffsetRemain(self);
}
KOALA_INTEROP_1(ScrollResult_getOffsetRemain, Ark_Int32, Ark_NativePointer)
void impl_ScrollResult_setOffsetRemain(Ark_NativePointer thisPtr, KDouble offsetRemain) {
        Ark_ScrollResult self = reinterpret_cast<Ark_ScrollResult>(thisPtr);
        GetAccessors()->getScrollResultAccessor()->setOffsetRemain(self, offsetRemain);
}
KOALA_INTEROP_V2(ScrollResult_setOffsetRemain, Ark_NativePointer, KDouble)
Ark_NativePointer impl_SearchController_construct() {
        return GetAccessors()->getSearchControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SearchController_construct, Ark_NativePointer)
Ark_NativePointer impl_SearchController_getFinalizer() {
        return GetAccessors()->getSearchControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SearchController_getFinalizer, Ark_NativePointer)
void impl_SearchController_caretPosition(Ark_NativePointer thisPtr, Ark_Int32 value) {
        Ark_SearchController self = reinterpret_cast<Ark_SearchController>(thisPtr);
        GetAccessors()->getSearchControllerAccessor()->caretPosition(self, value);
}
KOALA_INTEROP_DIRECT_V2(SearchController_caretPosition, Ark_NativePointer, Ark_Int32)
void impl_SearchController_stopEditing(Ark_NativePointer thisPtr) {
        Ark_SearchController self = reinterpret_cast<Ark_SearchController>(thisPtr);
        GetAccessors()->getSearchControllerAccessor()->stopEditing(self);
}
KOALA_INTEROP_DIRECT_V1(SearchController_stopEditing, Ark_NativePointer)
void impl_SearchController_setTextSelection(Ark_NativePointer thisPtr, Ark_Int32 selectionStart, Ark_Int32 selectionEnd, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_SearchController self = reinterpret_cast<Ark_SearchController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionOptions_serializer::read(thisDeserializer);
        }
        Opt_SelectionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getSearchControllerAccessor()->setTextSelection(self, selectionStart, selectionEnd, static_cast<Opt_SelectionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V5(SearchController_setTextSelection, Ark_NativePointer, Ark_Int32, Ark_Int32, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SearchOps_registerSearchValueCallback(Ark_NativePointer node, const KStringPtr& value, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        SearchValueCallback callbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_SearchValueCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_SearchValueCallback))))};;
        return GetAccessors()->getSearchOpsAccessor()->registerSearchValueCallback(node, (const Ark_String*) (&value), static_cast<SearchValueCallback*>(&callbackValueTemp));
}
KOALA_INTEROP_4(SearchOps_registerSearchValueCallback, Ark_NativePointer, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SpringMotion_construct(KInteropNumber start, KInteropNumber end, KInteropNumber velocity, Ark_NativePointer prop) {
        return GetAccessors()->getSpringMotionAccessor()->construct((const Ark_Number*) (&start), (const Ark_Number*) (&end), (const Ark_Number*) (&velocity), static_cast<Ark_SpringProp>(prop));
}
KOALA_INTEROP_DIRECT_4(SpringMotion_construct, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber, Ark_NativePointer)
Ark_NativePointer impl_SpringMotion_getFinalizer() {
        return GetAccessors()->getSpringMotionAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SpringMotion_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_SpringProp_construct(KInteropNumber mass, KInteropNumber stiffness, KInteropNumber damping) {
        return GetAccessors()->getSpringPropAccessor()->construct((const Ark_Number*) (&mass), (const Ark_Number*) (&stiffness), (const Ark_Number*) (&damping));
}
KOALA_INTEROP_DIRECT_3(SpringProp_construct, Ark_NativePointer, KInteropNumber, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_SpringProp_getFinalizer() {
        return GetAccessors()->getSpringPropAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SpringProp_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_SslErrorHandler_construct() {
        return GetAccessors()->getSslErrorHandlerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SslErrorHandler_construct, Ark_NativePointer)
Ark_NativePointer impl_SslErrorHandler_getFinalizer() {
        return GetAccessors()->getSslErrorHandlerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SslErrorHandler_getFinalizer, Ark_NativePointer)
void impl_SslErrorHandler_handleConfirm(Ark_NativePointer thisPtr) {
        Ark_SslErrorHandler self = reinterpret_cast<Ark_SslErrorHandler>(thisPtr);
        GetAccessors()->getSslErrorHandlerAccessor()->handleConfirm(self);
}
KOALA_INTEROP_DIRECT_V1(SslErrorHandler_handleConfirm, Ark_NativePointer)
void impl_SslErrorHandler_handleCancel0(Ark_NativePointer thisPtr) {
        Ark_SslErrorHandler self = reinterpret_cast<Ark_SslErrorHandler>(thisPtr);
        GetAccessors()->getSslErrorHandlerAccessor()->handleCancel0(self);
}
KOALA_INTEROP_DIRECT_V1(SslErrorHandler_handleCancel0, Ark_NativePointer)
void impl_SslErrorHandler_handleCancel1(Ark_NativePointer thisPtr, Ark_Boolean abortLoading) {
        Ark_SslErrorHandler self = reinterpret_cast<Ark_SslErrorHandler>(thisPtr);
        GetAccessors()->getSslErrorHandlerAccessor()->handleCancel1(self, abortLoading);
}
KOALA_INTEROP_DIRECT_V2(SslErrorHandler_handleCancel1, Ark_NativePointer, Ark_Boolean)
void impl_StateStylesOps_onStateStyleChange(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_StateStylesChange stateStyleChangeValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Int32 currentState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_StateStylesChange)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Int32 currentState)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_StateStylesChange))))};;
        GetAccessors()->getStateStylesOpsAccessor()->onStateStyleChange(node, static_cast<Callback_StateStylesChange*>(&stateStyleChangeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(StateStylesOps_onStateStyleChange, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_StyledString_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_ImageAttachment_CustomSpan valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = static_cast<Ark_ImageAttachment>(ImageAttachment_serializer::read(thisDeserializer));
        } else if (valueValueTempTmpBufUnionSelector == 2) {
            valueValueTempTmpBuf.selector = 2;
            valueValueTempTmpBuf.value2 = static_cast<Ark_CustomSpan>(CustomSpan_serializer::read(thisDeserializer));
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_ImageAttachment_CustomSpan valueValueTemp = static_cast<Ark_Union_String_ImageAttachment_CustomSpan>(valueValueTempTmpBuf);;
        const auto stylesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_StyleOptions stylesValueTempTmpBuf = {};
        stylesValueTempTmpBuf.tag = stylesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((stylesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 stylesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_StyleOptions stylesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(stylesValueTempTmpBuf_)>::type,
        std::decay<decltype(*stylesValueTempTmpBuf_.array)>::type>(&stylesValueTempTmpBuf_, stylesValueTempTmpBuf_Length);
            for (int stylesValueTempTmpBuf_BufCounterI = 0; stylesValueTempTmpBuf_BufCounterI < stylesValueTempTmpBuf_Length; stylesValueTempTmpBuf_BufCounterI++) {
                stylesValueTempTmpBuf_.array[stylesValueTempTmpBuf_BufCounterI] = StyleOptions_serializer::read(thisDeserializer);
            }
            stylesValueTempTmpBuf.value = stylesValueTempTmpBuf_;
        }
        Opt_Array_StyleOptions stylesValueTemp = stylesValueTempTmpBuf;;
        return GetAccessors()->getStyledStringAccessor()->construct(static_cast<Ark_Union_String_ImageAttachment_CustomSpan*>(&valueValueTemp), static_cast<Opt_Array_StyleOptions*>(&stylesValueTemp));
}
KOALA_INTEROP_DIRECT_2(StyledString_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_StyledString_getFinalizer() {
        return GetAccessors()->getStyledStringAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(StyledString_getFinalizer, Ark_NativePointer)
Ark_String impl_StyledString_getString(Ark_NativePointer thisPtr) {
        Ark_StyledString self = reinterpret_cast<Ark_StyledString>(thisPtr);
        return GetAccessors()->getStyledStringAccessor()->getString(self);
}
KOALA_INTEROP_1(StyledString_getString, KStringPtr, Ark_NativePointer)
KInteropReturnBuffer impl_StyledString_getStyles(Ark_NativePointer thisPtr, Ark_Int32 start, Ark_Int32 length, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_StyledString self = reinterpret_cast<Ark_StyledString>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto styledKeyValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_StyledStringKey styledKeyValueTempTmpBuf = {};
        styledKeyValueTempTmpBuf.tag = styledKeyValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((styledKeyValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            styledKeyValueTempTmpBuf.value = static_cast<Ark_StyledStringKey>(thisDeserializer.readInt32());
        }
        Opt_StyledStringKey styledKeyValueTemp = styledKeyValueTempTmpBuf;;
        const auto &retValue = GetAccessors()->getStyledStringAccessor()->getStyles(self, start, length, static_cast<Opt_StyledStringKey*>(&styledKeyValueTemp));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_SpanStyle retValueTmpElement = retValue.array[retValueCounterI];
            SpanStyle_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_5(StyledString_getStyles, KInteropReturnBuffer, Ark_NativePointer, Ark_Int32, Ark_Int32, KSerializerBuffer, int32_t)
Ark_Boolean impl_StyledString_equals(Ark_NativePointer thisPtr, Ark_NativePointer other) {
        Ark_StyledString self = reinterpret_cast<Ark_StyledString>(thisPtr);
        return GetAccessors()->getStyledStringAccessor()->equals(self, static_cast<Ark_StyledString>(other));
}
KOALA_INTEROP_DIRECT_2(StyledString_equals, Ark_Boolean, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_StyledString_subStyledString(Ark_NativePointer thisPtr, Ark_Int32 start, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_StyledString self = reinterpret_cast<Ark_StyledString>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto lengthValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 lengthValueTempTmpBuf = {};
        lengthValueTempTmpBuf.tag = lengthValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((lengthValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            lengthValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 lengthValueTemp = lengthValueTempTmpBuf;;
        return GetAccessors()->getStyledStringAccessor()->subStyledString(self, start, static_cast<Opt_Int32*>(&lengthValueTemp));
}
KOALA_INTEROP_DIRECT_4(StyledString_subStyledString, Ark_NativePointer, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
void impl_StyledString_fromHtml(KVMContext vmContext, const KStringPtr& html, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Opt_StyledString_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_StyledString value, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_StyledString_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_StyledString value, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_StyledString_Opt_Array_String_Void))))};;
        GetAccessors()->getStyledStringAccessor()->fromHtml(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), (const Ark_String*) (&html), static_cast<Callback_Opt_StyledString_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(StyledString_fromHtml, KStringPtr, KSerializerBuffer, int32_t)
Ark_String impl_StyledString_toHtml(Ark_NativePointer styledString) {
        return GetAccessors()->getStyledStringAccessor()->toHtml(static_cast<Ark_StyledString>(styledString));
}
KOALA_INTEROP_1(StyledString_toHtml, KStringPtr, Ark_NativePointer)
KInteropReturnBuffer impl_StyledString_marshalling0(Ark_NativePointer styledString, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        StyledStringMarshallCallback callback_ValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_UserDataSpan marshallableVal, const Callback_Buffer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_StyledStringMarshallCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_UserDataSpan marshallableVal, const Callback_Buffer_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_StyledStringMarshallCallback))))};;
        const auto &retValue = GetAccessors()->getStyledStringAccessor()->marshalling0(static_cast<Ark_StyledString>(styledString), static_cast<StyledStringMarshallCallback*>(&callback_ValueTemp));
        SerializerBase _retSerializer {};
        _retSerializer.writeBuffer(retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(StyledString_marshalling0, KInteropReturnBuffer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_StyledString_unmarshalling0(KVMContext vmContext, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Buffer bufferValueTemp = static_cast<Ark_Buffer>(thisDeserializer.readBuffer());;
        StyledStringUnmarshallCallback callback_ValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Buffer buf, const Callback_StyledStringMarshallingValue_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_StyledStringUnmarshallCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Buffer buf, const Callback_StyledStringMarshallingValue_Void continuation)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_StyledStringUnmarshallCallback))))};;
        Callback_Opt_StyledString_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_StyledString value, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_StyledString_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_StyledString value, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_StyledString_Opt_Array_String_Void))))};;
        GetAccessors()->getStyledStringAccessor()->unmarshalling0(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), static_cast<Ark_Buffer*>(&bufferValueTemp), static_cast<StyledStringUnmarshallCallback*>(&callback_ValueTemp), static_cast<Callback_Opt_StyledString_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V2(StyledString_unmarshalling0, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_StyledString_marshalling1(Ark_NativePointer styledString) {
        const auto &retValue = GetAccessors()->getStyledStringAccessor()->marshalling1(static_cast<Ark_StyledString>(styledString));
        SerializerBase _retSerializer {};
        _retSerializer.writeBuffer(retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(StyledString_marshalling1, KInteropReturnBuffer, Ark_NativePointer)
void impl_StyledString_unmarshalling1(KVMContext vmContext, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Buffer bufferValueTemp = static_cast<Ark_Buffer>(thisDeserializer.readBuffer());;
        Callback_Opt_StyledString_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_StyledString value, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_StyledString_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_StyledString value, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_StyledString_Opt_Array_String_Void))))};;
        GetAccessors()->getStyledStringAccessor()->unmarshalling1(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), static_cast<Ark_Buffer*>(&bufferValueTemp), static_cast<Callback_Opt_StyledString_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V2(StyledString_unmarshalling1, KSerializerBuffer, int32_t)
Ark_Int32 impl_StyledString_getLength(Ark_NativePointer thisPtr) {
        Ark_StyledString self = reinterpret_cast<Ark_StyledString>(thisPtr);
        return GetAccessors()->getStyledStringAccessor()->getLength(self);
}
KOALA_INTEROP_DIRECT_1(StyledString_getLength, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_StyledStringController_construct() {
        return GetAccessors()->getStyledStringControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(StyledStringController_construct, Ark_NativePointer)
Ark_NativePointer impl_StyledStringController_getFinalizer() {
        return GetAccessors()->getStyledStringControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(StyledStringController_getFinalizer, Ark_NativePointer)
void impl_StyledStringController_setStyledString(Ark_NativePointer thisPtr, Ark_NativePointer styledString) {
        Ark_StyledStringController self = reinterpret_cast<Ark_StyledStringController>(thisPtr);
        GetAccessors()->getStyledStringControllerAccessor()->setStyledString(self, static_cast<Ark_StyledString>(styledString));
}
KOALA_INTEROP_DIRECT_V2(StyledStringController_setStyledString, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_StyledStringController_getStyledString(Ark_NativePointer thisPtr) {
        Ark_StyledStringController self = reinterpret_cast<Ark_StyledStringController>(thisPtr);
        return GetAccessors()->getStyledStringControllerAccessor()->getStyledString(self);
}
KOALA_INTEROP_DIRECT_1(StyledStringController_getStyledString, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_SubmitEvent_construct() {
        return GetAccessors()->getSubmitEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SubmitEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_SubmitEvent_getFinalizer() {
        return GetAccessors()->getSubmitEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SubmitEvent_getFinalizer, Ark_NativePointer)
void impl_SubmitEvent_keepEditableState(Ark_NativePointer thisPtr) {
        Ark_SubmitEvent self = reinterpret_cast<Ark_SubmitEvent>(thisPtr);
        GetAccessors()->getSubmitEventAccessor()->keepEditableState(self);
}
KOALA_INTEROP_DIRECT_V1(SubmitEvent_keepEditableState, Ark_NativePointer)
Ark_String impl_SubmitEvent_getText(Ark_NativePointer thisPtr) {
        Ark_SubmitEvent self = reinterpret_cast<Ark_SubmitEvent>(thisPtr);
        return GetAccessors()->getSubmitEventAccessor()->getText(self);
}
KOALA_INTEROP_1(SubmitEvent_getText, KStringPtr, Ark_NativePointer)
void impl_SubmitEvent_setText(Ark_NativePointer thisPtr, const KStringPtr& text) {
        Ark_SubmitEvent self = reinterpret_cast<Ark_SubmitEvent>(thisPtr);
        GetAccessors()->getSubmitEventAccessor()->setText(self, (const Ark_String*) (&text));
}
KOALA_INTEROP_V2(SubmitEvent_setText, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_SwipeGestureEvent_construct() {
        return GetAccessors()->getSwipeGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SwipeGestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_SwipeGestureEvent_getFinalizer() {
        return GetAccessors()->getSwipeGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SwipeGestureEvent_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_SwipeGestureEvent_getAngle(Ark_NativePointer thisPtr) {
        Ark_SwipeGestureEvent self = reinterpret_cast<Ark_SwipeGestureEvent>(thisPtr);
        return GetAccessors()->getSwipeGestureEventAccessor()->getAngle(self);
}
KOALA_INTEROP_DIRECT_1(SwipeGestureEvent_getAngle, Ark_Int32, Ark_NativePointer)
void impl_SwipeGestureEvent_setAngle(Ark_NativePointer thisPtr, KDouble angle) {
        Ark_SwipeGestureEvent self = reinterpret_cast<Ark_SwipeGestureEvent>(thisPtr);
        GetAccessors()->getSwipeGestureEventAccessor()->setAngle(self, angle);
}
KOALA_INTEROP_DIRECT_V2(SwipeGestureEvent_setAngle, Ark_NativePointer, KDouble)
Ark_Int32 impl_SwipeGestureEvent_getSpeed(Ark_NativePointer thisPtr) {
        Ark_SwipeGestureEvent self = reinterpret_cast<Ark_SwipeGestureEvent>(thisPtr);
        return GetAccessors()->getSwipeGestureEventAccessor()->getSpeed(self);
}
KOALA_INTEROP_DIRECT_1(SwipeGestureEvent_getSpeed, Ark_Int32, Ark_NativePointer)
void impl_SwipeGestureEvent_setSpeed(Ark_NativePointer thisPtr, KDouble speed) {
        Ark_SwipeGestureEvent self = reinterpret_cast<Ark_SwipeGestureEvent>(thisPtr);
        GetAccessors()->getSwipeGestureEventAccessor()->setSpeed(self, speed);
}
KOALA_INTEROP_DIRECT_V2(SwipeGestureEvent_setSpeed, Ark_NativePointer, KDouble)
Ark_NativePointer impl_SwiperContentTransitionProxy_construct() {
        return GetAccessors()->getSwiperContentTransitionProxyAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SwiperContentTransitionProxy_construct, Ark_NativePointer)
Ark_NativePointer impl_SwiperContentTransitionProxy_getFinalizer() {
        return GetAccessors()->getSwiperContentTransitionProxyAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SwiperContentTransitionProxy_getFinalizer, Ark_NativePointer)
void impl_SwiperContentTransitionProxy_finishTransition(Ark_NativePointer thisPtr) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        GetAccessors()->getSwiperContentTransitionProxyAccessor()->finishTransition(self);
}
KOALA_INTEROP_DIRECT_V1(SwiperContentTransitionProxy_finishTransition, Ark_NativePointer)
Ark_Int32 impl_SwiperContentTransitionProxy_getSelectedIndex(Ark_NativePointer thisPtr) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        return GetAccessors()->getSwiperContentTransitionProxyAccessor()->getSelectedIndex(self);
}
KOALA_INTEROP_DIRECT_1(SwiperContentTransitionProxy_getSelectedIndex, Ark_Int32, Ark_NativePointer)
void impl_SwiperContentTransitionProxy_setSelectedIndex(Ark_NativePointer thisPtr, Ark_Int32 selectedIndex) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        GetAccessors()->getSwiperContentTransitionProxyAccessor()->setSelectedIndex(self, selectedIndex);
}
KOALA_INTEROP_DIRECT_V2(SwiperContentTransitionProxy_setSelectedIndex, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_SwiperContentTransitionProxy_getIndex(Ark_NativePointer thisPtr) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        return GetAccessors()->getSwiperContentTransitionProxyAccessor()->getIndex(self);
}
KOALA_INTEROP_DIRECT_1(SwiperContentTransitionProxy_getIndex, Ark_Int32, Ark_NativePointer)
void impl_SwiperContentTransitionProxy_setIndex(Ark_NativePointer thisPtr, Ark_Int32 index) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        GetAccessors()->getSwiperContentTransitionProxyAccessor()->setIndex(self, index);
}
KOALA_INTEROP_DIRECT_V2(SwiperContentTransitionProxy_setIndex, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_SwiperContentTransitionProxy_getPosition(Ark_NativePointer thisPtr) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        return GetAccessors()->getSwiperContentTransitionProxyAccessor()->getPosition(self);
}
KOALA_INTEROP_1(SwiperContentTransitionProxy_getPosition, Ark_Int32, Ark_NativePointer)
void impl_SwiperContentTransitionProxy_setPosition(Ark_NativePointer thisPtr, KDouble position) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        GetAccessors()->getSwiperContentTransitionProxyAccessor()->setPosition(self, position);
}
KOALA_INTEROP_V2(SwiperContentTransitionProxy_setPosition, Ark_NativePointer, KDouble)
Ark_Int32 impl_SwiperContentTransitionProxy_getMainAxisLength(Ark_NativePointer thisPtr) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        return GetAccessors()->getSwiperContentTransitionProxyAccessor()->getMainAxisLength(self);
}
KOALA_INTEROP_1(SwiperContentTransitionProxy_getMainAxisLength, Ark_Int32, Ark_NativePointer)
void impl_SwiperContentTransitionProxy_setMainAxisLength(Ark_NativePointer thisPtr, KDouble mainAxisLength) {
        Ark_SwiperContentTransitionProxy self = reinterpret_cast<Ark_SwiperContentTransitionProxy>(thisPtr);
        GetAccessors()->getSwiperContentTransitionProxyAccessor()->setMainAxisLength(self, mainAxisLength);
}
KOALA_INTEROP_V2(SwiperContentTransitionProxy_setMainAxisLength, Ark_NativePointer, KDouble)
Ark_NativePointer impl_SwiperController_construct() {
        return GetAccessors()->getSwiperControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SwiperController_construct, Ark_NativePointer)
Ark_NativePointer impl_SwiperController_getFinalizer() {
        return GetAccessors()->getSwiperControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SwiperController_getFinalizer, Ark_NativePointer)
void impl_SwiperController_showNext(Ark_NativePointer thisPtr) {
        Ark_SwiperController self = reinterpret_cast<Ark_SwiperController>(thisPtr);
        GetAccessors()->getSwiperControllerAccessor()->showNext(self);
}
KOALA_INTEROP_DIRECT_V1(SwiperController_showNext, Ark_NativePointer)
void impl_SwiperController_showPrevious(Ark_NativePointer thisPtr) {
        Ark_SwiperController self = reinterpret_cast<Ark_SwiperController>(thisPtr);
        GetAccessors()->getSwiperControllerAccessor()->showPrevious(self);
}
KOALA_INTEROP_DIRECT_V1(SwiperController_showPrevious, Ark_NativePointer)
void impl_SwiperController_changeIndex(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_SwiperController self = reinterpret_cast<Ark_SwiperController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto indexValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 indexValueTempTmpBuf = {};
        indexValueTempTmpBuf.tag = indexValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((indexValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            indexValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 indexValueTemp = indexValueTempTmpBuf;;
        const auto animationModeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_SwiperAnimationMode_Boolean animationModeValueTempTmpBuf = {};
        animationModeValueTempTmpBuf.tag = animationModeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((animationModeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 animationModeValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_SwiperAnimationMode_Boolean animationModeValueTempTmpBuf_ = {};
            animationModeValueTempTmpBuf_.selector = animationModeValueTempTmpBuf_UnionSelector;
            if (animationModeValueTempTmpBuf_UnionSelector == 0) {
                animationModeValueTempTmpBuf_.selector = 0;
                animationModeValueTempTmpBuf_.value0 = static_cast<Ark_SwiperAnimationMode>(thisDeserializer.readInt32());
            } else if (animationModeValueTempTmpBuf_UnionSelector == 1) {
                animationModeValueTempTmpBuf_.selector = 1;
                animationModeValueTempTmpBuf_.value1 = thisDeserializer.readBoolean();
            } else {
                INTEROP_FATAL("One of the branches for animationModeValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            animationModeValueTempTmpBuf.value = static_cast<Ark_Union_SwiperAnimationMode_Boolean>(animationModeValueTempTmpBuf_);
        }
        Opt_Union_SwiperAnimationMode_Boolean animationModeValueTemp = animationModeValueTempTmpBuf;;
        GetAccessors()->getSwiperControllerAccessor()->changeIndex(self, static_cast<Opt_Int32*>(&indexValueTemp), static_cast<Opt_Union_SwiperAnimationMode_Boolean*>(&animationModeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperController_changeIndex, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperController_finishAnimation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_SwiperController self = reinterpret_cast<Ark_SwiperController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VoidCallback callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VoidCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VoidCallback))))};
        }
        Opt_VoidCallback callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getSwiperControllerAccessor()->finishAnimation(self, static_cast<Opt_VoidCallback*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(SwiperController_finishAnimation, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_SwiperController_preloadItems(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_SwiperController self = reinterpret_cast<Ark_SwiperController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto indicesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Int32 indicesValueTempTmpBuf = {};
        indicesValueTempTmpBuf.tag = indicesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((indicesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 indicesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Int32 indicesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(indicesValueTempTmpBuf_)>::type,
        std::decay<decltype(*indicesValueTempTmpBuf_.array)>::type>(&indicesValueTempTmpBuf_, indicesValueTempTmpBuf_Length);
            for (int indicesValueTempTmpBuf_BufCounterI = 0; indicesValueTempTmpBuf_BufCounterI < indicesValueTempTmpBuf_Length; indicesValueTempTmpBuf_BufCounterI++) {
                indicesValueTempTmpBuf_.array[indicesValueTempTmpBuf_BufCounterI] = thisDeserializer.readInt32();
            }
            indicesValueTempTmpBuf.value = indicesValueTempTmpBuf_;
        }
        Opt_Array_Int32 indicesValueTemp = indicesValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getSwiperControllerAccessor()->preloadItems(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, static_cast<Opt_Array_Int32*>(&indicesValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(SwiperController_preloadItems, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_SwipeRecognizer_construct() {
        return GetAccessors()->getSwipeRecognizerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SwipeRecognizer_construct, Ark_NativePointer)
Ark_NativePointer impl_SwipeRecognizer_getFinalizer() {
        return GetAccessors()->getSwipeRecognizerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SwipeRecognizer_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_SwipeRecognizer_getVelocityThreshold(Ark_NativePointer thisPtr) {
        Ark_SwipeRecognizer self = reinterpret_cast<Ark_SwipeRecognizer>(thisPtr);
        return GetAccessors()->getSwipeRecognizerAccessor()->getVelocityThreshold(self);
}
KOALA_INTEROP_DIRECT_1(SwipeRecognizer_getVelocityThreshold, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_SwipeRecognizer_getDirection(Ark_NativePointer thisPtr) {
        Ark_SwipeRecognizer self = reinterpret_cast<Ark_SwipeRecognizer>(thisPtr);
        return GetAccessors()->getSwipeRecognizerAccessor()->getDirection(self);
}
KOALA_INTEROP_DIRECT_1(SwipeRecognizer_getDirection, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_SymbolEffect_construct() {
        return GetAccessors()->getSymbolEffectAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(SymbolEffect_construct, Ark_NativePointer)
Ark_NativePointer impl_SymbolEffect_getFinalizer() {
        return GetAccessors()->getSymbolEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(SymbolEffect_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_SystemOps_StartFrame() {
        return GetAccessors()->getSystemOpsAccessor()->StartFrame();
}
KOALA_INTEROP_DIRECT_0(SystemOps_StartFrame, Ark_NativePointer)
void impl_SystemOps_EndFrame(Ark_NativePointer root) {
        GetAccessors()->getSystemOpsAccessor()->EndFrame(root);
}
KOALA_INTEROP_DIRECT_V1(SystemOps_EndFrame, Ark_NativePointer)
void impl_SystemOps_syncInstanceId(Ark_Int32 instanceId) {
        GetAccessors()->getSystemOpsAccessor()->syncInstanceId(instanceId);
}
KOALA_INTEROP_DIRECT_V1(SystemOps_syncInstanceId, Ark_Int32)
void impl_SystemOps_restoreInstanceId() {
        GetAccessors()->getSystemOpsAccessor()->restoreInstanceId();
}
KOALA_INTEROP_DIRECT_V0(SystemOps_restoreInstanceId)
Ark_Int32 impl_SystemOps_getResourceId(const KStringPtr& bundleName, const KStringPtr& moduleName, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 paramsValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_String paramsValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(paramsValueTempTmpBuf)>::type,
        std::decay<decltype(*paramsValueTempTmpBuf.array)>::type>(&paramsValueTempTmpBuf, paramsValueTempTmpBufLength);
        for (int paramsValueTempTmpBufBufCounterI = 0; paramsValueTempTmpBufBufCounterI < paramsValueTempTmpBufLength; paramsValueTempTmpBufBufCounterI++) {
            paramsValueTempTmpBuf.array[paramsValueTempTmpBufBufCounterI] = static_cast<Ark_String>(thisDeserializer.readString());
        }
        Array_String paramsValueTemp = paramsValueTempTmpBuf;;
        return GetAccessors()->getSystemOpsAccessor()->getResourceId((const Ark_String*) (&bundleName), (const Ark_String*) (&moduleName), static_cast<Array_String*>(&paramsValueTemp));
}
KOALA_INTEROP_4(SystemOps_getResourceId, Ark_Int32, KStringPtr, KStringPtr, KSerializerBuffer, int32_t)
void impl_SystemOps_resourceManagerReset() {
        GetAccessors()->getSystemOpsAccessor()->resourceManagerReset();
}
KOALA_INTEROP_DIRECT_V0(SystemOps_resourceManagerReset)
void impl_SystemOps_setFrameCallback(KSerializerBuffer thisArray, int32_t thisLength, KInteropNumber delayTime) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_Number_Void onFrameCallbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Number value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Number_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Number value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Number_Void))))};;
        Callback_Number_Void onIdleCallbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Number value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Number_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Number value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Number_Void))))};;
        GetAccessors()->getSystemOpsAccessor()->setFrameCallback(static_cast<Callback_Number_Void*>(&onFrameCallbackValueTemp), static_cast<Callback_Number_Void*>(&onIdleCallbackValueTemp), (const Ark_Number*) (&delayTime));
}
KOALA_INTEROP_DIRECT_V3(SystemOps_setFrameCallback, KSerializerBuffer, int32_t, KInteropNumber)
KInteropReturnBuffer impl_SystemOps_colorMetricsResourceColor(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Resource colorValueTemp = Resource_serializer::read(thisDeserializer);;
        const auto &retValue = GetAccessors()->getSystemOpsAccessor()->colorMetricsResourceColor(static_cast<Ark_Resource*>(&colorValueTemp));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_Number retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeNumber(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(SystemOps_colorMetricsResourceColor, KInteropReturnBuffer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_SystemOps_resourceToLengthMetrics(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Resource resValueTemp = Resource_serializer::read(thisDeserializer);;
        const auto &retValue = GetAccessors()->getSystemOpsAccessor()->resourceToLengthMetrics(static_cast<Ark_Resource*>(&resValueTemp));
        SerializerBase _retSerializer {};
        LengthMetricsCustom_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(SystemOps_resourceToLengthMetrics, KInteropReturnBuffer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_SystemOps_blendColorByColorMetrics(KInteropNumber color, KInteropNumber overlayColor) {
        const auto &retValue = GetAccessors()->getSystemOpsAccessor()->blendColorByColorMetrics((const Ark_Number*) (&color), (const Ark_Number*) (&overlayColor));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_Number retValueTmpElement = retValue.array[retValueCounterI];
            _retSerializer.writeNumber(retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_2(SystemOps_blendColorByColorMetrics, KInteropReturnBuffer, KInteropNumber, KInteropNumber)
Ark_NativePointer impl_TabBarSymbol_construct() {
        return GetAccessors()->getTabBarSymbolAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TabBarSymbol_construct, Ark_NativePointer)
Ark_NativePointer impl_TabBarSymbol_getFinalizer() {
        return GetAccessors()->getTabBarSymbolAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TabBarSymbol_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_TabBarSymbol_getNormal(Ark_NativePointer thisPtr) {
        Ark_TabBarSymbol self = reinterpret_cast<Ark_TabBarSymbol>(thisPtr);
        return GetAccessors()->getTabBarSymbolAccessor()->getNormal(self);
}
KOALA_INTEROP_DIRECT_1(TabBarSymbol_getNormal, Ark_NativePointer, Ark_NativePointer)
void impl_TabBarSymbol_setNormal(Ark_NativePointer thisPtr, Ark_NativePointer normal) {
        Ark_TabBarSymbol self = reinterpret_cast<Ark_TabBarSymbol>(thisPtr);
        GetAccessors()->getTabBarSymbolAccessor()->setNormal(self, static_cast<Ark_SymbolGlyphModifier>(normal));
}
KOALA_INTEROP_DIRECT_V2(TabBarSymbol_setNormal, Ark_NativePointer, Ark_NativePointer)
KInteropReturnBuffer impl_TabBarSymbol_getSelected(Ark_NativePointer thisPtr) {
        Ark_TabBarSymbol self = reinterpret_cast<Ark_TabBarSymbol>(thisPtr);
        const auto &retValue = GetAccessors()->getTabBarSymbolAccessor()->getSelected(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            SymbolGlyphModifier_serializer::write(_retSerializer, retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TabBarSymbol_getSelected, KInteropReturnBuffer, Ark_NativePointer)
void impl_TabBarSymbol_setSelected(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TabBarSymbol self = reinterpret_cast<Ark_TabBarSymbol>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto selectedValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SymbolGlyphModifier selectedValueTempTmpBuf = {};
        selectedValueTempTmpBuf.tag = selectedValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((selectedValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            selectedValueTempTmpBuf.value = static_cast<Ark_SymbolGlyphModifier>(SymbolGlyphModifier_serializer::read(thisDeserializer));
        }
        Opt_SymbolGlyphModifier selectedValueTemp = selectedValueTempTmpBuf;;
        GetAccessors()->getTabBarSymbolAccessor()->setSelected(self, static_cast<Opt_SymbolGlyphModifier*>(&selectedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabBarSymbol_setSelected, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TabContentTransitionProxy_construct() {
        return GetAccessors()->getTabContentTransitionProxyAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TabContentTransitionProxy_construct, Ark_NativePointer)
Ark_NativePointer impl_TabContentTransitionProxy_getFinalizer() {
        return GetAccessors()->getTabContentTransitionProxyAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TabContentTransitionProxy_getFinalizer, Ark_NativePointer)
void impl_TabContentTransitionProxy_finishTransition(Ark_NativePointer thisPtr) {
        Ark_TabContentTransitionProxy self = reinterpret_cast<Ark_TabContentTransitionProxy>(thisPtr);
        GetAccessors()->getTabContentTransitionProxyAccessor()->finishTransition(self);
}
KOALA_INTEROP_DIRECT_V1(TabContentTransitionProxy_finishTransition, Ark_NativePointer)
Ark_Int32 impl_TabContentTransitionProxy_getFrom(Ark_NativePointer thisPtr) {
        Ark_TabContentTransitionProxy self = reinterpret_cast<Ark_TabContentTransitionProxy>(thisPtr);
        return GetAccessors()->getTabContentTransitionProxyAccessor()->getFrom(self);
}
KOALA_INTEROP_DIRECT_1(TabContentTransitionProxy_getFrom, Ark_Int32, Ark_NativePointer)
void impl_TabContentTransitionProxy_setFrom(Ark_NativePointer thisPtr, Ark_Int32 from) {
        Ark_TabContentTransitionProxy self = reinterpret_cast<Ark_TabContentTransitionProxy>(thisPtr);
        GetAccessors()->getTabContentTransitionProxyAccessor()->setFrom(self, from);
}
KOALA_INTEROP_DIRECT_V2(TabContentTransitionProxy_setFrom, Ark_NativePointer, Ark_Int32)
Ark_Int32 impl_TabContentTransitionProxy_getTo(Ark_NativePointer thisPtr) {
        Ark_TabContentTransitionProxy self = reinterpret_cast<Ark_TabContentTransitionProxy>(thisPtr);
        return GetAccessors()->getTabContentTransitionProxyAccessor()->getTo(self);
}
KOALA_INTEROP_DIRECT_1(TabContentTransitionProxy_getTo, Ark_Int32, Ark_NativePointer)
void impl_TabContentTransitionProxy_setTo(Ark_NativePointer thisPtr, Ark_Int32 to) {
        Ark_TabContentTransitionProxy self = reinterpret_cast<Ark_TabContentTransitionProxy>(thisPtr);
        GetAccessors()->getTabContentTransitionProxyAccessor()->setTo(self, to);
}
KOALA_INTEROP_DIRECT_V2(TabContentTransitionProxy_setTo, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_TabsController_construct() {
        return GetAccessors()->getTabsControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TabsController_construct, Ark_NativePointer)
Ark_NativePointer impl_TabsController_getFinalizer() {
        return GetAccessors()->getTabsControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TabsController_getFinalizer, Ark_NativePointer)
void impl_TabsController_changeIndex(Ark_NativePointer thisPtr, Ark_Int32 value) {
        Ark_TabsController self = reinterpret_cast<Ark_TabsController>(thisPtr);
        GetAccessors()->getTabsControllerAccessor()->changeIndex(self, value);
}
KOALA_INTEROP_DIRECT_V2(TabsController_changeIndex, Ark_NativePointer, Ark_Int32)
void impl_TabsController_preloadItems(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TabsController self = reinterpret_cast<Ark_TabsController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto indicesValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_Int32 indicesValueTempTmpBuf = {};
        indicesValueTempTmpBuf.tag = indicesValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((indicesValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 indicesValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_Int32 indicesValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(indicesValueTempTmpBuf_)>::type,
        std::decay<decltype(*indicesValueTempTmpBuf_.array)>::type>(&indicesValueTempTmpBuf_, indicesValueTempTmpBuf_Length);
            for (int indicesValueTempTmpBuf_BufCounterI = 0; indicesValueTempTmpBuf_BufCounterI < indicesValueTempTmpBuf_Length; indicesValueTempTmpBuf_BufCounterI++) {
                indicesValueTempTmpBuf_.array[indicesValueTempTmpBuf_BufCounterI] = thisDeserializer.readInt32();
            }
            indicesValueTempTmpBuf.value = indicesValueTempTmpBuf_;
        }
        Opt_Array_Int32 indicesValueTemp = indicesValueTempTmpBuf;;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getTabsControllerAccessor()->preloadItems(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, static_cast<Opt_Array_Int32*>(&indicesValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(TabsController_preloadItems, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsController_setTabBarTranslate(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TabsController self = reinterpret_cast<Ark_TabsController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TranslateOptions translateValueTemp = TranslateOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getTabsControllerAccessor()->setTabBarTranslate(self, static_cast<Ark_TranslateOptions*>(&translateValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TabsController_setTabBarTranslate, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TabsController_setTabBarOpacity(Ark_NativePointer thisPtr, KDouble opacity) {
        Ark_TabsController self = reinterpret_cast<Ark_TabsController>(thisPtr);
        GetAccessors()->getTabsControllerAccessor()->setTabBarOpacity(self, opacity);
}
KOALA_INTEROP_V2(TabsController_setTabBarOpacity, Ark_NativePointer, KDouble)
Ark_NativePointer impl_TapGestureEvent_construct() {
        return GetAccessors()->getTapGestureEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TapGestureEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_TapGestureEvent_getFinalizer() {
        return GetAccessors()->getTapGestureEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TapGestureEvent_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_TapRecognizer_construct() {
        return GetAccessors()->getTapRecognizerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TapRecognizer_construct, Ark_NativePointer)
Ark_NativePointer impl_TapRecognizer_getFinalizer() {
        return GetAccessors()->getTapRecognizerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TapRecognizer_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_TapRecognizer_getTapCount(Ark_NativePointer thisPtr) {
        Ark_TapRecognizer self = reinterpret_cast<Ark_TapRecognizer>(thisPtr);
        return GetAccessors()->getTapRecognizerAccessor()->getTapCount(self);
}
KOALA_INTEROP_DIRECT_1(TapRecognizer_getTapCount, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_TextAreaController_construct() {
        return GetAccessors()->getTextAreaControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextAreaController_construct, Ark_NativePointer)
Ark_NativePointer impl_TextAreaController_getFinalizer() {
        return GetAccessors()->getTextAreaControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextAreaController_getFinalizer, Ark_NativePointer)
void impl_TextAreaController_caretPosition(Ark_NativePointer thisPtr, Ark_Int32 value) {
        Ark_TextAreaController self = reinterpret_cast<Ark_TextAreaController>(thisPtr);
        GetAccessors()->getTextAreaControllerAccessor()->caretPosition(self, value);
}
KOALA_INTEROP_DIRECT_V2(TextAreaController_caretPosition, Ark_NativePointer, Ark_Int32)
void impl_TextAreaController_setTextSelection(Ark_NativePointer thisPtr, Ark_Int32 selectionStart, Ark_Int32 selectionEnd, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TextAreaController self = reinterpret_cast<Ark_TextAreaController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionOptions_serializer::read(thisDeserializer);
        }
        Opt_SelectionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getTextAreaControllerAccessor()->setTextSelection(self, selectionStart, selectionEnd, static_cast<Opt_SelectionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V5(TextAreaController_setTextSelection, Ark_NativePointer, Ark_Int32, Ark_Int32, KSerializerBuffer, int32_t)
void impl_TextAreaController_stopEditing(Ark_NativePointer thisPtr) {
        Ark_TextAreaController self = reinterpret_cast<Ark_TextAreaController>(thisPtr);
        GetAccessors()->getTextAreaControllerAccessor()->stopEditing(self);
}
KOALA_INTEROP_DIRECT_V1(TextAreaController_stopEditing, Ark_NativePointer)
Ark_NativePointer impl_TextBaseController_construct() {
        return GetAccessors()->getTextBaseControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextBaseController_construct, Ark_NativePointer)
Ark_NativePointer impl_TextBaseController_getFinalizer() {
        return GetAccessors()->getTextBaseControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextBaseController_getFinalizer, Ark_NativePointer)
void impl_TextBaseController_setSelection(Ark_NativePointer thisPtr, KInteropNumber selectionStart, KInteropNumber selectionEnd, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TextBaseController self = reinterpret_cast<Ark_TextBaseController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionOptions_serializer::read(thisDeserializer);
        }
        Opt_SelectionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getTextBaseControllerAccessor()->setSelection(self, (const Ark_Number*) (&selectionStart), (const Ark_Number*) (&selectionEnd), static_cast<Opt_SelectionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V5(TextBaseController_setSelection, Ark_NativePointer, KInteropNumber, KInteropNumber, KSerializerBuffer, int32_t)
void impl_TextBaseController_closeSelectionMenu(Ark_NativePointer thisPtr) {
        Ark_TextBaseController self = reinterpret_cast<Ark_TextBaseController>(thisPtr);
        GetAccessors()->getTextBaseControllerAccessor()->closeSelectionMenu(self);
}
KOALA_INTEROP_DIRECT_V1(TextBaseController_closeSelectionMenu, Ark_NativePointer)
Ark_NativePointer impl_TextBaseController_getLayoutManager(Ark_NativePointer thisPtr) {
        Ark_TextBaseController self = reinterpret_cast<Ark_TextBaseController>(thisPtr);
        return GetAccessors()->getTextBaseControllerAccessor()->getLayoutManager(self);
}
KOALA_INTEROP_DIRECT_1(TextBaseController_getLayoutManager, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_TextClockController_construct() {
        return GetAccessors()->getTextClockControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextClockController_construct, Ark_NativePointer)
Ark_NativePointer impl_TextClockController_getFinalizer() {
        return GetAccessors()->getTextClockControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextClockController_getFinalizer, Ark_NativePointer)
void impl_TextClockController_start(Ark_NativePointer thisPtr) {
        Ark_TextClockController self = reinterpret_cast<Ark_TextClockController>(thisPtr);
        GetAccessors()->getTextClockControllerAccessor()->start(self);
}
KOALA_INTEROP_DIRECT_V1(TextClockController_start, Ark_NativePointer)
void impl_TextClockController_stop(Ark_NativePointer thisPtr) {
        Ark_TextClockController self = reinterpret_cast<Ark_TextClockController>(thisPtr);
        GetAccessors()->getTextClockControllerAccessor()->stop(self);
}
KOALA_INTEROP_DIRECT_V1(TextClockController_stop, Ark_NativePointer)
Ark_NativePointer impl_TextContentControllerBase_construct() {
        return GetAccessors()->getTextContentControllerBaseAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextContentControllerBase_construct, Ark_NativePointer)
Ark_NativePointer impl_TextContentControllerBase_getFinalizer() {
        return GetAccessors()->getTextContentControllerBaseAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextContentControllerBase_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_TextContentControllerBase_getCaretOffset(Ark_NativePointer thisPtr) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        const auto &retValue = GetAccessors()->getTextContentControllerBaseAccessor()->getCaretOffset(self);
        SerializerBase _retSerializer {};
        CaretOffset_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextContentControllerBase_getCaretOffset, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_TextContentControllerBase_getTextContentRect(Ark_NativePointer thisPtr) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        const auto &retValue = GetAccessors()->getTextContentControllerBaseAccessor()->getTextContentRect(self);
        SerializerBase _retSerializer {};
        RectResult_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextContentControllerBase_getTextContentRect, KInteropReturnBuffer, Ark_NativePointer)
Ark_Int32 impl_TextContentControllerBase_getTextContentLineCount(Ark_NativePointer thisPtr) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        return GetAccessors()->getTextContentControllerBaseAccessor()->getTextContentLineCount(self);
}
KOALA_INTEROP_DIRECT_1(TextContentControllerBase_getTextContentLineCount, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_TextContentControllerBase_addText(Ark_NativePointer thisPtr, const KStringPtr& text, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto textOperationOptionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextContentControllerOptions textOperationOptionsValueTempTmpBuf = {};
        textOperationOptionsValueTempTmpBuf.tag = textOperationOptionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((textOperationOptionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            textOperationOptionsValueTempTmpBuf.value = TextContentControllerOptions_serializer::read(thisDeserializer);
        }
        Opt_TextContentControllerOptions textOperationOptionsValueTemp = textOperationOptionsValueTempTmpBuf;;
        return GetAccessors()->getTextContentControllerBaseAccessor()->addText(self, (const Ark_String*) (&text), static_cast<Opt_TextContentControllerOptions*>(&textOperationOptionsValueTemp));
}
KOALA_INTEROP_4(TextContentControllerBase_addText, Ark_Int32, Ark_NativePointer, KStringPtr, KSerializerBuffer, int32_t)
void impl_TextContentControllerBase_deleteText(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rangeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextRange rangeValueTempTmpBuf = {};
        rangeValueTempTmpBuf.tag = rangeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rangeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rangeValueTempTmpBuf.value = TextRange_serializer::read(thisDeserializer);
        }
        Opt_TextRange rangeValueTemp = rangeValueTempTmpBuf;;
        GetAccessors()->getTextContentControllerBaseAccessor()->deleteText(self, static_cast<Opt_TextRange*>(&rangeValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TextContentControllerBase_deleteText, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_TextContentControllerBase_getSelection(Ark_NativePointer thisPtr) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        const auto &retValue = GetAccessors()->getTextContentControllerBaseAccessor()->getSelection(self);
        SerializerBase _retSerializer {};
        TextRange_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextContentControllerBase_getSelection, KInteropReturnBuffer, Ark_NativePointer)
void impl_TextContentControllerBase_clearPreviewText(Ark_NativePointer thisPtr) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        GetAccessors()->getTextContentControllerBaseAccessor()->clearPreviewText(self);
}
KOALA_INTEROP_DIRECT_V1(TextContentControllerBase_clearPreviewText, Ark_NativePointer)
Ark_String impl_TextContentControllerBase_getText(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TextContentControllerBase self = reinterpret_cast<Ark_TextContentControllerBase>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto rangeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextRange rangeValueTempTmpBuf = {};
        rangeValueTempTmpBuf.tag = rangeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((rangeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            rangeValueTempTmpBuf.value = TextRange_serializer::read(thisDeserializer);
        }
        Opt_TextRange rangeValueTemp = rangeValueTempTmpBuf;;
        return GetAccessors()->getTextContentControllerBaseAccessor()->getText(self, static_cast<Opt_TextRange*>(&rangeValueTemp));
}
KOALA_INTEROP_3(TextContentControllerBase_getText, KStringPtr, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextController_construct() {
        return GetAccessors()->getTextControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextController_construct, Ark_NativePointer)
Ark_NativePointer impl_TextController_getFinalizer() {
        return GetAccessors()->getTextControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextController_getFinalizer, Ark_NativePointer)
void impl_TextController_closeSelectionMenu(Ark_NativePointer thisPtr) {
        Ark_TextController self = reinterpret_cast<Ark_TextController>(thisPtr);
        GetAccessors()->getTextControllerAccessor()->closeSelectionMenu(self);
}
KOALA_INTEROP_DIRECT_V1(TextController_closeSelectionMenu, Ark_NativePointer)
void impl_TextController_setStyledString(Ark_NativePointer thisPtr, Ark_NativePointer value) {
        Ark_TextController self = reinterpret_cast<Ark_TextController>(thisPtr);
        GetAccessors()->getTextControllerAccessor()->setStyledString(self, static_cast<Ark_StyledString>(value));
}
KOALA_INTEROP_DIRECT_V2(TextController_setStyledString, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_TextController_getLayoutManager(Ark_NativePointer thisPtr) {
        Ark_TextController self = reinterpret_cast<Ark_TextController>(thisPtr);
        return GetAccessors()->getTextControllerAccessor()->getLayoutManager(self);
}
KOALA_INTEROP_DIRECT_1(TextController_getLayoutManager, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_TextEditControllerEx_construct() {
        return GetAccessors()->getTextEditControllerExAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextEditControllerEx_construct, Ark_NativePointer)
Ark_NativePointer impl_TextEditControllerEx_getFinalizer() {
        return GetAccessors()->getTextEditControllerExAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextEditControllerEx_getFinalizer, Ark_NativePointer)
Ark_Boolean impl_TextEditControllerEx_isEditing(Ark_NativePointer thisPtr) {
        Ark_TextEditControllerEx self = reinterpret_cast<Ark_TextEditControllerEx>(thisPtr);
        return GetAccessors()->getTextEditControllerExAccessor()->isEditing(self);
}
KOALA_INTEROP_DIRECT_1(TextEditControllerEx_isEditing, Ark_Boolean, Ark_NativePointer)
void impl_TextEditControllerEx_stopEditing(Ark_NativePointer thisPtr) {
        Ark_TextEditControllerEx self = reinterpret_cast<Ark_TextEditControllerEx>(thisPtr);
        GetAccessors()->getTextEditControllerExAccessor()->stopEditing(self);
}
KOALA_INTEROP_DIRECT_V1(TextEditControllerEx_stopEditing, Ark_NativePointer)
Ark_Boolean impl_TextEditControllerEx_setCaretOffset(Ark_NativePointer thisPtr, KInteropNumber offset) {
        Ark_TextEditControllerEx self = reinterpret_cast<Ark_TextEditControllerEx>(thisPtr);
        return GetAccessors()->getTextEditControllerExAccessor()->setCaretOffset(self, (const Ark_Number*) (&offset));
}
KOALA_INTEROP_DIRECT_2(TextEditControllerEx_setCaretOffset, Ark_Boolean, Ark_NativePointer, KInteropNumber)
Ark_Number impl_TextEditControllerEx_getCaretOffset(Ark_NativePointer thisPtr) {
        Ark_TextEditControllerEx self = reinterpret_cast<Ark_TextEditControllerEx>(thisPtr);
        return GetAccessors()->getTextEditControllerExAccessor()->getCaretOffset(self);
}
KOALA_INTEROP_DIRECT_1(TextEditControllerEx_getCaretOffset, KInteropNumber, Ark_NativePointer)
KInteropReturnBuffer impl_TextEditControllerEx_getPreviewText(Ark_NativePointer thisPtr) {
        Ark_TextEditControllerEx self = reinterpret_cast<Ark_TextEditControllerEx>(thisPtr);
        const auto &retValue = GetAccessors()->getTextEditControllerExAccessor()->getPreviewText(self);
        SerializerBase _retSerializer {};
        PreviewText_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextEditControllerEx_getPreviewText, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_TextFieldOps_registerTextFieldValueCallback(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceStr valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            valueValueTempTmpBuf.value1 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceStr valueValueTemp = static_cast<Ark_ResourceStr>(valueValueTempTmpBuf);;
        TextFieldValueCallback callbackValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ResourceStr value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_TextFieldValueCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ResourceStr value)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_TextFieldValueCallback))))};;
        return GetAccessors()->getTextFieldOpsAccessor()->registerTextFieldValueCallback(node, static_cast<Ark_ResourceStr*>(&valueValueTemp), static_cast<TextFieldValueCallback*>(&callbackValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_registerTextFieldValueCallback, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetWidth(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_LayoutPolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_LayoutPolicy valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LayoutPolicy>(LayoutPolicy_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_LayoutPolicy>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_LayoutPolicy valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetWidth(node, static_cast<Opt_Union_Length_LayoutPolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetWidth, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetHeight(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_LayoutPolicy valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_LayoutPolicy valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_LayoutPolicy>(LayoutPolicy_serializer::read(thisDeserializer));
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_LayoutPolicy>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_LayoutPolicy valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetHeight(node, static_cast<Opt_Union_Length_LayoutPolicy*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetHeight, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetPadding(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Padding_Length_LocalizedPadding valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Padding_Length_LocalizedPadding valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Padding_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedPadding_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Padding_Length_LocalizedPadding>(valueValueTempTmpBuf_);
        }
        Opt_Union_Padding_Length_LocalizedPadding valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetPadding(node, static_cast<Opt_Union_Padding_Length_LocalizedPadding*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetPadding, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetMargin(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Padding_Length_LocalizedPadding valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Padding_Length_LocalizedPadding valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = Padding_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedPadding_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Padding_Length_LocalizedPadding>(valueValueTempTmpBuf_);
        }
        Opt_Union_Padding_Length_LocalizedPadding valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetMargin(node, static_cast<Opt_Union_Padding_Length_LocalizedPadding*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetMargin, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetBorder(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_BorderOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = BorderOptions_serializer::read(thisDeserializer);
        }
        Opt_BorderOptions valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetBorder(node, static_cast<Opt_BorderOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetBorder, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetBorderWidth(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_EdgeWidths_LocalizedEdgeWidths valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_EdgeWidths_LocalizedEdgeWidths valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeWidths_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdgeWidths_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_EdgeWidths_LocalizedEdgeWidths>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_EdgeWidths_LocalizedEdgeWidths valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetBorderWidth(node, static_cast<Opt_Union_Length_EdgeWidths_LocalizedEdgeWidths*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetBorderWidth, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetBorderColor(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_ResourceColor valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 3) {
                    valueValueTempTmpBuf_BufU.selector = 3;
                    valueValueTempTmpBuf_BufU.value3 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeColors_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedEdgeColors_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_ResourceColor_EdgeColors_LocalizedEdgeColors>(valueValueTempTmpBuf_);
        }
        Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetBorderColor(node, static_cast<Opt_Union_ResourceColor_EdgeColors_LocalizedEdgeColors*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetBorderColor, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetBorderStyle(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_BorderStyle_EdgeStyles valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_BorderStyle_EdgeStyles valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_BorderStyle>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = EdgeStyles_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_BorderStyle_EdgeStyles>(valueValueTempTmpBuf_);
        }
        Opt_Union_BorderStyle_EdgeStyles valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetBorderStyle(node, static_cast<Opt_Union_BorderStyle_EdgeStyles*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetBorderStyle, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetBorderRadius(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Union_Length_BorderRadiuses_LocalizedBorderRadiuses valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_Union_Length_BorderRadiuses_LocalizedBorderRadiuses valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                const Ark_Int8 valueValueTempTmpBuf_BufUUnionSelector = thisDeserializer.readInt8();
                Ark_Length valueValueTempTmpBuf_BufU = {};
                valueValueTempTmpBuf_BufU.selector = valueValueTempTmpBuf_BufUUnionSelector;
                if (valueValueTempTmpBuf_BufUUnionSelector == 0) {
                    valueValueTempTmpBuf_BufU.selector = 0;
                    valueValueTempTmpBuf_BufU.value0 = static_cast<Ark_String>(thisDeserializer.readString());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 1) {
                    valueValueTempTmpBuf_BufU.selector = 1;
                    valueValueTempTmpBuf_BufU.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
                } else if (valueValueTempTmpBuf_BufUUnionSelector == 2) {
                    valueValueTempTmpBuf_BufU.selector = 2;
                    valueValueTempTmpBuf_BufU.value2 = Resource_serializer::read(thisDeserializer);
                } else {
                    INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_BufU has to be chosen through deserialisation.");
                }
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Length>(valueValueTempTmpBuf_BufU);
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = BorderRadiuses_serializer::read(thisDeserializer);
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = LocalizedBorderRadiuses_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_Union_Length_BorderRadiuses_LocalizedBorderRadiuses>(valueValueTempTmpBuf_);
        }
        Opt_Union_Length_BorderRadiuses_LocalizedBorderRadiuses valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetBorderRadius(node, static_cast<Opt_Union_Length_BorderRadiuses_LocalizedBorderRadiuses*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetBorderRadius, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextFieldOps_textFieldOpsSetBackgroundColor(Ark_NativePointer node, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_ResourceColor valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int8 valueValueTempTmpBuf_UnionSelector = thisDeserializer.readInt8();
            Ark_ResourceColor valueValueTempTmpBuf_ = {};
            valueValueTempTmpBuf_.selector = valueValueTempTmpBuf_UnionSelector;
            if (valueValueTempTmpBuf_UnionSelector == 0) {
                valueValueTempTmpBuf_.selector = 0;
                valueValueTempTmpBuf_.value0 = static_cast<Ark_Color>(thisDeserializer.readInt32());
            } else if (valueValueTempTmpBuf_UnionSelector == 1) {
                valueValueTempTmpBuf_.selector = 1;
                valueValueTempTmpBuf_.value1 = static_cast<Ark_Number>(thisDeserializer.readNumber());
            } else if (valueValueTempTmpBuf_UnionSelector == 2) {
                valueValueTempTmpBuf_.selector = 2;
                valueValueTempTmpBuf_.value2 = static_cast<Ark_String>(thisDeserializer.readString());
            } else if (valueValueTempTmpBuf_UnionSelector == 3) {
                valueValueTempTmpBuf_.selector = 3;
                valueValueTempTmpBuf_.value3 = Resource_serializer::read(thisDeserializer);
            } else {
                INTEROP_FATAL("One of the branches for valueValueTempTmpBuf_ has to be chosen through deserialisation.");
            }
            valueValueTempTmpBuf.value = static_cast<Ark_ResourceColor>(valueValueTempTmpBuf_);
        }
        Opt_ResourceColor valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextFieldOpsAccessor()->textFieldOpsSetBackgroundColor(node, static_cast<Opt_ResourceColor*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TextFieldOps_textFieldOpsSetBackgroundColor, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextInputController_construct() {
        return GetAccessors()->getTextInputControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextInputController_construct, Ark_NativePointer)
Ark_NativePointer impl_TextInputController_getFinalizer() {
        return GetAccessors()->getTextInputControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextInputController_getFinalizer, Ark_NativePointer)
void impl_TextInputController_caretPosition(Ark_NativePointer thisPtr, Ark_Int32 value) {
        Ark_TextInputController self = reinterpret_cast<Ark_TextInputController>(thisPtr);
        GetAccessors()->getTextInputControllerAccessor()->caretPosition(self, value);
}
KOALA_INTEROP_DIRECT_V2(TextInputController_caretPosition, Ark_NativePointer, Ark_Int32)
void impl_TextInputController_setTextSelection(Ark_NativePointer thisPtr, Ark_Int32 selectionStart, Ark_Int32 selectionEnd, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TextInputController self = reinterpret_cast<Ark_TextInputController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto optionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SelectionOptions optionsValueTempTmpBuf = {};
        optionsValueTempTmpBuf.tag = optionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((optionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            optionsValueTempTmpBuf.value = SelectionOptions_serializer::read(thisDeserializer);
        }
        Opt_SelectionOptions optionsValueTemp = optionsValueTempTmpBuf;;
        GetAccessors()->getTextInputControllerAccessor()->setTextSelection(self, selectionStart, selectionEnd, static_cast<Opt_SelectionOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_V5(TextInputController_setTextSelection, Ark_NativePointer, Ark_Int32, Ark_Int32, KSerializerBuffer, int32_t)
void impl_TextInputController_stopEditing(Ark_NativePointer thisPtr) {
        Ark_TextInputController self = reinterpret_cast<Ark_TextInputController>(thisPtr);
        GetAccessors()->getTextInputControllerAccessor()->stopEditing(self);
}
KOALA_INTEROP_DIRECT_V1(TextInputController_stopEditing, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_construct() {
        return GetAccessors()->getTextMenuItemIdAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_construct, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getFinalizer() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_of(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 idValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_ResourceStr idValueTempTmpBuf = {};
        idValueTempTmpBuf.selector = idValueTempTmpBufUnionSelector;
        if (idValueTempTmpBufUnionSelector == 0) {
            idValueTempTmpBuf.selector = 0;
            idValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (idValueTempTmpBufUnionSelector == 1) {
            idValueTempTmpBuf.selector = 1;
            idValueTempTmpBuf.value1 = Resource_serializer::read(thisDeserializer);
        } else {
            INTEROP_FATAL("One of the branches for idValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_ResourceStr idValueTemp = static_cast<Ark_ResourceStr>(idValueTempTmpBuf);;
        return GetAccessors()->getTextMenuItemIdAccessor()->of(static_cast<Ark_ResourceStr*>(&idValueTemp));
}
KOALA_INTEROP_DIRECT_2(TextMenuItemId_of, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Boolean impl_TextMenuItemId_equals(Ark_NativePointer thisPtr, Ark_NativePointer id) {
        Ark_TextMenuItemId self = reinterpret_cast<Ark_TextMenuItemId>(thisPtr);
        return GetAccessors()->getTextMenuItemIdAccessor()->equals(self, static_cast<Ark_TextMenuItemId>(id));
}
KOALA_INTEROP_DIRECT_2(TextMenuItemId_equals, Ark_Boolean, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getCUT() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getCUT();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getCUT, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getCOPY() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getCOPY();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getCOPY, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getPASTE() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getPASTE();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getPASTE, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getSELECT_ALL() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getSELECT_ALL();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getSELECT_ALL, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getCOLLABORATION_SERVICE() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getCOLLABORATION_SERVICE();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getCOLLABORATION_SERVICE, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getCAMERA_INPUT() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getCAMERA_INPUT();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getCAMERA_INPUT, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getAI_WRITER() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getAI_WRITER();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getAI_WRITER, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getTRANSLATE() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getTRANSLATE();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getTRANSLATE, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getSEARCH() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getSEARCH();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getSEARCH, Ark_NativePointer)
Ark_NativePointer impl_TextMenuItemId_getSHARE() {
        return GetAccessors()->getTextMenuItemIdAccessor()->getSHARE();
}
KOALA_INTEROP_DIRECT_0(TextMenuItemId_getSHARE, Ark_NativePointer)
Ark_NativePointer impl_TextPickerDialog_construct() {
        return GetAccessors()->getTextPickerDialogAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextPickerDialog_construct, Ark_NativePointer)
Ark_NativePointer impl_TextPickerDialog_getFinalizer() {
        return GetAccessors()->getTextPickerDialogAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextPickerDialog_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_TextShadowStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 valueValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_ShadowOptions_Array_ShadowOptions valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.selector = valueValueTempTmpBufUnionSelector;
        if (valueValueTempTmpBufUnionSelector == 0) {
            valueValueTempTmpBuf.selector = 0;
            valueValueTempTmpBuf.value0 = ShadowOptions_serializer::read(thisDeserializer);
        } else if (valueValueTempTmpBufUnionSelector == 1) {
            valueValueTempTmpBuf.selector = 1;
            const Ark_Int32 valueValueTempTmpBufBufULength = thisDeserializer.readInt32();
            Array_ShadowOptions valueValueTempTmpBufBufU = {};
            thisDeserializer.resizeArray<std::decay<decltype(valueValueTempTmpBufBufU)>::type,
        std::decay<decltype(*valueValueTempTmpBufBufU.array)>::type>(&valueValueTempTmpBufBufU, valueValueTempTmpBufBufULength);
            for (int valueValueTempTmpBufBufUBufCounterI = 0; valueValueTempTmpBufBufUBufCounterI < valueValueTempTmpBufBufULength; valueValueTempTmpBufBufUBufCounterI++) {
                valueValueTempTmpBufBufU.array[valueValueTempTmpBufBufUBufCounterI] = ShadowOptions_serializer::read(thisDeserializer);
            }
            valueValueTempTmpBuf.value1 = valueValueTempTmpBufBufU;
        } else {
            INTEROP_FATAL("One of the branches for valueValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_ShadowOptions_Array_ShadowOptions valueValueTemp = static_cast<Ark_Union_ShadowOptions_Array_ShadowOptions>(valueValueTempTmpBuf);;
        return GetAccessors()->getTextShadowStyleAccessor()->construct(static_cast<Ark_Union_ShadowOptions_Array_ShadowOptions*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(TextShadowStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextShadowStyle_getFinalizer() {
        return GetAccessors()->getTextShadowStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextShadowStyle_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_TextShadowStyle_getTextShadow(Ark_NativePointer thisPtr) {
        Ark_TextShadowStyle self = reinterpret_cast<Ark_TextShadowStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getTextShadowStyleAccessor()->getTextShadow(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_ShadowOptions retValueTmpElement = retValue.array[retValueCounterI];
            ShadowOptions_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextShadowStyle_getTextShadow, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_TextStyle_construct(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto valueValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_TextStyleInterface valueValueTempTmpBuf = {};
        valueValueTempTmpBuf.tag = valueValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((valueValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            valueValueTempTmpBuf.value = TextStyleInterface_serializer::read(thisDeserializer);
        }
        Opt_TextStyleInterface valueValueTemp = valueValueTempTmpBuf;;
        return GetAccessors()->getTextStyleAccessor()->construct(static_cast<Opt_TextStyleInterface*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_2(TextStyle_construct, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TextStyle_getFinalizer() {
        return GetAccessors()->getTextStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextStyle_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_TextStyle_getFontColor(Ark_NativePointer thisPtr) {
        Ark_TextStyle self = reinterpret_cast<Ark_TextStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getTextStyleAccessor()->getFontColor(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            if (retValueTmpValue.selector == 0) {
                _retSerializer.writeInt8(0);
                const auto retValueTmpValueForIdx0 = retValueTmpValue.value0;
                _retSerializer.writeInt32(static_cast<Ark_Color>(retValueTmpValueForIdx0));
            } else if (retValueTmpValue.selector == 1) {
                _retSerializer.writeInt8(1);
                const auto retValueTmpValueForIdx1 = retValueTmpValue.value1;
                _retSerializer.writeNumber(retValueTmpValueForIdx1);
            } else if (retValueTmpValue.selector == 2) {
                _retSerializer.writeInt8(2);
                const auto retValueTmpValueForIdx2 = retValueTmpValue.value2;
                _retSerializer.writeString(retValueTmpValueForIdx2);
            } else if (retValueTmpValue.selector == 3) {
                _retSerializer.writeInt8(3);
                const auto retValueTmpValueForIdx3 = retValueTmpValue.value3;
                Resource_serializer::write(_retSerializer, retValueTmpValueForIdx3);
            }
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextStyle_getFontColor, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_TextStyle_getFontFamily(Ark_NativePointer thisPtr) {
        Ark_TextStyle self = reinterpret_cast<Ark_TextStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getTextStyleAccessor()->getFontFamily(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeString(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextStyle_getFontFamily, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_TextStyle_getFontSize(Ark_NativePointer thisPtr) {
        Ark_TextStyle self = reinterpret_cast<Ark_TextStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getTextStyleAccessor()->getFontSize(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeFloat64(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextStyle_getFontSize, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_TextStyle_getFontWeight(Ark_NativePointer thisPtr) {
        Ark_TextStyle self = reinterpret_cast<Ark_TextStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getTextStyleAccessor()->getFontWeight(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(retValueTmpValue);
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextStyle_getFontWeight, KInteropReturnBuffer, Ark_NativePointer)
KInteropReturnBuffer impl_TextStyle_getFontStyle(Ark_NativePointer thisPtr) {
        Ark_TextStyle self = reinterpret_cast<Ark_TextStyle>(thisPtr);
        const auto &retValue = GetAccessors()->getTextStyleAccessor()->getFontStyle(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            _retSerializer.writeInt32(static_cast<Ark_FontStyle>(retValueTmpValue));
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TextStyle_getFontStyle, KInteropReturnBuffer, Ark_NativePointer)
Ark_NativePointer impl_TextTimerController_construct() {
        return GetAccessors()->getTextTimerControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TextTimerController_construct, Ark_NativePointer)
Ark_NativePointer impl_TextTimerController_getFinalizer() {
        return GetAccessors()->getTextTimerControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TextTimerController_getFinalizer, Ark_NativePointer)
void impl_TextTimerController_start(Ark_NativePointer thisPtr) {
        Ark_TextTimerController self = reinterpret_cast<Ark_TextTimerController>(thisPtr);
        GetAccessors()->getTextTimerControllerAccessor()->start(self);
}
KOALA_INTEROP_DIRECT_V1(TextTimerController_start, Ark_NativePointer)
void impl_TextTimerController_pause(Ark_NativePointer thisPtr) {
        Ark_TextTimerController self = reinterpret_cast<Ark_TextTimerController>(thisPtr);
        GetAccessors()->getTextTimerControllerAccessor()->pause(self);
}
KOALA_INTEROP_DIRECT_V1(TextTimerController_pause, Ark_NativePointer)
void impl_TextTimerController_reset(Ark_NativePointer thisPtr) {
        Ark_TextTimerController self = reinterpret_cast<Ark_TextTimerController>(thisPtr);
        GetAccessors()->getTextTimerControllerAccessor()->reset(self);
}
KOALA_INTEROP_DIRECT_V1(TextTimerController_reset, Ark_NativePointer)
Ark_NativePointer impl_TimePickerDialog_construct() {
        return GetAccessors()->getTimePickerDialogAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TimePickerDialog_construct, Ark_NativePointer)
Ark_NativePointer impl_TimePickerDialog_getFinalizer() {
        return GetAccessors()->getTimePickerDialogAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TimePickerDialog_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_TouchEvent_construct() {
        return GetAccessors()->getTouchEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(TouchEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_TouchEvent_getFinalizer() {
        return GetAccessors()->getTouchEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TouchEvent_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_TouchEvent_getHistoricalPoints(Ark_NativePointer thisPtr) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getTouchEventAccessor()->getHistoricalPoints(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_HistoricalPoint retValueTmpElement = retValue.array[retValueCounterI];
            HistoricalPoint_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TouchEvent_getHistoricalPoints, KInteropReturnBuffer, Ark_NativePointer)
Ark_Int32 impl_TouchEvent_getType(Ark_NativePointer thisPtr) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        return GetAccessors()->getTouchEventAccessor()->getType(self);
}
KOALA_INTEROP_DIRECT_1(TouchEvent_getType, Ark_Int32, Ark_NativePointer)
void impl_TouchEvent_setType(Ark_NativePointer thisPtr, Ark_Int32 type) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        GetAccessors()->getTouchEventAccessor()->setType(self, static_cast<Ark_TouchType>(type));
}
KOALA_INTEROP_DIRECT_V2(TouchEvent_setType, Ark_NativePointer, Ark_Int32)
KInteropReturnBuffer impl_TouchEvent_getTouches(Ark_NativePointer thisPtr) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getTouchEventAccessor()->getTouches(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_TouchObject retValueTmpElement = retValue.array[retValueCounterI];
            TouchObject_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TouchEvent_getTouches, KInteropReturnBuffer, Ark_NativePointer)
void impl_TouchEvent_setTouches(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 touchesValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_TouchObject touchesValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(touchesValueTempTmpBuf)>::type,
        std::decay<decltype(*touchesValueTempTmpBuf.array)>::type>(&touchesValueTempTmpBuf, touchesValueTempTmpBufLength);
        for (int touchesValueTempTmpBufBufCounterI = 0; touchesValueTempTmpBufBufCounterI < touchesValueTempTmpBufLength; touchesValueTempTmpBufBufCounterI++) {
            touchesValueTempTmpBuf.array[touchesValueTempTmpBufBufCounterI] = TouchObject_serializer::read(thisDeserializer);
        }
        Array_TouchObject touchesValueTemp = touchesValueTempTmpBuf;;
        GetAccessors()->getTouchEventAccessor()->setTouches(self, static_cast<Array_TouchObject*>(&touchesValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TouchEvent_setTouches, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_TouchEvent_getChangedTouches(Ark_NativePointer thisPtr) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        const auto &retValue = GetAccessors()->getTouchEventAccessor()->getChangedTouches(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_TouchObject retValueTmpElement = retValue.array[retValueCounterI];
            TouchObject_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(TouchEvent_getChangedTouches, KInteropReturnBuffer, Ark_NativePointer)
void impl_TouchEvent_setChangedTouches(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 changedTouchesValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_TouchObject changedTouchesValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(changedTouchesValueTempTmpBuf)>::type,
        std::decay<decltype(*changedTouchesValueTempTmpBuf.array)>::type>(&changedTouchesValueTempTmpBuf, changedTouchesValueTempTmpBufLength);
        for (int changedTouchesValueTempTmpBufBufCounterI = 0; changedTouchesValueTempTmpBufBufCounterI < changedTouchesValueTempTmpBufLength; changedTouchesValueTempTmpBufBufCounterI++) {
            changedTouchesValueTempTmpBuf.array[changedTouchesValueTempTmpBufBufCounterI] = TouchObject_serializer::read(thisDeserializer);
        }
        Array_TouchObject changedTouchesValueTemp = changedTouchesValueTempTmpBuf;;
        GetAccessors()->getTouchEventAccessor()->setChangedTouches(self, static_cast<Array_TouchObject*>(&changedTouchesValueTemp));
}
KOALA_INTEROP_DIRECT_V3(TouchEvent_setChangedTouches, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_TouchEvent_stopPropagation(Ark_NativePointer thisPtr) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        GetAccessors()->getTouchEventAccessor()->stopPropagation(self);
}
KOALA_INTEROP_DIRECT_V1(TouchEvent_stopPropagation, Ark_NativePointer)
void impl_TouchEvent_preventDefault(Ark_NativePointer thisPtr) {
        Ark_TouchEvent self = reinterpret_cast<Ark_TouchEvent>(thisPtr);
        GetAccessors()->getTouchEventAccessor()->preventDefault(self);
}
KOALA_INTEROP_DIRECT_V1(TouchEvent_preventDefault, Ark_NativePointer)
Ark_NativePointer impl_TransitionEffect_construct0(const KStringPtr& type) {
        return GetAccessors()->getTransitionEffectAccessor()->construct0((const Ark_String*) (&type));
}
KOALA_INTEROP_1(TransitionEffect_construct0, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_TransitionEffect_construct1(KDouble effect) {
        return GetAccessors()->getTransitionEffectAccessor()->construct1(effect);
}
KOALA_INTEROP_1(TransitionEffect_construct1, Ark_NativePointer, KDouble)
Ark_NativePointer impl_TransitionEffect_construct2(Ark_Int32 effect) {
        return GetAccessors()->getTransitionEffectAccessor()->construct2(static_cast<Ark_TransitionEdge>(effect));
}
KOALA_INTEROP_DIRECT_1(TransitionEffect_construct2, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_TransitionEffect_construct3(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TranslateOptions effectValueTemp = TranslateOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->construct3(static_cast<Ark_TranslateOptions*>(&effectValueTemp));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_construct3, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_construct4(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RotateOptions effectValueTemp = RotateOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->construct4(static_cast<Ark_RotateOptions*>(&effectValueTemp));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_construct4, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_construct5(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ScaleOptions effectValueTemp = ScaleOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->construct5(static_cast<Ark_ScaleOptions*>(&effectValueTemp));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_construct5, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_construct6(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_AsymmetricTransitionOption effectValueTemp = AsymmetricTransitionOption_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->construct6(static_cast<Ark_AsymmetricTransitionOption*>(&effectValueTemp));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_construct6, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_getFinalizer() {
        return GetAccessors()->getTransitionEffectAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(TransitionEffect_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_TransitionEffect_translate(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_TranslateOptions optionsValueTemp = TranslateOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->translate(static_cast<Ark_TranslateOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_translate, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_rotate(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_RotateOptions optionsValueTemp = RotateOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->rotate(static_cast<Ark_RotateOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_rotate, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_scale(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ScaleOptions optionsValueTemp = ScaleOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->scale(static_cast<Ark_ScaleOptions*>(&optionsValueTemp));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_scale, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_opacity(KDouble alpha) {
        return GetAccessors()->getTransitionEffectAccessor()->opacity(alpha);
}
KOALA_INTEROP_1(TransitionEffect_opacity, Ark_NativePointer, KDouble)
Ark_NativePointer impl_TransitionEffect_move(Ark_Int32 edge) {
        return GetAccessors()->getTransitionEffectAccessor()->move(static_cast<Ark_TransitionEdge>(edge));
}
KOALA_INTEROP_DIRECT_1(TransitionEffect_move, Ark_NativePointer, Ark_Int32)
Ark_NativePointer impl_TransitionEffect_asymmetric(Ark_NativePointer appear, Ark_NativePointer disappear) {
        return GetAccessors()->getTransitionEffectAccessor()->asymmetric(static_cast<Ark_TransitionEffect>(appear), static_cast<Ark_TransitionEffect>(disappear));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_asymmetric, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_TransitionEffect_animation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_TransitionEffect self = reinterpret_cast<Ark_TransitionEffect>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_AnimateParam valueValueTemp = AnimateParam_serializer::read(thisDeserializer);;
        return GetAccessors()->getTransitionEffectAccessor()->animation(self, static_cast<Ark_AnimateParam*>(&valueValueTemp));
}
KOALA_INTEROP_DIRECT_3(TransitionEffect_animation, Ark_NativePointer, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_TransitionEffect_combine(Ark_NativePointer thisPtr, Ark_NativePointer transitionEffect) {
        Ark_TransitionEffect self = reinterpret_cast<Ark_TransitionEffect>(thisPtr);
        return GetAccessors()->getTransitionEffectAccessor()->combine(self, static_cast<Ark_TransitionEffect>(transitionEffect));
}
KOALA_INTEROP_DIRECT_2(TransitionEffect_combine, Ark_NativePointer, Ark_NativePointer, Ark_NativePointer)
Ark_NativePointer impl_TransitionEffect_getIDENTITY() {
        return GetAccessors()->getTransitionEffectAccessor()->getIDENTITY();
}
KOALA_INTEROP_DIRECT_0(TransitionEffect_getIDENTITY, Ark_NativePointer)
void impl_TransitionEffect_setIDENTITY(Ark_NativePointer IDENTITY) {
        GetAccessors()->getTransitionEffectAccessor()->setIDENTITY(static_cast<Ark_TransitionEffect>(IDENTITY));
}
KOALA_INTEROP_DIRECT_V1(TransitionEffect_setIDENTITY, Ark_NativePointer)
Ark_NativePointer impl_TransitionEffect_getOPACITY() {
        return GetAccessors()->getTransitionEffectAccessor()->getOPACITY();
}
KOALA_INTEROP_DIRECT_0(TransitionEffect_getOPACITY, Ark_NativePointer)
void impl_TransitionEffect_setOPACITY(Ark_NativePointer OPACITY) {
        GetAccessors()->getTransitionEffectAccessor()->setOPACITY(static_cast<Ark_TransitionEffect>(OPACITY));
}
KOALA_INTEROP_DIRECT_V1(TransitionEffect_setOPACITY, Ark_NativePointer)
Ark_NativePointer impl_TransitionEffect_getSLIDE() {
        return GetAccessors()->getTransitionEffectAccessor()->getSLIDE();
}
KOALA_INTEROP_DIRECT_0(TransitionEffect_getSLIDE, Ark_NativePointer)
void impl_TransitionEffect_setSLIDE(Ark_NativePointer SLIDE) {
        GetAccessors()->getTransitionEffectAccessor()->setSLIDE(static_cast<Ark_TransitionEffect>(SLIDE));
}
KOALA_INTEROP_DIRECT_V1(TransitionEffect_setSLIDE, Ark_NativePointer)
Ark_NativePointer impl_TransitionEffect_getSLIDE_SWITCH() {
        return GetAccessors()->getTransitionEffectAccessor()->getSLIDE_SWITCH();
}
KOALA_INTEROP_DIRECT_0(TransitionEffect_getSLIDE_SWITCH, Ark_NativePointer)
void impl_TransitionEffect_setSLIDE_SWITCH(Ark_NativePointer SLIDE_SWITCH) {
        GetAccessors()->getTransitionEffectAccessor()->setSLIDE_SWITCH(static_cast<Ark_TransitionEffect>(SLIDE_SWITCH));
}
KOALA_INTEROP_DIRECT_V1(TransitionEffect_setSLIDE_SWITCH, Ark_NativePointer)
Ark_NativePointer impl_UICommonEvent_construct() {
        return GetAccessors()->getUICommonEventAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(UICommonEvent_construct, Ark_NativePointer)
Ark_NativePointer impl_UICommonEvent_getFinalizer() {
        return GetAccessors()->getUICommonEventAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(UICommonEvent_getFinalizer, Ark_NativePointer)
void impl_UICommonEvent_setOnClick(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_ClickEvent_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_ClickEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_ClickEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_ClickEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_ClickEvent_Void))))};
        }
        Opt_Callback_ClickEvent_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnClick(self, static_cast<Opt_Callback_ClickEvent_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnClick, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnTouch(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_TouchEvent_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_TouchEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_TouchEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_TouchEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_TouchEvent_Void))))};
        }
        Opt_Callback_TouchEvent_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnTouch(self, static_cast<Opt_Callback_TouchEvent_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnTouch, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnAppear(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnAppear(self, static_cast<Opt_Callback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnAppear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnDisappear(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnDisappear(self, static_cast<Opt_Callback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnDisappear, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnKeyEvent(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_KeyEvent_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_KeyEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_KeyEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_KeyEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_KeyEvent_Void))))};
        }
        Opt_Callback_KeyEvent_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnKeyEvent(self, static_cast<Opt_Callback_KeyEvent_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnKeyEvent, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnFocus(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnFocus(self, static_cast<Opt_Callback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnFocus, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnBlur(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};
        }
        Opt_Callback_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnBlur(self, static_cast<Opt_Callback_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnBlur, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnHover(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_HoverCallback callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isHover, const Ark_HoverEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_HoverCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isHover, const Ark_HoverEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_HoverCallback))))};
        }
        Opt_HoverCallback callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnHover(self, static_cast<Opt_HoverCallback*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnHover, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnMouse(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_MouseEvent_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_MouseEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_MouseEvent_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_MouseEvent event)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_MouseEvent_Void))))};
        }
        Opt_Callback_MouseEvent_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnMouse(self, static_cast<Opt_Callback_MouseEvent_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnMouse, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnSizeChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SizeChangeCallback callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_SizeOptions oldValue, const Ark_SizeOptions newValue)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_SizeChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_SizeOptions oldValue, const Ark_SizeOptions newValue)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_SizeChangeCallback))))};
        }
        Opt_SizeChangeCallback callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnSizeChange(self, static_cast<Opt_SizeChangeCallback*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnSizeChange, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UICommonEvent_setOnVisibleAreaApproximateChange(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UICommonEvent self = reinterpret_cast<Ark_UICommonEvent>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_VisibleAreaEventOptions optionsValueTemp = VisibleAreaEventOptions_serializer::read(thisDeserializer);;
        const auto eventValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_VisibleAreaChangeCallback eventValueTempTmpBuf = {};
        eventValueTempTmpBuf.tag = eventValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((eventValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            eventValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_Boolean isExpanding, const Ark_Float64 currentRatio)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_VisibleAreaChangeCallback)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_Boolean isExpanding, const Ark_Float64 currentRatio)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_VisibleAreaChangeCallback))))};
        }
        Opt_VisibleAreaChangeCallback eventValueTemp = eventValueTempTmpBuf;;
        GetAccessors()->getUICommonEventAccessor()->setOnVisibleAreaApproximateChange(self, static_cast<Ark_VisibleAreaEventOptions*>(&optionsValueTemp), static_cast<Opt_VisibleAreaChangeCallback*>(&eventValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UICommonEvent_setOnVisibleAreaApproximateChange, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_UIContextAtomicServiceBar_getBarRect() {
        const auto &retValue = GetAccessors()->getUIContextAtomicServiceBarAccessor()->getBarRect();
        SerializerBase _retSerializer {};
        Frame_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_0(UIContextAtomicServiceBar_getBarRect, KInteropReturnBuffer)
Ark_NativePointer impl_UIExtensionProxy_construct() {
        return GetAccessors()->getUIExtensionProxyAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(UIExtensionProxy_construct, Ark_NativePointer)
Ark_NativePointer impl_UIExtensionProxy_getFinalizer() {
        return GetAccessors()->getUIExtensionProxyAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(UIExtensionProxy_getFinalizer, Ark_NativePointer)
void impl_UIExtensionProxy_send(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UIExtensionProxy self = reinterpret_cast<Ark_UIExtensionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 dataValueTempTmpBufSizeVar = thisDeserializer.readInt32();
        Map_String_Opt_Object dataValueTempTmpBuf = {};
        thisDeserializer.resizeMap<Map_String_Opt_Object, Ark_String, Opt_Object>(&dataValueTempTmpBuf, dataValueTempTmpBufSizeVar);
        for (int dataValueTempTmpBufIVar = 0; dataValueTempTmpBufIVar < dataValueTempTmpBufSizeVar; dataValueTempTmpBufIVar++) {
            const Ark_String dataValueTempTmpBufKeyVar = static_cast<Ark_String>(thisDeserializer.readString());
            const auto dataValueTempTmpBufValueVarTempBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
            Opt_Object dataValueTempTmpBufValueVarTempBuf = {};
            dataValueTempTmpBufValueVarTempBuf.tag = dataValueTempTmpBufValueVarTempBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
            if ((dataValueTempTmpBufValueVarTempBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
                dataValueTempTmpBufValueVarTempBuf.value = static_cast<Ark_Object>(thisDeserializer.readObject());
            }
            const Opt_Object dataValueTempTmpBufValueVar = dataValueTempTmpBufValueVarTempBuf;
            dataValueTempTmpBuf.keys[dataValueTempTmpBufIVar] = dataValueTempTmpBufKeyVar;
            dataValueTempTmpBuf.values[dataValueTempTmpBufIVar] = dataValueTempTmpBufValueVar;
        }
        Map_String_Opt_Object dataValueTemp = dataValueTempTmpBuf;;
        GetAccessors()->getUIExtensionProxyAccessor()->send(self, static_cast<Map_String_Opt_Object*>(&dataValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionProxy_send, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_UIExtensionProxy_sendSync(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UIExtensionProxy self = reinterpret_cast<Ark_UIExtensionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 dataValueTempTmpBufSizeVar = thisDeserializer.readInt32();
        Map_String_Opt_Object dataValueTempTmpBuf = {};
        thisDeserializer.resizeMap<Map_String_Opt_Object, Ark_String, Opt_Object>(&dataValueTempTmpBuf, dataValueTempTmpBufSizeVar);
        for (int dataValueTempTmpBufIVar = 0; dataValueTempTmpBufIVar < dataValueTempTmpBufSizeVar; dataValueTempTmpBufIVar++) {
            const Ark_String dataValueTempTmpBufKeyVar = static_cast<Ark_String>(thisDeserializer.readString());
            const auto dataValueTempTmpBufValueVarTempBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
            Opt_Object dataValueTempTmpBufValueVarTempBuf = {};
            dataValueTempTmpBufValueVarTempBuf.tag = dataValueTempTmpBufValueVarTempBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
            if ((dataValueTempTmpBufValueVarTempBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
                dataValueTempTmpBufValueVarTempBuf.value = static_cast<Ark_Object>(thisDeserializer.readObject());
            }
            const Opt_Object dataValueTempTmpBufValueVar = dataValueTempTmpBufValueVarTempBuf;
            dataValueTempTmpBuf.keys[dataValueTempTmpBufIVar] = dataValueTempTmpBufKeyVar;
            dataValueTempTmpBuf.values[dataValueTempTmpBufIVar] = dataValueTempTmpBufValueVar;
        }
        Map_String_Opt_Object dataValueTemp = dataValueTempTmpBuf;;
        const auto &retValue = GetAccessors()->getUIExtensionProxyAccessor()->sendSync(self, static_cast<Map_String_Opt_Object*>(&dataValueTemp));
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.size);
        for (int32_t i = 0; i < retValue.size; i++) {
            auto retValueKeyVar = retValue.keys[i];
            auto retValueValueVar = retValue.values[i];
            _retSerializer.writeString(retValueKeyVar);
            if (runtimeType(retValueValueVar) != INTEROP_RUNTIME_UNDEFINED) {
                _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
                const auto retValueValueVarTmpValue = retValueValueVar.value;
                _retSerializer.writeObject(retValueValueVarTmpValue);
            } else {
                _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
            }
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(UIExtensionProxy_sendSync, KInteropReturnBuffer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionProxy_onAsyncReceiverRegisterAsyncReceiverRegister(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UIExtensionProxy self = reinterpret_cast<Ark_UIExtensionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_UIExtensionProxy_Void callback_ValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_UIExtensionProxy_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_UIExtensionProxy_Void))))};;
        GetAccessors()->getUIExtensionProxyAccessor()->onAsyncReceiverRegisterAsyncReceiverRegister(self, static_cast<Callback_UIExtensionProxy_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionProxy_onAsyncReceiverRegisterAsyncReceiverRegister, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionProxy_onSyncReceiverRegisterSyncReceiverRegister(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UIExtensionProxy self = reinterpret_cast<Ark_UIExtensionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_UIExtensionProxy_Void callback_ValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_UIExtensionProxy_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_UIExtensionProxy_Void))))};;
        GetAccessors()->getUIExtensionProxyAccessor()->onSyncReceiverRegisterSyncReceiverRegister(self, static_cast<Callback_UIExtensionProxy_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionProxy_onSyncReceiverRegisterSyncReceiverRegister, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionProxy_offAsyncReceiverRegisterAsyncReceiverRegister(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UIExtensionProxy self = reinterpret_cast<Ark_UIExtensionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_UIExtensionProxy_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_UIExtensionProxy_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_UIExtensionProxy_Void))))};
        }
        Opt_Callback_UIExtensionProxy_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUIExtensionProxyAccessor()->offAsyncReceiverRegisterAsyncReceiverRegister(self, static_cast<Opt_Callback_UIExtensionProxy_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionProxy_offAsyncReceiverRegisterAsyncReceiverRegister, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_UIExtensionProxy_offSyncReceiverRegisterSyncReceiverRegister(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_UIExtensionProxy self = reinterpret_cast<Ark_UIExtensionProxy>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto callback_ValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Callback_UIExtensionProxy_Void callback_ValueTempTmpBuf = {};
        callback_ValueTempTmpBuf.tag = callback_ValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((callback_ValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            callback_ValueTempTmpBuf.value = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_UIExtensionProxy_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_UIExtensionProxy value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_UIExtensionProxy_Void))))};
        }
        Opt_Callback_UIExtensionProxy_Void callback_ValueTemp = callback_ValueTempTmpBuf;;
        GetAccessors()->getUIExtensionProxyAccessor()->offSyncReceiverRegisterSyncReceiverRegister(self, static_cast<Opt_Callback_UIExtensionProxy_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V3(UIExtensionProxy_offSyncReceiverRegisterSyncReceiverRegister, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_UrlStyle_construct(const KStringPtr& url) {
        return GetAccessors()->getUrlStyleAccessor()->construct((const Ark_String*) (&url));
}
KOALA_INTEROP_1(UrlStyle_construct, Ark_NativePointer, KStringPtr)
Ark_NativePointer impl_UrlStyle_getFinalizer() {
        return GetAccessors()->getUrlStyleAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(UrlStyle_getFinalizer, Ark_NativePointer)
Ark_String impl_UrlStyle_getUrl(Ark_NativePointer thisPtr) {
        Ark_UrlStyle self = reinterpret_cast<Ark_UrlStyle>(thisPtr);
        return GetAccessors()->getUrlStyleAccessor()->getUrl(self);
}
KOALA_INTEROP_1(UrlStyle_getUrl, KStringPtr, Ark_NativePointer)
Ark_NativePointer impl_UserDataSpan_construct() {
        return GetAccessors()->getUserDataSpanAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(UserDataSpan_construct, Ark_NativePointer)
Ark_NativePointer impl_UserDataSpan_getFinalizer() {
        return GetAccessors()->getUserDataSpanAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(UserDataSpan_getFinalizer, Ark_NativePointer)
Ark_NativePointer impl_VideoController_construct() {
        return GetAccessors()->getVideoControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(VideoController_construct, Ark_NativePointer)
Ark_NativePointer impl_VideoController_getFinalizer() {
        return GetAccessors()->getVideoControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(VideoController_getFinalizer, Ark_NativePointer)
void impl_VideoController_start(Ark_NativePointer thisPtr) {
        Ark_VideoController self = reinterpret_cast<Ark_VideoController>(thisPtr);
        GetAccessors()->getVideoControllerAccessor()->start(self);
}
KOALA_INTEROP_DIRECT_V1(VideoController_start, Ark_NativePointer)
void impl_VideoController_pause(Ark_NativePointer thisPtr) {
        Ark_VideoController self = reinterpret_cast<Ark_VideoController>(thisPtr);
        GetAccessors()->getVideoControllerAccessor()->pause(self);
}
KOALA_INTEROP_DIRECT_V1(VideoController_pause, Ark_NativePointer)
void impl_VideoController_stop(Ark_NativePointer thisPtr) {
        Ark_VideoController self = reinterpret_cast<Ark_VideoController>(thisPtr);
        GetAccessors()->getVideoControllerAccessor()->stop(self);
}
KOALA_INTEROP_DIRECT_V1(VideoController_stop, Ark_NativePointer)
void impl_VideoController_requestFullscreen(Ark_NativePointer thisPtr, Ark_Boolean value) {
        Ark_VideoController self = reinterpret_cast<Ark_VideoController>(thisPtr);
        GetAccessors()->getVideoControllerAccessor()->requestFullscreen(self, value);
}
KOALA_INTEROP_DIRECT_V2(VideoController_requestFullscreen, Ark_NativePointer, Ark_Boolean)
void impl_VideoController_exitFullscreen(Ark_NativePointer thisPtr) {
        Ark_VideoController self = reinterpret_cast<Ark_VideoController>(thisPtr);
        GetAccessors()->getVideoControllerAccessor()->exitFullscreen(self);
}
KOALA_INTEROP_DIRECT_V1(VideoController_exitFullscreen, Ark_NativePointer)
void impl_VideoController_setCurrentTime(Ark_NativePointer thisPtr, KDouble value, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_VideoController self = reinterpret_cast<Ark_VideoController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto seekModeValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_SeekMode seekModeValueTempTmpBuf = {};
        seekModeValueTempTmpBuf.tag = seekModeValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((seekModeValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            seekModeValueTempTmpBuf.value = static_cast<Ark_SeekMode>(thisDeserializer.readInt32());
        }
        Opt_SeekMode seekModeValueTemp = seekModeValueTempTmpBuf;;
        GetAccessors()->getVideoControllerAccessor()->setCurrentTime(self, value, static_cast<Opt_SeekMode*>(&seekModeValueTemp));
}
KOALA_INTEROP_V4(VideoController_setCurrentTime, Ark_NativePointer, KDouble, KSerializerBuffer, int32_t)
void impl_VideoController_reset(Ark_NativePointer thisPtr) {
        Ark_VideoController self = reinterpret_cast<Ark_VideoController>(thisPtr);
        GetAccessors()->getVideoControllerAccessor()->reset(self);
}
KOALA_INTEROP_DIRECT_V1(VideoController_reset, Ark_NativePointer)
Ark_NativePointer impl_WaterFlowSections_construct() {
        return GetAccessors()->getWaterFlowSectionsAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(WaterFlowSections_construct, Ark_NativePointer)
Ark_NativePointer impl_WaterFlowSections_getFinalizer() {
        return GetAccessors()->getWaterFlowSectionsAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(WaterFlowSections_getFinalizer, Ark_NativePointer)
Ark_Boolean impl_WaterFlowSections_splice(Ark_NativePointer thisPtr, Ark_Int32 start, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_WaterFlowSections self = reinterpret_cast<Ark_WaterFlowSections>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const auto deleteCountValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Int32 deleteCountValueTempTmpBuf = {};
        deleteCountValueTempTmpBuf.tag = deleteCountValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((deleteCountValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            deleteCountValueTempTmpBuf.value = thisDeserializer.readInt32();
        }
        Opt_Int32 deleteCountValueTemp = deleteCountValueTempTmpBuf;;
        const auto sectionsValueTempTmpBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
        Opt_Array_SectionOptions sectionsValueTempTmpBuf = {};
        sectionsValueTempTmpBuf.tag = sectionsValueTempTmpBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
        if ((sectionsValueTempTmpBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
            const Ark_Int32 sectionsValueTempTmpBuf_Length = thisDeserializer.readInt32();
            Array_SectionOptions sectionsValueTempTmpBuf_ = {};
            thisDeserializer.resizeArray<std::decay<decltype(sectionsValueTempTmpBuf_)>::type,
        std::decay<decltype(*sectionsValueTempTmpBuf_.array)>::type>(&sectionsValueTempTmpBuf_, sectionsValueTempTmpBuf_Length);
            for (int sectionsValueTempTmpBuf_BufCounterI = 0; sectionsValueTempTmpBuf_BufCounterI < sectionsValueTempTmpBuf_Length; sectionsValueTempTmpBuf_BufCounterI++) {
                sectionsValueTempTmpBuf_.array[sectionsValueTempTmpBuf_BufCounterI] = SectionOptions_serializer::read(thisDeserializer);
            }
            sectionsValueTempTmpBuf.value = sectionsValueTempTmpBuf_;
        }
        Opt_Array_SectionOptions sectionsValueTemp = sectionsValueTempTmpBuf;;
        return GetAccessors()->getWaterFlowSectionsAccessor()->splice(self, start, static_cast<Opt_Int32*>(&deleteCountValueTemp), static_cast<Opt_Array_SectionOptions*>(&sectionsValueTemp));
}
KOALA_INTEROP_DIRECT_4(WaterFlowSections_splice, Ark_Boolean, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
Ark_Boolean impl_WaterFlowSections_push(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_WaterFlowSections self = reinterpret_cast<Ark_WaterFlowSections>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_SectionOptions sectionValueTemp = SectionOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getWaterFlowSectionsAccessor()->push(self, static_cast<Ark_SectionOptions*>(&sectionValueTemp));
}
KOALA_INTEROP_DIRECT_3(WaterFlowSections_push, Ark_Boolean, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_Boolean impl_WaterFlowSections_update(Ark_NativePointer thisPtr, Ark_Int32 sectionIndex, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_WaterFlowSections self = reinterpret_cast<Ark_WaterFlowSections>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_SectionOptions sectionValueTemp = SectionOptions_serializer::read(thisDeserializer);;
        return GetAccessors()->getWaterFlowSectionsAccessor()->update(self, sectionIndex, static_cast<Ark_SectionOptions*>(&sectionValueTemp));
}
KOALA_INTEROP_DIRECT_4(WaterFlowSections_update, Ark_Boolean, Ark_NativePointer, Ark_Int32, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_WaterFlowSections_values(Ark_NativePointer thisPtr) {
        Ark_WaterFlowSections self = reinterpret_cast<Ark_WaterFlowSections>(thisPtr);
        const auto &retValue = GetAccessors()->getWaterFlowSectionsAccessor()->values(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_SectionOptions retValueTmpElement = retValue.array[retValueCounterI];
            SectionOptions_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(WaterFlowSections_values, KInteropReturnBuffer, Ark_NativePointer)
Ark_Int32 impl_WaterFlowSections_length(Ark_NativePointer thisPtr) {
        Ark_WaterFlowSections self = reinterpret_cast<Ark_WaterFlowSections>(thisPtr);
        return GetAccessors()->getWaterFlowSectionsAccessor()->length(self);
}
KOALA_INTEROP_DIRECT_1(WaterFlowSections_length, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_WebContextMenuParam_construct() {
        return GetAccessors()->getWebContextMenuParamAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(WebContextMenuParam_construct, Ark_NativePointer)
Ark_NativePointer impl_WebContextMenuParam_getFinalizer() {
        return GetAccessors()->getWebContextMenuParamAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(WebContextMenuParam_getFinalizer, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_x(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->x(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_x, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_y(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->y(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_y, Ark_Int32, Ark_NativePointer)
Ark_String impl_WebContextMenuParam_getLinkUrl(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getLinkUrl(self);
}
KOALA_INTEROP_1(WebContextMenuParam_getLinkUrl, KStringPtr, Ark_NativePointer)
Ark_String impl_WebContextMenuParam_getUnfilteredLinkUrl(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getUnfilteredLinkUrl(self);
}
KOALA_INTEROP_1(WebContextMenuParam_getUnfilteredLinkUrl, KStringPtr, Ark_NativePointer)
Ark_String impl_WebContextMenuParam_getSourceUrl(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getSourceUrl(self);
}
KOALA_INTEROP_1(WebContextMenuParam_getSourceUrl, KStringPtr, Ark_NativePointer)
Ark_Boolean impl_WebContextMenuParam_existsImageContents(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->existsImageContents(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_existsImageContents, Ark_Boolean, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_getMediaType(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getMediaType(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_getMediaType, Ark_Int32, Ark_NativePointer)
Ark_String impl_WebContextMenuParam_getSelectionText(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getSelectionText(self);
}
KOALA_INTEROP_1(WebContextMenuParam_getSelectionText, KStringPtr, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_getSourceType(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getSourceType(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_getSourceType, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_getInputFieldType(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getInputFieldType(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_getInputFieldType, Ark_Int32, Ark_NativePointer)
Ark_Boolean impl_WebContextMenuParam_isEditable(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->isEditable(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_isEditable, Ark_Boolean, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_getEditStateFlags(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getEditStateFlags(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_getEditStateFlags, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_getPreviewWidth(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getPreviewWidth(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_getPreviewWidth, Ark_Int32, Ark_NativePointer)
Ark_Int32 impl_WebContextMenuParam_getPreviewHeight(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuParam self = reinterpret_cast<Ark_WebContextMenuParam>(thisPtr);
        return GetAccessors()->getWebContextMenuParamAccessor()->getPreviewHeight(self);
}
KOALA_INTEROP_DIRECT_1(WebContextMenuParam_getPreviewHeight, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_WebContextMenuResult_construct() {
        return GetAccessors()->getWebContextMenuResultAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(WebContextMenuResult_construct, Ark_NativePointer)
Ark_NativePointer impl_WebContextMenuResult_getFinalizer() {
        return GetAccessors()->getWebContextMenuResultAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(WebContextMenuResult_getFinalizer, Ark_NativePointer)
void impl_WebContextMenuResult_closeContextMenu(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuResult self = reinterpret_cast<Ark_WebContextMenuResult>(thisPtr);
        GetAccessors()->getWebContextMenuResultAccessor()->closeContextMenu(self);
}
KOALA_INTEROP_DIRECT_V1(WebContextMenuResult_closeContextMenu, Ark_NativePointer)
void impl_WebContextMenuResult_copyImage(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuResult self = reinterpret_cast<Ark_WebContextMenuResult>(thisPtr);
        GetAccessors()->getWebContextMenuResultAccessor()->copyImage(self);
}
KOALA_INTEROP_DIRECT_V1(WebContextMenuResult_copyImage, Ark_NativePointer)
void impl_WebContextMenuResult_copy(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuResult self = reinterpret_cast<Ark_WebContextMenuResult>(thisPtr);
        GetAccessors()->getWebContextMenuResultAccessor()->copy(self);
}
KOALA_INTEROP_DIRECT_V1(WebContextMenuResult_copy, Ark_NativePointer)
void impl_WebContextMenuResult_paste(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuResult self = reinterpret_cast<Ark_WebContextMenuResult>(thisPtr);
        GetAccessors()->getWebContextMenuResultAccessor()->paste(self);
}
KOALA_INTEROP_DIRECT_V1(WebContextMenuResult_paste, Ark_NativePointer)
void impl_WebContextMenuResult_cut(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuResult self = reinterpret_cast<Ark_WebContextMenuResult>(thisPtr);
        GetAccessors()->getWebContextMenuResultAccessor()->cut(self);
}
KOALA_INTEROP_DIRECT_V1(WebContextMenuResult_cut, Ark_NativePointer)
void impl_WebContextMenuResult_selectAll(Ark_NativePointer thisPtr) {
        Ark_WebContextMenuResult self = reinterpret_cast<Ark_WebContextMenuResult>(thisPtr);
        GetAccessors()->getWebContextMenuResultAccessor()->selectAll(self);
}
KOALA_INTEROP_DIRECT_V1(WebContextMenuResult_selectAll, Ark_NativePointer)
Ark_NativePointer impl_WebKeyboardController_construct() {
        return GetAccessors()->getWebKeyboardControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(WebKeyboardController_construct, Ark_NativePointer)
Ark_NativePointer impl_WebKeyboardController_getFinalizer() {
        return GetAccessors()->getWebKeyboardControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(WebKeyboardController_getFinalizer, Ark_NativePointer)
void impl_WebKeyboardController_insertText(Ark_NativePointer thisPtr, const KStringPtr& text) {
        Ark_WebKeyboardController self = reinterpret_cast<Ark_WebKeyboardController>(thisPtr);
        GetAccessors()->getWebKeyboardControllerAccessor()->insertText(self, (const Ark_String*) (&text));
}
KOALA_INTEROP_V2(WebKeyboardController_insertText, Ark_NativePointer, KStringPtr)
void impl_WebKeyboardController_deleteForward(Ark_NativePointer thisPtr, Ark_Int32 length) {
        Ark_WebKeyboardController self = reinterpret_cast<Ark_WebKeyboardController>(thisPtr);
        GetAccessors()->getWebKeyboardControllerAccessor()->deleteForward(self, length);
}
KOALA_INTEROP_DIRECT_V2(WebKeyboardController_deleteForward, Ark_NativePointer, Ark_Int32)
void impl_WebKeyboardController_deleteBackward(Ark_NativePointer thisPtr, Ark_Int32 length) {
        Ark_WebKeyboardController self = reinterpret_cast<Ark_WebKeyboardController>(thisPtr);
        GetAccessors()->getWebKeyboardControllerAccessor()->deleteBackward(self, length);
}
KOALA_INTEROP_DIRECT_V2(WebKeyboardController_deleteBackward, Ark_NativePointer, Ark_Int32)
void impl_WebKeyboardController_sendFunctionKey(Ark_NativePointer thisPtr, Ark_Int32 key) {
        Ark_WebKeyboardController self = reinterpret_cast<Ark_WebKeyboardController>(thisPtr);
        GetAccessors()->getWebKeyboardControllerAccessor()->sendFunctionKey(self, key);
}
KOALA_INTEROP_DIRECT_V2(WebKeyboardController_sendFunctionKey, Ark_NativePointer, Ark_Int32)
void impl_WebKeyboardController_close(Ark_NativePointer thisPtr) {
        Ark_WebKeyboardController self = reinterpret_cast<Ark_WebKeyboardController>(thisPtr);
        GetAccessors()->getWebKeyboardControllerAccessor()->close(self);
}
KOALA_INTEROP_DIRECT_V1(WebKeyboardController_close, Ark_NativePointer)
Ark_NativePointer impl_WebResourceError_construct() {
        return GetAccessors()->getWebResourceErrorAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(WebResourceError_construct, Ark_NativePointer)
Ark_NativePointer impl_WebResourceError_getFinalizer() {
        return GetAccessors()->getWebResourceErrorAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(WebResourceError_getFinalizer, Ark_NativePointer)
Ark_String impl_WebResourceError_getErrorInfo(Ark_NativePointer thisPtr) {
        Ark_WebResourceError self = reinterpret_cast<Ark_WebResourceError>(thisPtr);
        return GetAccessors()->getWebResourceErrorAccessor()->getErrorInfo(self);
}
KOALA_INTEROP_1(WebResourceError_getErrorInfo, KStringPtr, Ark_NativePointer)
Ark_Int32 impl_WebResourceError_getErrorCode(Ark_NativePointer thisPtr) {
        Ark_WebResourceError self = reinterpret_cast<Ark_WebResourceError>(thisPtr);
        return GetAccessors()->getWebResourceErrorAccessor()->getErrorCode(self);
}
KOALA_INTEROP_DIRECT_1(WebResourceError_getErrorCode, Ark_Int32, Ark_NativePointer)
Ark_NativePointer impl_WebResourceRequest_construct() {
        return GetAccessors()->getWebResourceRequestAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(WebResourceRequest_construct, Ark_NativePointer)
Ark_NativePointer impl_WebResourceRequest_getFinalizer() {
        return GetAccessors()->getWebResourceRequestAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(WebResourceRequest_getFinalizer, Ark_NativePointer)
KInteropReturnBuffer impl_WebResourceRequest_getRequestHeader(Ark_NativePointer thisPtr) {
        Ark_WebResourceRequest self = reinterpret_cast<Ark_WebResourceRequest>(thisPtr);
        const auto &retValue = GetAccessors()->getWebResourceRequestAccessor()->getRequestHeader(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_Header retValueTmpElement = retValue.array[retValueCounterI];
            Header_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(WebResourceRequest_getRequestHeader, KInteropReturnBuffer, Ark_NativePointer)
Ark_String impl_WebResourceRequest_getRequestUrl(Ark_NativePointer thisPtr) {
        Ark_WebResourceRequest self = reinterpret_cast<Ark_WebResourceRequest>(thisPtr);
        return GetAccessors()->getWebResourceRequestAccessor()->getRequestUrl(self);
}
KOALA_INTEROP_1(WebResourceRequest_getRequestUrl, KStringPtr, Ark_NativePointer)
Ark_Boolean impl_WebResourceRequest_isRequestGesture(Ark_NativePointer thisPtr) {
        Ark_WebResourceRequest self = reinterpret_cast<Ark_WebResourceRequest>(thisPtr);
        return GetAccessors()->getWebResourceRequestAccessor()->isRequestGesture(self);
}
KOALA_INTEROP_DIRECT_1(WebResourceRequest_isRequestGesture, Ark_Boolean, Ark_NativePointer)
Ark_Boolean impl_WebResourceRequest_isMainFrame(Ark_NativePointer thisPtr) {
        Ark_WebResourceRequest self = reinterpret_cast<Ark_WebResourceRequest>(thisPtr);
        return GetAccessors()->getWebResourceRequestAccessor()->isMainFrame(self);
}
KOALA_INTEROP_DIRECT_1(WebResourceRequest_isMainFrame, Ark_Boolean, Ark_NativePointer)
Ark_Boolean impl_WebResourceRequest_isRedirect(Ark_NativePointer thisPtr) {
        Ark_WebResourceRequest self = reinterpret_cast<Ark_WebResourceRequest>(thisPtr);
        return GetAccessors()->getWebResourceRequestAccessor()->isRedirect(self);
}
KOALA_INTEROP_DIRECT_1(WebResourceRequest_isRedirect, Ark_Boolean, Ark_NativePointer)
Ark_String impl_WebResourceRequest_getRequestMethod(Ark_NativePointer thisPtr) {
        Ark_WebResourceRequest self = reinterpret_cast<Ark_WebResourceRequest>(thisPtr);
        return GetAccessors()->getWebResourceRequestAccessor()->getRequestMethod(self);
}
KOALA_INTEROP_1(WebResourceRequest_getRequestMethod, KStringPtr, Ark_NativePointer)
Ark_NativePointer impl_WebResourceResponse_construct() {
        return GetAccessors()->getWebResourceResponseAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(WebResourceResponse_construct, Ark_NativePointer)
Ark_NativePointer impl_WebResourceResponse_getFinalizer() {
        return GetAccessors()->getWebResourceResponseAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(WebResourceResponse_getFinalizer, Ark_NativePointer)
Ark_String impl_WebResourceResponse_getResponseData(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        return GetAccessors()->getWebResourceResponseAccessor()->getResponseData(self);
}
KOALA_INTEROP_1(WebResourceResponse_getResponseData, KStringPtr, Ark_NativePointer)
KInteropReturnBuffer impl_WebResourceResponse_getResponseDataEx(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        const auto &retValue = GetAccessors()->getWebResourceResponseAccessor()->getResponseDataEx(self);
        SerializerBase _retSerializer {};
        if (runtimeType(retValue) != INTEROP_RUNTIME_UNDEFINED) {
            _retSerializer.writeInt8(INTEROP_RUNTIME_OBJECT);
            const auto retValueTmpValue = retValue.value;
            if (retValueTmpValue.selector == 0) {
                _retSerializer.writeInt8(0);
                const auto retValueTmpValueForIdx0 = retValueTmpValue.value0;
                _retSerializer.writeString(retValueTmpValueForIdx0);
            } else if (retValueTmpValue.selector == 1) {
                _retSerializer.writeInt8(1);
                const auto retValueTmpValueForIdx1 = retValueTmpValue.value1;
                _retSerializer.writeInt32(retValueTmpValueForIdx1);
            } else if (retValueTmpValue.selector == 2) {
                _retSerializer.writeInt8(2);
                const auto retValueTmpValueForIdx2 = retValueTmpValue.value2;
                _retSerializer.writeBuffer(retValueTmpValueForIdx2);
            } else if (retValueTmpValue.selector == 3) {
                _retSerializer.writeInt8(3);
                const auto retValueTmpValueForIdx3 = retValueTmpValue.value3;
                Resource_serializer::write(_retSerializer, retValueTmpValueForIdx3);
            }
        } else {
            _retSerializer.writeInt8(INTEROP_RUNTIME_UNDEFINED);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(WebResourceResponse_getResponseDataEx, KInteropReturnBuffer, Ark_NativePointer)
Ark_String impl_WebResourceResponse_getResponseEncoding(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        return GetAccessors()->getWebResourceResponseAccessor()->getResponseEncoding(self);
}
KOALA_INTEROP_1(WebResourceResponse_getResponseEncoding, KStringPtr, Ark_NativePointer)
Ark_String impl_WebResourceResponse_getResponseMimeType(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        return GetAccessors()->getWebResourceResponseAccessor()->getResponseMimeType(self);
}
KOALA_INTEROP_1(WebResourceResponse_getResponseMimeType, KStringPtr, Ark_NativePointer)
Ark_String impl_WebResourceResponse_getReasonMessage(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        return GetAccessors()->getWebResourceResponseAccessor()->getReasonMessage(self);
}
KOALA_INTEROP_1(WebResourceResponse_getReasonMessage, KStringPtr, Ark_NativePointer)
KInteropReturnBuffer impl_WebResourceResponse_getResponseHeader(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        const auto &retValue = GetAccessors()->getWebResourceResponseAccessor()->getResponseHeader(self);
        SerializerBase _retSerializer {};
        _retSerializer.writeInt32(retValue.length);
        for (int retValueCounterI = 0; retValueCounterI < retValue.length; retValueCounterI++) {
            const Ark_Header retValueTmpElement = retValue.array[retValueCounterI];
            Header_serializer::write(_retSerializer, retValueTmpElement);
        }
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(WebResourceResponse_getResponseHeader, KInteropReturnBuffer, Ark_NativePointer)
Ark_Int32 impl_WebResourceResponse_getResponseCode(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        return GetAccessors()->getWebResourceResponseAccessor()->getResponseCode(self);
}
KOALA_INTEROP_DIRECT_1(WebResourceResponse_getResponseCode, Ark_Int32, Ark_NativePointer)
void impl_WebResourceResponse_setResponseData(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int8 dataValueTempTmpBufUnionSelector = thisDeserializer.readInt8();
        Ark_Union_String_I32_Resource_Buffer dataValueTempTmpBuf = {};
        dataValueTempTmpBuf.selector = dataValueTempTmpBufUnionSelector;
        if (dataValueTempTmpBufUnionSelector == 0) {
            dataValueTempTmpBuf.selector = 0;
            dataValueTempTmpBuf.value0 = static_cast<Ark_String>(thisDeserializer.readString());
        } else if (dataValueTempTmpBufUnionSelector == 1) {
            dataValueTempTmpBuf.selector = 1;
            dataValueTempTmpBuf.value1 = thisDeserializer.readInt32();
        } else if (dataValueTempTmpBufUnionSelector == 2) {
            dataValueTempTmpBuf.selector = 2;
            dataValueTempTmpBuf.value2 = Resource_serializer::read(thisDeserializer);
        } else if (dataValueTempTmpBufUnionSelector == 3) {
            dataValueTempTmpBuf.selector = 3;
            dataValueTempTmpBuf.value3 = static_cast<Ark_Buffer>(thisDeserializer.readBuffer());
        } else {
            INTEROP_FATAL("One of the branches for dataValueTempTmpBuf has to be chosen through deserialisation.");
        }
        Ark_Union_String_I32_Resource_Buffer dataValueTemp = static_cast<Ark_Union_String_I32_Resource_Buffer>(dataValueTempTmpBuf);;
        GetAccessors()->getWebResourceResponseAccessor()->setResponseData(self, static_cast<Ark_Union_String_I32_Resource_Buffer*>(&dataValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebResourceResponse_setResponseData, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebResourceResponse_setResponseEncoding(Ark_NativePointer thisPtr, const KStringPtr& encoding) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        GetAccessors()->getWebResourceResponseAccessor()->setResponseEncoding(self, (const Ark_String*) (&encoding));
}
KOALA_INTEROP_V2(WebResourceResponse_setResponseEncoding, Ark_NativePointer, KStringPtr)
void impl_WebResourceResponse_setResponseMimeType(Ark_NativePointer thisPtr, const KStringPtr& mimeType) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        GetAccessors()->getWebResourceResponseAccessor()->setResponseMimeType(self, (const Ark_String*) (&mimeType));
}
KOALA_INTEROP_V2(WebResourceResponse_setResponseMimeType, Ark_NativePointer, KStringPtr)
void impl_WebResourceResponse_setReasonMessage(Ark_NativePointer thisPtr, const KStringPtr& reason) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        GetAccessors()->getWebResourceResponseAccessor()->setReasonMessage(self, (const Ark_String*) (&reason));
}
KOALA_INTEROP_V2(WebResourceResponse_setReasonMessage, Ark_NativePointer, KStringPtr)
void impl_WebResourceResponse_setResponseHeader(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 headerValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_Header headerValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(headerValueTempTmpBuf)>::type,
        std::decay<decltype(*headerValueTempTmpBuf.array)>::type>(&headerValueTempTmpBuf, headerValueTempTmpBufLength);
        for (int headerValueTempTmpBufBufCounterI = 0; headerValueTempTmpBufBufCounterI < headerValueTempTmpBufLength; headerValueTempTmpBufBufCounterI++) {
            headerValueTempTmpBuf.array[headerValueTempTmpBufBufCounterI] = Header_serializer::read(thisDeserializer);
        }
        Array_Header headerValueTemp = headerValueTempTmpBuf;;
        GetAccessors()->getWebResourceResponseAccessor()->setResponseHeader(self, static_cast<Array_Header*>(&headerValueTemp));
}
KOALA_INTEROP_DIRECT_V3(WebResourceResponse_setResponseHeader, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_WebResourceResponse_setResponseCode(Ark_NativePointer thisPtr, Ark_Int32 code) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        GetAccessors()->getWebResourceResponseAccessor()->setResponseCode(self, code);
}
KOALA_INTEROP_DIRECT_V2(WebResourceResponse_setResponseCode, Ark_NativePointer, Ark_Int32)
void impl_WebResourceResponse_setResponseIsReady(Ark_NativePointer thisPtr, Ark_Boolean IsReady) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        GetAccessors()->getWebResourceResponseAccessor()->setResponseIsReady(self, IsReady);
}
KOALA_INTEROP_DIRECT_V2(WebResourceResponse_setResponseIsReady, Ark_NativePointer, Ark_Boolean)
Ark_Boolean impl_WebResourceResponse_getResponseIsReady(Ark_NativePointer thisPtr) {
        Ark_WebResourceResponse self = reinterpret_cast<Ark_WebResourceResponse>(thisPtr);
        return GetAccessors()->getWebResourceResponseAccessor()->getResponseIsReady(self);
}
KOALA_INTEROP_DIRECT_1(WebResourceResponse_getResponseIsReady, Ark_Boolean, Ark_NativePointer)
Ark_NativePointer impl_XComponentController_construct() {
        return GetAccessors()->getXComponentControllerAccessor()->construct();
}
KOALA_INTEROP_DIRECT_0(XComponentController_construct, Ark_NativePointer)
Ark_NativePointer impl_XComponentController_getFinalizer() {
        return GetAccessors()->getXComponentControllerAccessor()->getFinalizer();
}
KOALA_INTEROP_DIRECT_0(XComponentController_getFinalizer, Ark_NativePointer)
Ark_String impl_XComponentController_getXComponentSurfaceId(Ark_NativePointer thisPtr) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        return GetAccessors()->getXComponentControllerAccessor()->getXComponentSurfaceId(self);
}
KOALA_INTEROP_1(XComponentController_getXComponentSurfaceId, KStringPtr, Ark_NativePointer)
void impl_XComponentController_setXComponentSurfaceRect(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_SurfaceRect rectValueTemp = SurfaceRect_serializer::read(thisDeserializer);;
        GetAccessors()->getXComponentControllerAccessor()->setXComponentSurfaceRect(self, static_cast<Ark_SurfaceRect*>(&rectValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentController_setXComponentSurfaceRect, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_XComponentController_getXComponentSurfaceRect(Ark_NativePointer thisPtr) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        const auto &retValue = GetAccessors()->getXComponentControllerAccessor()->getXComponentSurfaceRect(self);
        SerializerBase _retSerializer {};
        SurfaceRect_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(XComponentController_getXComponentSurfaceRect, KInteropReturnBuffer, Ark_NativePointer)
void impl_XComponentController_setXComponentSurfaceRotation(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_SurfaceRotationOptions rotationOptionsValueTemp = SurfaceRotationOptions_serializer::read(thisDeserializer);;
        GetAccessors()->getXComponentControllerAccessor()->setXComponentSurfaceRotation(self, static_cast<Ark_SurfaceRotationOptions*>(&rotationOptionsValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentController_setXComponentSurfaceRotation, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_XComponentController_getXComponentSurfaceRotation(Ark_NativePointer thisPtr) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        const auto &retValue = GetAccessors()->getXComponentControllerAccessor()->getXComponentSurfaceRotation(self);
        SerializerBase _retSerializer {};
        SurfaceRotationOptions_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(XComponentController_getXComponentSurfaceRotation, KInteropReturnBuffer, Ark_NativePointer)
void impl_XComponentController_startImageAnalyzer(KVMContext vmContext, Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_ImageAnalyzerConfig configValueTemp = ImageAnalyzerConfig_serializer::read(thisDeserializer);;
        Callback_Opt_Array_String_Void outputArgumentForReturningPromiseValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Opt_Array_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Opt_Array_String error)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Opt_Array_String_Void))))};;
        GetAccessors()->getXComponentControllerAccessor()->startImageAnalyzer(reinterpret_cast<Ark_VMContext>(vmContext), GetAsyncWorker(), self, static_cast<Ark_ImageAnalyzerConfig*>(&configValueTemp), static_cast<Callback_Opt_Array_String_Void*>(&outputArgumentForReturningPromiseValueTemp));
}
KOALA_INTEROP_CTX_V3(XComponentController_startImageAnalyzer, Ark_NativePointer, KSerializerBuffer, int32_t)
void impl_XComponentController_stopImageAnalyzer(Ark_NativePointer thisPtr) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        GetAccessors()->getXComponentControllerAccessor()->stopImageAnalyzer(self);
}
KOALA_INTEROP_DIRECT_V1(XComponentController_stopImageAnalyzer, Ark_NativePointer)
Ark_NativePointer impl_XComponentController_getOnSurfaceCreated(Ark_NativePointer thisPtr) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getXComponentControllerAccessor()->getOnSurfaceCreated(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(XComponentController_getOnSurfaceCreated, Ark_NativePointer, Ark_NativePointer)
void impl_XComponentController_setOnSurfaceCreated(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_String_Void onSurfaceCreatedValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String surfaceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String surfaceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};;
        GetAccessors()->getXComponentControllerAccessor()->setOnSurfaceCreated(self, static_cast<Callback_String_Void*>(&onSurfaceCreatedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentController_setOnSurfaceCreated, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_XComponentController_getOnSurfaceChanged(Ark_NativePointer thisPtr) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getXComponentControllerAccessor()->getOnSurfaceChanged(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(XComponentController_getOnSurfaceChanged, Ark_NativePointer, Ark_NativePointer)
void impl_XComponentController_setOnSurfaceChanged(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_String_SurfaceRect_Void onSurfaceChangedValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String surfaceId, const Ark_SurfaceRect rect)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_SurfaceRect_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String surfaceId, const Ark_SurfaceRect rect)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_SurfaceRect_Void))))};;
        GetAccessors()->getXComponentControllerAccessor()->setOnSurfaceChanged(self, static_cast<Callback_String_SurfaceRect_Void*>(&onSurfaceChangedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentController_setOnSurfaceChanged, Ark_NativePointer, KSerializerBuffer, int32_t)
Ark_NativePointer impl_XComponentController_getOnSurfaceDestroyed(Ark_NativePointer thisPtr) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        [[maybe_unused]] const auto &_api_call_result = GetAccessors()->getXComponentControllerAccessor()->getOnSurfaceDestroyed(self);
        // TODO: Value serialization needs to be implemented
        return {};
}
KOALA_INTEROP_DIRECT_1(XComponentController_getOnSurfaceDestroyed, Ark_NativePointer, Ark_NativePointer)
void impl_XComponentController_setOnSurfaceDestroyed(Ark_NativePointer thisPtr, KSerializerBuffer thisArray, int32_t thisLength) {
        Ark_XComponentController self = reinterpret_cast<Ark_XComponentController>(thisPtr);
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Callback_String_Void onSurfaceDestroyedValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String surfaceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String surfaceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};;
        GetAccessors()->getXComponentControllerAccessor()->setOnSurfaceDestroyed(self, static_cast<Callback_String_Void*>(&onSurfaceDestroyedValueTemp));
}
KOALA_INTEROP_DIRECT_V3(XComponentController_setOnSurfaceDestroyed, Ark_NativePointer, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_GlobalScope_$r(const KStringPtr& value, KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        const Ark_Int32 paramsValueTempTmpBufLength = thisDeserializer.readInt32();
        Array_Opt_Object paramsValueTempTmpBuf = {};
        thisDeserializer.resizeArray<std::decay<decltype(paramsValueTempTmpBuf)>::type,
        std::decay<decltype(*paramsValueTempTmpBuf.array)>::type>(&paramsValueTempTmpBuf, paramsValueTempTmpBufLength);
        for (int paramsValueTempTmpBufBufCounterI = 0; paramsValueTempTmpBufBufCounterI < paramsValueTempTmpBufLength; paramsValueTempTmpBufBufCounterI++) {
            const auto paramsValueTempTmpBufTempBuf_runtimeType = static_cast<Ark_RuntimeType>(thisDeserializer.readInt8());
            Opt_Object paramsValueTempTmpBufTempBuf = {};
            paramsValueTempTmpBufTempBuf.tag = paramsValueTempTmpBufTempBuf_runtimeType == INTEROP_RUNTIME_UNDEFINED ? INTEROP_TAG_UNDEFINED : INTEROP_TAG_OBJECT;
            if ((paramsValueTempTmpBufTempBuf_runtimeType) != (INTEROP_RUNTIME_UNDEFINED)) {
                paramsValueTempTmpBufTempBuf.value = static_cast<Ark_Object>(thisDeserializer.readObject());
            }
            paramsValueTempTmpBuf.array[paramsValueTempTmpBufBufCounterI] = paramsValueTempTmpBufTempBuf;
        }
        Array_Opt_Object paramsValueTemp = paramsValueTempTmpBuf;;
        const auto &retValue = GetAccessors()->getGlobalScopeAccessor()->$r((const Ark_String*) (&value), static_cast<Array_Opt_Object*>(&paramsValueTemp));
        SerializerBase _retSerializer {};
        Resource_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_3(GlobalScope_$r, KInteropReturnBuffer, KStringPtr, KSerializerBuffer, int32_t)
KInteropReturnBuffer impl_GlobalScope_$rawfile(const KStringPtr& value) {
        const auto &retValue = GetAccessors()->getGlobalScopeAccessor()->$rawfile((const Ark_String*) (&value));
        SerializerBase _retSerializer {};
        Resource_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(GlobalScope_$rawfile, KInteropReturnBuffer, KStringPtr)
void impl_GlobalScope_animateTo(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_AnimateParam valueValueTemp = AnimateParam_serializer::read(thisDeserializer);;
        Callback_Void eventValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getGlobalScopeAccessor()->animateTo(static_cast<Ark_AnimateParam*>(&valueValueTemp), static_cast<Callback_Void*>(&eventValueTemp));
}
KOALA_INTEROP_DIRECT_V2(GlobalScope_animateTo, KSerializerBuffer, int32_t)
void impl_GlobalScope_animateToImmediately(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_AnimateParam valueValueTemp = AnimateParam_serializer::read(thisDeserializer);;
        Callback_Void eventValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_Void))))};;
        GetAccessors()->getGlobalScopeAccessor()->animateToImmediately(static_cast<Ark_AnimateParam*>(&valueValueTemp), static_cast<Callback_Void*>(&eventValueTemp));
}
KOALA_INTEROP_DIRECT_V2(GlobalScope_animateToImmediately, KSerializerBuffer, int32_t)
void impl_GlobalScope_cursorControl_restoreDefault() {
        GetAccessors()->getGlobalScopeAccessor()->cursorControl_restoreDefault();
}
KOALA_INTEROP_DIRECT_V0(GlobalScope_cursorControl_restoreDefault)
void impl_GlobalScope_cursorControl_setCursor(Ark_Int32 value) {
        GetAccessors()->getGlobalScopeAccessor()->cursorControl_setCursor(static_cast<Ark_pointer_PointerStyle>(value));
}
KOALA_INTEROP_DIRECT_V1(GlobalScope_cursorControl_setCursor, Ark_Int32)
Ark_Boolean impl_GlobalScope_focusControl_requestFocus(const KStringPtr& value) {
        return GetAccessors()->getGlobalScopeAccessor()->focusControl_requestFocus((const Ark_String*) (&value));
}
KOALA_INTEROP_1(GlobalScope_focusControl_requestFocus, Ark_Boolean, KStringPtr)
KInteropReturnBuffer impl_GlobalScope_getRectangleById(const KStringPtr& id) {
        const auto &retValue = GetAccessors()->getGlobalScopeAccessor()->getRectangleById((const Ark_String*) (&id));
        SerializerBase _retSerializer {};
        ComponentInfo_serializer::write(_retSerializer, retValue);
        return _retSerializer.toReturnBuffer();
}
KOALA_INTEROP_1(GlobalScope_getRectangleById, KInteropReturnBuffer, KStringPtr)
void impl_GlobalScope_postCardAction(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Ark_Object componentValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        Ark_Object actionValueTemp = static_cast<Ark_Object>(thisDeserializer.readObject());;
        GetAccessors()->getGlobalScopeAccessor()->postCardAction(static_cast<Ark_Object*>(&componentValueTemp), static_cast<Ark_Object*>(&actionValueTemp));
}
KOALA_INTEROP_DIRECT_V2(GlobalScope_postCardAction, KSerializerBuffer, int32_t)
void impl_GlobalScope_Profiler_registerVsyncCallback(KSerializerBuffer thisArray, int32_t thisLength) {
        DeserializerBase thisDeserializer(thisArray, thisLength);
        Profiler_Callback_String_Void callback_ValueTemp = {thisDeserializer.readCallbackResource(), reinterpret_cast<void(*)(const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCaller(Kind_Callback_String_Void)))), reinterpret_cast<void(*)(Ark_VMContext vmContext, const Ark_Int32 resourceId, const Ark_String value0)>(thisDeserializer.readPointerOrDefault(reinterpret_cast<Ark_NativePointer>(getManagedCallbackCallerSync(Kind_Callback_String_Void))))};;
        GetAccessors()->getGlobalScopeAccessor()->Profiler_registerVsyncCallback(static_cast<Profiler_Callback_String_Void*>(&callback_ValueTemp));
}
KOALA_INTEROP_DIRECT_V2(GlobalScope_Profiler_registerVsyncCallback, KSerializerBuffer, int32_t)
void impl_GlobalScope_Profiler_unregisterVsyncCallback() {
        GetAccessors()->getGlobalScopeAccessor()->Profiler_unregisterVsyncCallback();
}
KOALA_INTEROP_DIRECT_V0(GlobalScope_Profiler_unregisterVsyncCallback)
Ark_Number impl_GlobalScope_px2vp(KInteropNumber value) {
        return GetAccessors()->getGlobalScopeAccessor()->px2vp((const Ark_Number*) (&value));
}
KOALA_INTEROP_DIRECT_1(GlobalScope_px2vp, KInteropNumber, KInteropNumber)
void impl_GlobalScope_setAppBgColor(const KStringPtr& value) {
        GetAccessors()->getGlobalScopeAccessor()->setAppBgColor((const Ark_String*) (&value));
}
KOALA_INTEROP_V1(GlobalScope_setAppBgColor, KStringPtr)
Ark_Number impl_GlobalScope_vp2px(KInteropNumber value) {
        return GetAccessors()->getGlobalScopeAccessor()->vp2px((const Ark_Number*) (&value));
}
KOALA_INTEROP_DIRECT_1(GlobalScope_vp2px, KInteropNumber, KInteropNumber)
