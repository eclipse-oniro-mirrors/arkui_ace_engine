/*
 * Copyright (c) 2024-2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


// WARNING! THIS FILE IS AUTO-GENERATED, DO NOT MAKE CHANGES, THEY WILL BE LOST ON NEXT GENERATION!

import { AttributeModifier } from "#handwritten"
import { ArkAlphabetIndexerComponent, AlphabetIndexerAttribute } from "./../../component/alphabetIndexer"
import { ArkCommonMethodStyle, CommonMethod, ArkCommonShapeMethodStyle, CommonShapeMethod, ArkScrollableCommonMethodStyle, ScrollableCommonMethod } from "./../../component/common"
import { AlphabetIndexerModifier } from "./../../AlphabetIndexerModifier"
import { ArkAnimatorComponent, AnimatorAttribute } from "./../../component/animator"
import { AnimatorModifier } from "./../../AnimatorModifier"
import { ArkBadgeComponent, BadgeAttribute } from "./../../component/badge"
import { BadgeModifier } from "./../../BadgeModifier"
import { ArkBlankComponent, BlankAttribute } from "./../../component/blank"
import { BlankModifier } from "./../../BlankModifier"
import { ArkButtonComponent, ButtonAttribute } from "./../../component/button"
import { ButtonModifier } from "./../../ButtonModifier"
import { ArkCalendarPickerComponent, CalendarPickerAttribute } from "./../../component/calendarPicker"
import { CalendarPickerModifier } from "./../../CalendarPickerModifier"
import { ArkCanvasComponent, CanvasAttribute } from "./../../component/canvas"
import { CanvasModifier } from "./../../CanvasModifier"
import { ArkCheckboxComponent, CheckboxAttribute } from "./../../component/checkbox"
import { CheckboxModifier } from "./../../CheckboxModifier"
import { ArkCheckboxGroupComponent, CheckboxGroupAttribute } from "./../../component/checkboxgroup"
import { CheckboxGroupModifier } from "./../../CheckboxGroupModifier"
import { ArkCircleComponent, CircleAttribute, CircleOptions, ArkCirclePeer } from './../../component/circle';
import { CircleModifier } from "./../../CircleModifier"
import { ArkColumnComponent, ColumnAttribute } from "./../../component/column"
import { ColumnModifier } from "./../../ColumnModifier"
import { ArkColumnSplitComponent, ColumnSplitAttribute } from "./../../component/columnSplit"
import { ColumnSplitModifier } from "./../../ColumnSplitModifier"
import { ArkCommonMethodComponent, CommonMethod, ArkCommonShapeMethodComponent, CommonShapeMethod, ArkScrollableCommonMethodComponent, ScrollableCommonMethod } from "./../../component/common"
import { CommonMethodModifier } from "./../../CommonMethodModifier"
import { CommonShapeMethodModifier } from "./../../CommonShapeMethodModifier"
import { ScrollableCommonMethodModifier } from "./../../ScrollableCommonMethodModifier"
import { ArkComponent3DComponent, Component3DAttribute } from "./../../component/component3d"
import { Component3DModifier } from "./../../Component3DModifier"
import { ArkContainerSpanComponent, ContainerSpanAttribute } from "./../../component/containerSpan"
import { ContainerSpanModifier } from "./../../ContainerSpanModifier"
import { ArkCounterComponent, CounterAttribute } from "./../../component/counter"
import { CounterModifier } from "./../../CounterModifier"
import { ArkDataPanelComponent, DataPanelAttribute } from "./../../component/dataPanel"
import { DataPanelModifier } from "./../../DataPanelModifier"
import { ArkDatePickerComponent, DatePickerAttribute, DatePickerOptions, ArkDatePickerPeer } from "./../../component/datePicker"
import { DatePickerModifier } from "./../../DatePickerModifier"
import { ArkDividerComponent, DividerAttribute } from "./../../component/divider"
import { DividerModifier } from "./../../DividerModifier"
import { ArkEffectComponentComponent, EffectComponentAttribute } from "./../../component/effectComponent"
import { EffectComponentModifier } from "./../../EffectComponentModifier"
import { ArkEllipseComponent, EllipseAttribute, EllipseOptions, ArkEllipsePeer } from './../../component/ellipse';
import { EllipseModifier } from "./../../EllipseModifier"
import { ArkEmbeddedComponentComponent, EmbeddedComponentAttribute } from "./../../component/embeddedComponent"
import { EmbeddedComponentModifier } from "./../../EmbeddedComponentModifier"
import { ArkFlexComponent, FlexAttribute } from "./../../component/flex"
import { FlexModifier } from "./../../FlexModifier"
import { ArkFlowItemComponent, FlowItemAttribute } from "./../../component/flowItem"
import { FlowItemModifier } from "./../../FlowItemModifier"
import { ArkFolderStackComponent, FolderStackAttribute } from "./../../component/folderStack"
import { FolderStackModifier } from "./../../FolderStackModifier"
import { ArkFormComponentComponent, FormComponentAttribute } from "./../../component/formComponent"
import { FormComponentModifier } from "./../../FormComponentModifier"
import { ArkFormLinkComponent, FormLinkAttribute } from "./../../component/formLink"
import { FormLinkModifier } from "./../../FormLinkModifier"
import { ArkGaugeComponent, GaugeAttribute } from "./../../component/gauge"
import { GaugeModifier } from "./../../GaugeModifier"
import { ArkGridComponent, GridAttribute } from "./../../component/grid"
import { GridModifier } from "./../../GridModifier"
import { ArkGridColComponent, GridColAttribute } from "./../../component/gridCol"
import { GridColModifier } from "./../../GridColModifier"
import { ArkGridItemComponent, GridItemAttribute } from "./../../component/gridItem"
import { GridItemModifier } from "./../../GridItemModifier"
import { ArkGridRowComponent, GridRowAttribute } from "./../../component/gridRow"
import { GridRowModifier } from "./../../GridRowModifier"
import { ArkHyperlinkComponent, HyperlinkAttribute } from "./../../component/hyperlink"
import { HyperlinkModifier } from "./../../HyperlinkModifier"
import { ArkImageComponent, ImageAttribute } from "./../../component/image"
import { ImageModifier } from "./../../ImageModifier"
import { ArkImageAnimatorComponent, ImageAnimatorAttribute } from "./../../component/imageAnimator"
import { ImageAnimatorModifier } from "./../../ImageAnimatorModifier"
import { ArkImageSpanComponent, ImageSpanAttribute } from "./../../component/imageSpan"
import { ArkBaseSpanStyle, BaseSpan } from "./../../component/span"
import { ImageSpanModifier } from "./../../ImageSpanModifier"
import { ArkIndicatorComponentComponent, IndicatorComponentAttribute } from "./../../component/indicatorcomponent"
import { IndicatorComponentModifier } from "./../../IndicatorComponentModifier"
import { ArkLineComponent, LineAttribute,ArkLinePeer,LineOptions} from './../../component/line';
import { LineModifier } from "./../../LineModifier"
import { ArkLinearIndicatorComponent, LinearIndicatorAttribute } from "./../../component/linearindicator"
import { LinearIndicatorModifier } from "./../../LinearIndicatorModifier"
import { ArkListComponent, ListAttribute } from "./../../component/list"
import { ListModifier } from "./../../ListModifier"
import { ArkListItemComponent, ListItemAttribute } from "./../../component/listItem"
import { ListItemModifier } from "./../../ListItemModifier"
import { ArkListItemGroupComponent, ListItemGroupAttribute } from "./../../component/listItemGroup"
import { ListItemGroupModifier } from "./../../ListItemGroupModifier"
import { ArkLoadingProgressComponent, LoadingProgressAttribute } from "./../../component/loadingProgress"
import { LoadingProgressModifier } from "./../../LoadingProgressModifier"
import { ArkMarqueeComponent, MarqueeAttribute } from "./../../component/marquee"
import { MarqueeModifier } from "./../../MarqueeModifier"
import { ArkMediaCachedImageComponent, MediaCachedImageAttribute } from "./../../component/mediaCachedImage"
import { ArkImageStyle, ImageAttribute } from "./../../component/image"
import { MediaCachedImageModifier } from "./../../MediaCachedImageModifier"
import { ArkMenuComponent, MenuAttribute } from "./../../component/menu"
import { MenuModifier } from "./../../MenuModifier"
import { ArkMenuItemComponent, MenuItemAttribute } from "./../../component/menuItem"
import { MenuItemModifier } from "./../../MenuItemModifier"
import { ArkMenuItemGroupComponent, MenuItemGroupAttribute } from "./../../component/menuItemGroup"
import { MenuItemGroupModifier } from "./../../MenuItemGroupModifier"
import { CalendarPickerModifier } from "./../../CalendarPickerModifier"
import { ArkNavDestinationComponent, NavDestinationAttribute } from "./../../component/navDestination"
import { NavDestinationModifier } from "./../../NavDestinationModifier"
import { ArkNavigationComponent, NavigationAttribute } from "./../../component/navigation"
import { NavigationModifier } from "./../../NavigationModifier"
import { ArkNodeContainerComponent, NodeContainerAttribute } from './../../component/nodeContainer';
import { NodeContainerModifier } from "./../../NodeContainerModifier"
import { ArkPathComponent, PathAttribute, PathOptions, ArkPathPeer } from "./../../component/path"
import { PathModifier } from "./../../PathModifier"
import { ArkPatternLockComponent, PatternLockAttribute } from "./../../component/patternLock"
import { PatternLockModifier } from "./../../PatternLockModifier"
import { ArkPluginComponentComponent, PluginComponentAttribute } from "./../../component/pluginComponent"
import { PluginComponentModifier } from "./../../PluginComponentModifier"
import { ArkPolygonComponent, PolygonAttribute, ArkPolygonPeer, PolygonOptions } from './../../component/polygon';
import { PolygonModifier } from "./../../PolygonModifier"
import { ArkPolylineComponent, PolylineAttribute, ArkPolylinePeer, PolylineOptions } from './../../component/polyline';
import { PolylineModifier } from "./../../PolylineModifier"
import { ArkProgressComponent, ProgressAttribute, ProgressOptions } from "./../../component/progress"
import { ProgressModifier } from "./../../ProgressModifier"
import { ArkQRCodeComponent, QRCodeAttribute } from "./../../component/qrcode"
import { QRCodeModifier } from "./../../QRCodeModifier"
import { ArkRadioComponent, RadioAttribute } from "./../../component/radio"
import { RadioModifier } from "./../../RadioModifier"
import { ArkRatingComponent, RatingAttribute } from "./../../component/rating"
import { RatingModifier } from "./../../RatingModifier"
import { ArkRectComponent, RectAttribute, ArkRectPeer, RectOptions } from "./../../component/rect"
import { RectModifier } from "./../../RectModifier"
import { ArkRefreshComponent, RefreshAttribute } from "./../../component/refresh"
import { RefreshModifier } from "./../../RefreshModifier"
import { ArkRelativeContainerComponent, RelativeContainerAttribute } from "./../../component/relativeContainer"
import { RelativeContainerModifier } from "./../../RelativeContainerModifier"
import { ArkRemoteWindowComponent, RemoteWindowAttribute } from "./../../component/remoteWindow"
import { RemoteWindowModifier } from "./../../RemoteWindowModifier"
import { ArkRichEditorComponent, RichEditorAttribute } from "./../../component/richEditor"
import { RichEditorModifier } from "./../../RichEditorModifier"
import { ArkRichTextComponent, RichTextAttribute } from "./../../component/richText"
import { RichTextModifier } from "./../../RichTextModifier"
import { ArkRootSceneComponent, RootSceneAttribute } from "./../../component/rootScene"
import { RootSceneModifier } from "./../../RootSceneModifier"
import { ArkRowComponent, RowAttribute } from "./../../component/row"
import { RowModifier } from "./../../RowModifier"
import { ArkRowSplitComponent, RowSplitAttribute } from "./../../component/rowSplit"
import { RowSplitModifier } from "./../../RowSplitModifier"
import { ArkScreenComponent, ScreenAttribute } from "./../../component/screen"
import { ScreenModifier } from "./../../ScreenModifier"
import { ArkScrollComponent, ScrollAttribute } from "./../../component/scroll"
import { ScrollModifier } from "./../../ScrollModifier"
import { ArkScrollBarComponent, ScrollBarAttribute } from "./../../component/scrollBar"
import { ScrollBarModifier } from "./../../ScrollBarModifier"
import { ArkSearchComponent, SearchAttribute } from "./../../component/search"
import { SearchModifier } from "./../../SearchModifier"
import { ArkSelectComponent, SelectAttribute } from "./../../component/select"
import { SelectModifier } from "./../../SelectModifier"
import { ArkShapeComponent, ShapeAttribute, ArkShapePeer } from "./../../component/shape"
import { ShapeModifier } from "./../../ShapeModifier"
import { ArkSideBarContainerComponent, SideBarContainerAttribute } from "./../../component/sidebar"
import { SideBarContainerModifier } from "./../../SideBarContainerModifier"
import { ArkSliderComponent, SliderAttribute } from "./../../component/slider"
import { SliderModifier } from "./../../SliderModifier"
import { ArkBaseSpanComponent, BaseSpan, ArkSpanComponent, SpanAttribute } from "./../../component/span"
import { BaseSpanModifier } from "./../../BaseSpanModifier"
import { SpanModifier } from "./../../SpanModifier"
import { ArkStackComponent, StackAttribute } from "./../../component/stack"
import { StackModifier } from "./../../StackModifier"
import { ArkStepperComponent, StepperAttribute } from "./../../component/stepper"
import { StepperModifier } from "./../../StepperModifier"
import { ArkStepperItemComponent, StepperItemAttribute } from "./../../component/stepperItem"
import { StepperItemModifier } from "./../../StepperItemModifier"
import { ArkSwiperComponent, SwiperAttribute } from "./../../component/swiper"
import { SwiperModifier } from "./../../SwiperModifier"
import { ArkSymbolGlyphComponent, SymbolGlyphAttribute } from "./../../component/symbolglyph"
import { SymbolGlyphModifier } from "./../../SymbolGlyphModifier"
import { ArkSymbolSpanComponent, SymbolSpanAttribute } from "./../../component/symbolSpan"
import { SymbolSpanModifier } from "./../../SymbolSpanModifier"
import { ArkTabContentComponent, TabContentAttribute } from "./../../component/tabContent"
import { TabContentModifier } from "./../../TabContentModifier"
import { ArkTabsComponent, TabsAttribute } from "./../../component/tabs"
import { TabsModifier } from "./../../TabsModifier"
import { ArkTextComponent, TextAttribute } from "./../../component/text"
import { TextModifier } from "./../../TextModifier"
import { ArkTextAreaComponent, TextAreaAttribute } from "./../../component/textArea"
import { TextAreaModifier } from "./../../TextAreaModifier"
import { ArkTextClockComponent, TextClockAttribute } from "./../../component/textClock"
import { TextClockModifier } from "./../../TextClockModifier"
import { ArkTextInputComponent, TextInputAttribute } from "./../../component/textInput"
import { TextInputModifier } from "./../../TextInputModifier"
import { ArkTextPickerComponent, TextPickerAttribute, TextPickerOptions, ArkTextPickerPeer } from "./../../component/textPicker"
import { TextPickerModifier } from "./../../TextPickerModifier"
import { ArkTextTimerComponent, TextTimerAttribute } from "./../../component/textTimer"
import { TextTimerModifier } from "./../../TextTimerModifier"
import { ArkTimePickerComponent, TimePickerAttribute, TimePickerOptions, ArkTimePickerPeer } from "./../../component/timePicker"
import { TimePickerModifier } from "./../../TimePickerModifier"
import { ArkToggleComponent, ToggleAttribute } from "./../../component/toggle"
import { ToggleModifier } from "./../../ToggleModifier"
import { ArkToolBarItemComponent, ToolBarItemAttribute } from "./../../component/toolbar"
import { ToolBarItemModifier } from "./../../ToolBarItemModifier"
import { ArkUIExtensionComponentComponent, UIExtensionComponentAttribute } from "./../../component/uiExtensionComponent"
import { UIExtensionComponentModifier } from "./../../UIExtensionComponentModifier"
import { ArkVideoComponent, VideoAttribute, ArkVideoPeer, VideoOptions } from './../../component/video';
import { VideoModifier } from "./../../VideoModifier"
import { ArkWaterFlowComponent, WaterFlowAttribute } from "./../../component/waterFlow"
import { WaterFlowModifier } from "./../../WaterFlowModifier"
import { ArkWebComponent, WebAttribute } from "./../../component/web"
import { WebModifier } from "./../../WebModifier"
import { ArkWindowSceneComponent, WindowSceneAttribute } from "./../../component/windowScene"
import { WindowSceneModifier } from "./../../WindowSceneModifier"
import { ArkWithThemeComponent, WithThemeAttribute } from "./../../component/withTheme"
import { WithThemeModifier } from "./../../WithThemeModifier"
import { ArkXComponentComponent, XComponentAttribute } from "./../../component/xcomponent"
import { XComponentModifier } from "./../../XComponentModifier"
import { ArkRootComponent, Root, ArkComponentRootComponent, ComponentRoot, ArkCustomBuilderRootComponent, CustomBuilderRoot, ArkCustomLayoutRootComponent, CustomLayoutRoot } from "./../../component/idlize"
import { RootModifier } from "./../../RootModifier"
import { ComponentRootModifier } from "./../../ComponentRootModifier"
import { CustomBuilderRootModifier } from "./../../CustomBuilderRootModifier"
import { CustomLayoutRootModifier } from "./../../CustomLayoutRootModifier"
import { applyAttributeModifierBase, applyCommonModifier, applyAttributeModifierNoCommonMethod } from  './ArkCommonModifier';
import { CommonModifier } from '../../CommonModifier';
import { RichEditorOptions, RichEditorStyledStringOptions } from  '../../framework';
import { ArkTextPeer, TextOptions } from   '../../framework';
import { Resource } from 'global.resource';
import { ResourceStr } from '../../framework';
import { PixelMap } from "#external"
import { ArkImageSpanPeer } from  '../../framework';
import { ArkImagePeer, ImageContent } from  '../../framework';
import { ArkSymbolGlyphPeer } from  '../../framework';
import { ArkSpanPeer } from  '../../framework';
import { ArkSymbolSpanPeer } from  '../../framework';
import { ArkTextAreaPeer, TextAreaOptions } from  '../../framework';
import { ArkMarqueePeer, MarqueeOptions } from  '../../framework';
import { ArkHyperlinkPeer } from  '../../framework';
import { ArkSearchPeer, SearchOptions } from  '../../framework';
import { ArkCalendarPickerPeer, CalendarOptions } from  '../../framework';
import { ArkTextInputPeer, TextInputOptions } from  '../../framework';
import { RuntimeType, runtimeType } from "@koalaui/interop"
import { ArkPasteButtonComponent, PasteButtonAttribute } from "./../../component/pasteButton"
import { ArkSaveButtonComponent, SaveButtonAttribute } from "./../../component/saveButton"
import { ArkSecurityComponentMethodComponent, SecurityComponentMethod } from "./../../component/securityComponent"
import { default as image } from "@ohos.multimedia.image"
import { DrawableDescriptor } from "../../framework/ohos.arkui.drawableDescriptor"
import { ImageAIOptions, DataPanelOptions, GaugeOptions, PatternLockController, TextTimerOptions, TextClockOptions } from "../../framework"
import { ArkUIAniModule } from 'arkui.ani';
import { KPointer } from '@koalaui/interop';

export function hookAlphabetIndexerAttributeModifier(component: ArkAlphabetIndexerComponent, modifier: AttributeModifier<AlphabetIndexerAttribute> | AttributeModifier<CommonMethod> | undefined):void {
     if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): AlphabetIndexerModifier => {
        let isAlphabetIndexerModifier: boolean = modifier instanceof AlphabetIndexerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new AlphabetIndexerModifier();
        if (isAlphabetIndexerModifier) {
            let AlphabetIndexerModifier = modifier as object as AlphabetIndexerModifier;
            initModifier.mergeModifier(AlphabetIndexerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkAlphabetIndexerComponent => {
        let componentNew: ArkAlphabetIndexerComponent = new ArkAlphabetIndexerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<AlphabetIndexerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookAnimatorAttributeModifier(componenet: ArkAnimatorComponent, value: AttributeModifier<AnimatorAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookBadgeAttributeModifier(componenet: ArkBadgeComponent, value: AttributeModifier<BadgeAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookCanvasAttributeModifier(componenet: ArkCanvasComponent, value: AttributeModifier<CanvasAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookCircleAttributeModifier(component: ArkCircleComponent, modifier: AttributeModifier<CircleAttribute> | AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {
        if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): CircleModifier => {
        let isCircleModifier: boolean = modifier instanceof CircleModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new CircleModifier();
        if (isCircleModifier) {
            let circleModifier = modifier as object as CircleModifier;
            initModifier.mergeModifier(circleModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let options_casted: CircleOptions | undefined = undefined
        const param1_type = runtimeType(params[0])
        if (RuntimeType.OBJECT == param1_type) {
            options_casted = params[0] as CircleOptions
        }
        let peer: ArkCirclePeer = component.getPeer() as Object as ArkCirclePeer;
        peer?.setCircleOptionsAttribute(options_casted)
    };
    let updaterReceiver = (): ArkCircleComponent => {
        let componentNew: ArkCircleComponent = new ArkCircleComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<CircleAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookCommonMethodAttributeModifier(componenet: ArkCommonMethodComponent, value: AttributeModifier<CommonMethod> | undefined):void {}
export function hookCommonShapeMethodAttributeModifier(componenet: ArkCommonShapeMethodComponent, value: AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookScrollableCommonMethodAttributeModifier(componenet: ArkScrollableCommonMethodComponent, value: AttributeModifier<ScrollableCommonMethod> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookComponent3DAttributeModifier(component: ArkComponent3DComponent, modifier: AttributeModifier<Component3DAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): Component3DModifier => {
        let isComponent3DModifier: boolean = modifier instanceof Component3DModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new Component3DModifier();
        if (isComponent3DModifier) {
            let component3DModifier = modifier as object as Component3DModifier;
            initModifier.mergeModifier(component3DModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkComponent3DComponent => {
        let componentNew: ArkComponent3DComponent = new ArkComponent3DComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<Component3DAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookEffectComponentAttributeModifier(componenet: ArkEffectComponentComponent, value: AttributeModifier<EffectComponentAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookEllipseAttributeModifier(component: ArkEllipseComponent, modifier: AttributeModifier<EllipseAttribute> | AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {
      if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): EllipseModifier => {
        let isEllipseModifier: boolean = modifier instanceof EllipseModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new EllipseModifier();
        if (isEllipseModifier) {
            let ellipseModifier = modifier as object as EllipseModifier;
            initModifier.mergeModifier(ellipseModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let options_casted: EllipseOptions | undefined = undefined
        const param1_type = runtimeType(params[0])
        if (RuntimeType.OBJECT == param1_type) {
            options_casted = params[0] as EllipseOptions
        }
        let peer: ArkEllipsePeer = component.getPeer() as Object as ArkEllipsePeer;
        peer?.setEllipseOptionsAttribute(options_casted)
    };
    let updaterReceiver = (): ArkEllipseComponent => {
        let componentNew: ArkEllipseComponent = new ArkEllipseComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<EllipseAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookEmbeddedComponentAttributeModifier(componenet: ArkEmbeddedComponentComponent, value: AttributeModifier<EmbeddedComponentAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookFlowItemAttributeModifier(componenet: ArkFlowItemComponent, value: AttributeModifier<FlowItemAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookFormLinkAttributeModifier(componenet: ArkFormLinkComponent, value: AttributeModifier<FormLinkAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookIndicatorComponentAttributeModifier(componenet: ArkIndicatorComponentComponent, value: AttributeModifier<IndicatorComponentAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookLineAttributeModifier(component: ArkLineComponent, modifier: AttributeModifier<LineAttribute> | AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {
        if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): LineModifier => {
        let isLineModifier: boolean = modifier instanceof LineModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new LineModifier();
        if (isLineModifier) {
            let lineModifier = modifier as object as LineModifier;
            initModifier.mergeModifier(lineModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let options_casted: LineOptions | undefined = undefined
        const param1_type = runtimeType(params[0])
        if (RuntimeType.OBJECT == param1_type) {
            options_casted = params[0] as LineOptions
        }
        let peer: ArkLinePeer = component.getPeer() as Object as ArkLinePeer;
        peer?.setLineOptionsAttribute(options_casted)
    };
    let updaterReceiver = (): ArkLineComponent => {
        let componentNew: ArkLineComponent = new ArkLineComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<LineAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookLinearIndicatorAttributeModifier(componenet: ArkLinearIndicatorComponent, value: AttributeModifier<LinearIndicatorAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookMediaCachedImageAttributeModifier(componenet: ArkMediaCachedImageComponent, value: AttributeModifier<MediaCachedImageAttribute> | AttributeModifier<ImageAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookNavDestinationAttributeModifier(component: ArkNavDestinationComponent, modifier: AttributeModifier<NavDestinationAttribute> | AttributeModifier<CommonMethod> | undefined):void {
        if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): NavDestinationModifier => {
        let isNavDestinationModifier: boolean = modifier instanceof NavDestinationModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new NavDestinationModifier();
        if (isNavDestinationModifier) {
            let navDestinationModifier = modifier as object as NavDestinationModifier;
            initModifier.mergeModifier(navDestinationModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkNavDestinationComponent => {
        let componentNew: ArkNavDestinationComponent = new ArkNavDestinationComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<NavDestinationAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookNavigationAttributeModifier(component: ArkNavigationComponent, modifier: AttributeModifier<NavigationAttribute> | AttributeModifier<CommonMethod> | undefined):void {
        if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): NavigationModifier => {
        let isNavigationModifier: boolean = modifier instanceof NavigationModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new NavigationModifier();
        if (isNavigationModifier) {
            let navigationModifier = modifier as object as NavigationModifier;
            initModifier.mergeModifier(navigationModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkNavigationComponent => {
        let componentNew: ArkNavigationComponent = new ArkNavigationComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<NavigationAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookNodeContainerAttributeModifier(componenet: ArkNodeContainerComponent, value: AttributeModifier<NodeContainerAttribute> | AttributeModifier<CommonMethod> | undefined):void {}

export function hookPathAttributeModifier(component: ArkPathComponent, modifier: AttributeModifier<PathAttribute> | AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {
        if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): PathModifier => {
        let isPathModifier: boolean = modifier instanceof PathModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new PathModifier();
        if (isPathModifier) {
            let pathModifier = modifier as object as PathModifier;
            initModifier.mergeModifier(pathModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let options_casted: PathOptions | undefined = undefined
        const param1_type = runtimeType(params[0])
        if (RuntimeType.OBJECT == param1_type) {
            options_casted = params[0] as PathOptions
        }
        let peer: ArkPathPeer = component.getPeer() as Object as ArkPathPeer;
        peer?.setPathOptionsAttribute(options_casted)
    };
    let updaterReceiver = (): ArkPathComponent => {
        let componentNew: ArkPathComponent = new ArkPathComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<PathAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookPluginComponentAttributeModifier(componenet: ArkPluginComponentComponent, value: AttributeModifier<PluginComponentAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookPolygonAttributeModifier(component: ArkPolygonComponent, modifier: AttributeModifier<PolygonAttribute> | AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {
     if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): PolygonModifier => {
        let isPolygonModifier: boolean = modifier instanceof PolygonModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new PolygonModifier();
        if (isPolygonModifier) {
            let polygonModifier = modifier as object as PolygonModifier;
            initModifier.mergeModifier(polygonModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let options_casted: PolygonOptions | undefined = undefined
        const param1_type = runtimeType(params[0])
        if (RuntimeType.OBJECT == param1_type) {
            options_casted = params[0] as PolygonOptions
        }
        let peer: ArkPolygonPeer = component.getPeer() as Object as ArkPolygonPeer;
        peer?.setPolygonOptionsAttribute(options_casted)
    };
    let updaterReceiver = (): ArkPolygonComponent => {
        let componentNew: ArkPolygonComponent = new ArkPolygonComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<PolygonAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookPolylineAttributeModifier(component: ArkPolylineComponent, modifier: AttributeModifier<PolylineAttribute> | AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): PolylineModifier => {
        let isPolylineModifier: boolean = modifier instanceof PolylineModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new PolylineModifier();
        if (isPolylineModifier) {
            let polylineModifier = modifier as object as PolylineModifier;
            initModifier.mergeModifier(polylineModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let options_casted: PolylineOptions | undefined = undefined
        const param1_type = runtimeType(params[0])
        if (RuntimeType.OBJECT == param1_type) {
            options_casted = params[0] as PolylineOptions
        }
        let peer: ArkPolylinePeer = component.getPeer() as Object as ArkPolylinePeer;
        peer?.setPolylineOptionsAttribute(options_casted)
    };
    let updaterReceiver = (): ArkPolylineComponent => {
        let componentNew: ArkPolylineComponent = new ArkPolylineComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<PolylineAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookRectAttributeModifier(component: ArkRectComponent, modifier: AttributeModifier<RectAttribute> | AttributeModifier<CommonShapeMethod> | AttributeModifier<CommonMethod> | undefined):void {
     if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): RectModifier => {
        let isRectModifier: boolean = modifier instanceof RectModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RectModifier();
        if (isRectModifier) {
            let rectModifier = modifier as object as RectModifier;
            initModifier.mergeModifier(rectModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let options_casted: RectOptions | undefined = undefined
        const param1_type = runtimeType(params[0])
        if (RuntimeType.OBJECT == param1_type) {
            options_casted = params[0] as RectOptions
        }
        let peer: ArkRectPeer = component.getPeer() as Object as ArkRectPeer;
        peer?.setRectOptionsAttribute(options_casted)
    };
    let updaterReceiver = (): ArkRectComponent => {
        let componentNew: ArkRectComponent = new ArkRectComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RectAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookRemoteWindowAttributeModifier(componenet: ArkRemoteWindowComponent, value: AttributeModifier<RemoteWindowAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookRichTextAttributeModifier(componenet: ArkRichTextComponent, value: AttributeModifier<RichTextAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookRootSceneAttributeModifier(componenet: ArkRootSceneComponent, value: AttributeModifier<RootSceneAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookScreenAttributeModifier(componenet: ArkScreenComponent, value: AttributeModifier<ScreenAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookScrollBarAttributeModifier(componenet: ArkScrollBarComponent, value: AttributeModifier<ScrollBarAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookShapeAttributeModifier(component: ArkShapeComponent, modifier: AttributeModifier<ShapeAttribute> | AttributeModifier<CommonMethod> | undefined):void {
     if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ShapeModifier => {
        let isShapeModifier: boolean = modifier instanceof ShapeModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ShapeModifier();
        if (isShapeModifier) {
            let shapeModifier = modifier as object as ShapeModifier;
            initModifier.mergeModifier(shapeModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let peer: ArkShapePeer = component.getPeer() as Object as ArkShapePeer;
        const param1_type = runtimeType(params[0])
        if ((RuntimeType.UNDEFINED) !== param1_type) {
            const pixelMap = params[0] as PixelMap;
            ArkUIAniModule._Shape_Transfer_PixelMap(peer.getPeerPtr() as KPointer, pixelMap);
        } else {
          // peer?.setShapeOptions1Attribute();
        }
    };
    let updaterReceiver = (): ArkShapeComponent => {
        let componentNew: ArkShapeComponent = new ArkShapeComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ShapeAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookSideBarContainerAttributeModifier(component: ArkSideBarContainerComponent, modifier: AttributeModifier<SideBarContainerAttribute> | AttributeModifier<CommonMethod> | undefined):void {
      if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): SideBarContainerModifier => {
        let isSideBarContainerModifier: boolean = modifier instanceof SideBarContainerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SideBarContainerModifier();
        if (isSideBarContainerModifier) {
            let sideBarContainerModifier = modifier as object as SideBarContainerModifier;
            initModifier.mergeModifier(sideBarContainerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkSideBarContainerComponent => {
        let componentNew: ArkSideBarContainerComponent = new ArkSideBarContainerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SideBarContainerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookBaseSpanAttributeModifier(componenet: ArkBaseSpanComponent, value: AttributeModifier<BaseSpan> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookStepperAttributeModifier(componenet: ArkStepperComponent, value: AttributeModifier<StepperAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookStepperItemAttributeModifier(component: ArkStepperItemComponent, modifier: AttributeModifier<StepperItemAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): StepperItemModifier => {
        let isStepperItemModifier: boolean = modifier instanceof StepperItemModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new StepperItemModifier();
        if (isStepperItemModifier) {
            let stepperItemModifier = modifier as object as StepperItemModifier;
            initModifier.mergeModifier(stepperItemModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkStepperItemComponent => {
        let componentNew: ArkStepperItemComponent = new ArkStepperItemComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<StepperItemAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookSwiperAttributeModifier(component: ArkSwiperComponent, modifier: AttributeModifier<SwiperAttribute> | AttributeModifier<CommonMethod> | undefined):void {
        if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): SwiperModifier => {
        let isSwiperModifier: boolean = modifier instanceof SwiperModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SwiperModifier();
        if (isSwiperModifier) {
            let swiperModifier = modifier as object as SwiperModifier;
            initModifier.mergeModifier(swiperModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkSwiperComponent => {
        let componentNew: ArkSwiperComponent = new ArkSwiperComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SwiperAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookTabContentAttributeModifier(component: ArkTabContentComponent, modifier: AttributeModifier<TabContentAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TabContentModifier => {
        let isTabContentModifier: boolean = modifier instanceof TabContentModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TabContentModifier();
        if (isTabContentModifier) {
            let TabContentModifier = modifier as object as TabContentModifier;
            initModifier.mergeModifier(TabContentModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkTabContentComponent => {
        let componentNew: ArkTabContentComponent = new ArkTabContentComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TabContentAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookTabsAttributeModifier(component: ArkTabsComponent, modifier: AttributeModifier<TabsAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TabsModifier => {
        let isTabsModifier: boolean = modifier instanceof TabsModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TabsModifier();
        if (isTabsModifier) {
            let TabsModifier = modifier as object as TabsModifier;
            initModifier.mergeModifier(TabsModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkTabsComponent => {
        let componentNew: ArkTabsComponent = new ArkTabsComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TabsAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookToolBarItemAttributeModifier(componenet: ArkToolBarItemComponent, value: AttributeModifier<ToolBarItemAttribute> | undefined):void {}
export function hookUIExtensionComponentAttributeModifier(componenet: ArkUIExtensionComponentComponent, value: AttributeModifier<UIExtensionComponentAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookVideoAttributeModifier(component: ArkVideoComponent, modifier: AttributeModifier<VideoAttribute> | AttributeModifier<CommonMethod> | undefined):void {
     if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): VideoModifier => {
        let isVideoModifier: boolean = modifier instanceof VideoModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new VideoModifier();
        if (isVideoModifier) {
            let videoModifier = modifier as object as VideoModifier;
            initModifier.mergeModifier(videoModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            return;
        }
        let peer: ArkVideoPeer = component.getPeer() as Object as ArkVideoPeer;
        const param1_type = runtimeType(params[0])
        if ((RuntimeType.UNDEFINED) !== param1_type) {
            const options_casted = params[0] as VideoOptions;
            // hookSetVideoOptionsWithPeer(peer, options_casted);
        }
    };
    let updaterReceiver = (): ArkVideoComponent => {
        let componentNew: ArkVideoComponent = new ArkVideoComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<VideoAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookWebAttributeModifier(componenet: ArkWebComponent, value: AttributeModifier<WebAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookWindowSceneAttributeModifier(componenet: ArkWindowSceneComponent, value: AttributeModifier<WindowSceneAttribute> | AttributeModifier<CommonMethod> | undefined):void {}
export function hookWithThemeAttributeModifier(componenet: ArkWithThemeComponent, value: AttributeModifier<WithThemeAttribute> | undefined):void {}
export function hookXComponentAttributeModifier(component: ArkXComponentComponent, modifier: AttributeModifier<XComponentAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): XComponentModifier => {
        let isXComponentModifier: boolean = modifier instanceof XComponentModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new XComponentModifier();
        if (isXComponentModifier) {
            let xcomponentModifier = modifier as object as XComponentModifier;
            initModifier.mergeModifier(xcomponentModifier);
        }
        component.getPeer().attributeSet = initModifier;
        return initModifier;
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkXComponentComponent => {
        let componentNew: ArkXComponentComponent = new ArkXComponentComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<XComponentAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookRootAttributeModifier(componenet: ArkRootComponent, value: AttributeModifier<Root> | undefined):void {}
export function hookComponentRootAttributeModifier(componenet: ArkComponentRootComponent, value: AttributeModifier<ComponentRoot> | undefined):void {}
export function hookCustomBuilderRootAttributeModifier(componenet: ArkCustomBuilderRootComponent, value: AttributeModifier<CustomBuilderRoot> | undefined):void {}
export function hookCustomLayoutRootAttributeModifier(componenet: ArkCustomLayoutRootComponent, value: AttributeModifier<CustomLayoutRoot> | undefined):void {}
export function hookFormComponentAttributeModifier(component: ArkFormComponentComponent, value: AttributeModifier<FormComponentAttribute> | AttributeModifier<CommonMethod> | undefined) {}
export function hookPasteButtonAttributeModifier(componenet: ArkPasteButtonComponent, value: AttributeModifier<PasteButtonAttribute> | AttributeModifier<SecurityComponentMethod> | undefined):void {}
export function hookSaveButtonAttributeModifier(componenet: ArkSaveButtonComponent, value: AttributeModifier<SaveButtonAttribute> | AttributeModifier<SecurityComponentMethod> | undefined):void {}
export function hookSecurityComponentMethodAttributeModifier(componenet: ArkSecurityComponentMethodComponent, value: AttributeModifier<SecurityComponentMethod> | undefined):void {}

export function hookPatternLockAttributeModifier(component: ArkPatternLockComponent, modifier: AttributeModifier<PatternLockAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): PatternLockModifier => {
        let isPatternLockModifier: boolean = modifier instanceof PatternLockModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new PatternLockModifier();
        if (isPatternLockModifier) {
            let imageModifier = modifier as object as PatternLockModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: PatternLockController = params[0] as PatternLockController
        (component as ArkPatternLockComponent).setPatternLockOptions(content_casted)
    };
    let updaterReceiver = (): ArkPatternLockComponent => {
        let componentNew: ArkPatternLockComponent = new ArkPatternLockComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<PatternLockAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookProgressAttributeModifier(component: ArkProgressComponent, modifier: AttributeModifier<ProgressAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ProgressModifier => {
        let isProgressModifier: boolean = modifier instanceof ProgressModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ProgressModifier();
        if (isProgressModifier) {
            let imageModifier = modifier as object as ProgressModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: ProgressOptions = params[0] as ProgressOptions
        (component as ArkProgressComponent).setProgressOptions(content_casted)
    };
    let updaterReceiver = (): ArkProgressComponent => {
        let componentNew: ArkProgressComponent = new ArkProgressComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ProgressAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookQRCodeAttributeModifier(component: ArkQRCodeComponent, modifier: AttributeModifier<QRCodeAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): QRCodeModifier => {
        let isQRCodeModifier: boolean = modifier instanceof QRCodeModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new QRCodeModifier();
        if (isQRCodeModifier) {
            let imageModifier = modifier as object as QRCodeModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: ResourceStr = params[0] as ResourceStr
        (component as ArkQRCodeComponent).setQRCodeOptions(content_casted)
    };
    let updaterReceiver = (): ArkQRCodeComponent => {
        let componentNew: ArkQRCodeComponent = new ArkQRCodeComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<QRCodeAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookLoadingProgressAttributeModifier(component: ArkLoadingProgressComponent, modifier: AttributeModifier<LoadingProgressAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): LoadingProgressModifier => {
        let isLoadingProgressModifier: boolean = modifier instanceof LoadingProgressModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new LoadingProgressModifier();
        if (isLoadingProgressModifier) {
            let imageModifier = modifier as object as LoadingProgressModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkLoadingProgressComponent => {
        let componentNew: ArkLoadingProgressComponent = new ArkLoadingProgressComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<LoadingProgressAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookGaugeAttributeModifier(component: ArkGaugeComponent, modifier: AttributeModifier<GaugeAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): GaugeModifier => {
        let isGaugeModifier: boolean = modifier instanceof GaugeModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new GaugeModifier();
        if (isGaugeModifier) {
            let GaugeModifier = modifier as object as GaugeModifier;
            initModifier.mergeModifier(GaugeModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: GaugeOptions = params[0] as GaugeOptions
        (component as ArkGaugeComponent).setGaugeOptions(content_casted)
    };
    let updaterReceiver = (): ArkGaugeComponent => {
        let componentNew: ArkGaugeComponent = new ArkGaugeComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<GaugeAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookImageAttributeModifier(component: ArkImageComponent, modifier: AttributeModifier<ImageAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ImageModifier => {
        let isImageModifier: boolean = modifier instanceof ImageModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ImageModifier();
        if (isImageModifier) {
            let imageModifier = modifier as object as ImageModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length < 1) {
            throw new Error('must only 1 parameter')
        }
        if (params.length == 1) {
            let content_casted: image.PixelMap | ResourceStr | DrawableDescriptor | ImageContent = params[0] as image.PixelMap | ResourceStr | DrawableDescriptor | ImageContent
            (component as ArkImageComponent).setImageOptions(content_casted)
        } else {
            let content_casted: image.PixelMap | ResourceStr | DrawableDescriptor = params[0] as image.PixelMap | ResourceStr | DrawableDescriptor
            let ai_casted: ImageAIOptions = params[0] as ImageAIOptions
            (component as ArkImageComponent).setImageOptions(content_casted, ai_casted)
        }
    };
    let updaterReceiver = (): ArkImageComponent => {
        let componentNew: ArkImageComponent = new ArkImageComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ImageAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookImageAnimatorAttributeModifier(component: ArkImageAnimatorComponent, modifier: AttributeModifier<ImageAnimatorAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ImageAnimatorModifier => {
        let isImageAnimatorModifier: boolean = modifier instanceof ImageAnimatorModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ImageAnimatorModifier();
        if (isImageAnimatorModifier) {
            let imageModifier = modifier as object as ImageAnimatorModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkImageAnimatorComponent => {
        let componentNew: ArkImageAnimatorComponent = new ArkImageAnimatorComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ImageAnimatorAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookTextTimerAttributeModifier(component: ArkTextTimerComponent, modifier: AttributeModifier<TextTimerAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TextTimerModifier => {
        let isTextTimerModifier: boolean = modifier instanceof TextTimerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TextTimerModifier();
        if (isTextTimerModifier) {
            let imageModifier = modifier as object as TextTimerModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: TextTimerOptions = params[0] as TextTimerOptions
        (component as ArkTextTimerComponent).setTextTimerOptions(content_casted)
    };
    let updaterReceiver = (): ArkTextTimerComponent => {
        let componentNew: ArkTextTimerComponent = new ArkTextTimerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TextTimerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookTextClockAttributeModifier(component: ArkTextClockComponent, modifier: AttributeModifier<TextClockAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TextClockModifier => {
        let isTextClockModifier: boolean = modifier instanceof TextClockModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TextClockModifier();
        if (isTextClockModifier) {
            let imageModifier = modifier as object as TextClockModifier;
            initModifier.mergeModifier(imageModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: TextClockOptions = params[0] as TextClockOptions
        (component as ArkTextClockComponent).setTextClockOptions(content_casted)
    };
    let updaterReceiver = (): ArkTextClockComponent => {
        let componentNew: ArkTextClockComponent = new ArkTextClockComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TextClockAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookCounterAttributeModifier(component: ArkCounterComponent, modifier: AttributeModifier<CounterAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): CounterModifier => {
        let isCounterModifier: boolean = modifier instanceof CounterModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new CounterModifier();
        if (isCounterModifier) {
            let CounterModifier = modifier as object as CounterModifier;
            initModifier.mergeModifier(CounterModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkCounterComponent => {
        let componentNew: ArkCounterComponent = new ArkCounterComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<CounterAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
export function hookDataPanelAttributeModifier(component: ArkDataPanelComponent, modifier: AttributeModifier<DataPanelAttribute> | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): DataPanelModifier => {
        let isDataPanelModifier: boolean = modifier instanceof DataPanelModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new DataPanelModifier();
        if (isDataPanelModifier) {
            let DataPanelModifier = modifier as object as DataPanelModifier;
            initModifier.mergeModifier(DataPanelModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: DataPanelOptions = params[0] as DataPanelOptions
        (component as ArkDataPanelComponent).setDataPanelOptions(content_casted)
    };
    let updaterReceiver = (): ArkDataPanelComponent => {
        let componentNew: ArkDataPanelComponent = new ArkDataPanelComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<DataPanelAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookCalendarPickerAttributeModifier(component: ArkCalendarPickerComponent, modifier: AttributeModifier<CalendarPickerAttribute>
    | AttributeModifier<CommonMethod> | undefined):void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): CalendarPickerModifier => {
        let isCalendarPickerModifier: boolean = modifier instanceof CalendarPickerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new CalendarPickerModifier();
        if (isCalendarPickerModifier) {
            let calendarPickerModifier = modifier as object as CalendarPickerModifier;
            initModifier.mergeModifier(calendarPickerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: CalendarOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as CalendarOptions
        }
        let calendarPickerPeer: ArkCalendarPickerPeer = component.getPeer() as Object as ArkCalendarPickerPeer;
        calendarPickerPeer.setCalendarPickerOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkCalendarPickerComponent => {
        let componentNew: ArkCalendarPickerComponent = new ArkCalendarPickerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<CalendarPickerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookDatePickerAttributeModifier(component: ArkDatePickerComponent, modifier: AttributeModifier<DatePickerAttribute>
    | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): DatePickerModifier => {
        let isDatePickerModifier: boolean = modifier instanceof DatePickerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new DatePickerModifier();
        if (isDatePickerModifier) {
            let datePickerModifier = modifier as object as DatePickerModifier;
            initModifier.mergeModifier(datePickerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: DatePickerOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as DatePickerOptions
        }
        let datePickerPeer: ArkDatePickerPeer = component.getPeer() as Object as ArkDatePickerPeer;
        datePickerPeer.setDatePickerOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkDatePickerComponent => {
        let componentNew: ArkDatePickerComponent = new ArkDatePickerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<DatePickerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}


export function hookTimePickerAttributeModifier(component: ArkTimePickerComponent, modifier: AttributeModifier<TimePickerAttribute>
    | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TimePickerModifier => {
        let isTimePickerModifier: boolean = modifier instanceof TimePickerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TimePickerModifier();
        if (isTimePickerModifier) {
            let timePickerModifier = modifier as object as TimePickerModifier;
            initModifier.mergeModifier(timePickerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: TimePickerOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as TimePickerOptions
        }
        let timePickerPeer: ArkTimePickerPeer = component.getPeer() as Object as ArkTimePickerPeer;
        timePickerPeer.setTimePickerOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkTimePickerComponent => {
        let componentNew: ArkTimePickerComponent = new ArkTimePickerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TimePickerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}


export function hookTextPickerAttributeModifier(component: ArkTextPickerComponent, modifier: AttributeModifier<TextPickerAttribute>
    | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TextPickerModifier => {
        let isTextPickerModifier: boolean = modifier instanceof TextPickerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TextPickerModifier();
        if (isTextPickerModifier) {
            let textPickerModifier = modifier as object as TextPickerModifier;
            initModifier.mergeModifier(textPickerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: TextPickerOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as TextPickerOptions
        }
        let textPickerPeer: ArkTextPickerPeer = component.getPeer() as Object as ArkTextPickerPeer;
        textPickerPeer.setTextPickerOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkTextPickerComponent => {
        let componentNew: ArkTextPickerComponent = new ArkTextPickerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TextPickerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookMenuItemGroupAttributeModifier(component: ArkMenuItemGroupComponent, modifier: AttributeModifier<MenuItemGroupAttribute>
    | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): MenuItemGroupModifier => {
        let isMenuItemGroupModifier: boolean = modifier instanceof MenuItemGroupModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new MenuItemGroupModifier();
        if (isMenuItemGroupModifier) {
            let menuItemGroupModifier = modifier as object as MenuItemGroupModifier;
            initModifier.mergeModifier(menuItemGroupModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkMenuItemGroupComponent => {
        let componentNew: ArkMenuItemGroupComponent = new ArkMenuItemGroupComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<MenuItemGroupAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
 
export function hookMenuItemAttributeModifier(component: ArkMenuItemComponent, modifier: AttributeModifier<MenuItemAttribute>
    | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): MenuItemModifier => {
        let isMenuItemModifier: boolean = modifier instanceof MenuItemModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new MenuItemModifier();
        if (isMenuItemModifier) {
            let menuItemModifier = modifier as object as MenuItemModifier;
            initModifier.mergeModifier(menuItemModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkMenuItemComponent => {
        let componentNew: ArkMenuItemComponent = new ArkMenuItemComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<MenuItemAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}
 
export function hookMenuAttributeModifier(component: ArkMenuComponent, modifier: AttributeModifier<MenuAttribute>
    | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): MenuModifier => {
        let isMenuModifier: boolean = modifier instanceof MenuModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new MenuModifier();
        if (isMenuModifier) {
            let menuModifier = modifier as object as MenuModifier;
            initModifier.mergeModifier(menuModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkMenuComponent => {
        let componentNew: ArkMenuComponent = new ArkMenuComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<MenuAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}


export function hookButtonAttributeModifier(component: ArkButtonComponent, modifier: AttributeModifier<ButtonAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ButtonModifier => {
        let isButtonModifier: boolean = modifier instanceof ButtonModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ButtonModifier();
        if (isButtonModifier) {
            let buttonModifier = modifier as object as ButtonModifier;
            initModifier.mergeModifier(buttonModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkButtonComponent => {
        let componentNew: ArkButtonComponent = new ArkButtonComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ButtonAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookSpanAttributeModifier(component: ArkSpanComponent, modifier: AttributeModifier<SpanAttribute> | AttributeModifier<BaseSpan> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return ;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return ;
    }
    let attributeSet = (): SpanModifier => {
        let isSpanModifier: boolean = modifier instanceof SpanModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SpanModifier();
        if (isSpanModifier) {
            let spanModifier = modifier as object as SpanModifier;
            initModifier.mergeModifier(spanModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: string | Resource = params[0] as (string | Resource)
        let spanPeer: ArkSpanPeer = component.getPeer() as Object as ArkSpanPeer;
        spanPeer.setSpanOptionsAttribute(content_casted)
    };
    let updaterReceiver = (): ArkSpanComponent => {
        let initComponent: ArkSpanComponent = new ArkSpanComponent();
        initComponent.setPeer(component.getPeer());
        return initComponent;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SpanAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer(), false);
}

export function hookImageSpanAttributeModifier(component: ArkImageSpanComponent, modifier: AttributeModifier<ImageSpanAttribute> | AttributeModifier<BaseSpan> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return ;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return ;
    }
    let attributeSet = (): ImageSpanModifier => {
        let isImageSpanModifier: boolean = modifier instanceof ImageSpanModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ImageSpanModifier();
        if (isImageSpanModifier) {
            let imageSpanModifier = modifier as object as ImageSpanModifier;
            initModifier.mergeModifier(imageSpanModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: ResourceStr | PixelMap = params[0] as ResourceStr | PixelMap
        let imageSpanPeer: ArkImageSpanPeer = component.getPeer() as Object as ArkImageSpanPeer;
        imageSpanPeer.setImageSpanOptionsAttribute(content_casted)
    };
    let updaterReceiver = (): ArkImageSpanComponent => {
        let initComponent: ArkImageSpanComponent = new ArkImageSpanComponent();
        initComponent.setPeer(component.getPeer());
        return initComponent;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ImageSpanAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookSymbolSpanAttributeModifier(component: ArkSymbolSpanComponent, modifier: AttributeModifier<SymbolSpanAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return ;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return ;
    }
    let attributeSet = (): SymbolSpanModifier => {
        let isSymbolSpanModifier: boolean = modifier instanceof SymbolSpanModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SymbolSpanModifier();
        if (isSymbolSpanModifier) {
            let symbolSpanModifier = modifier as object as SymbolSpanModifier;
            initModifier.mergeModifier(symbolSpanModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length !== 1) {
            throw new Error('must only 1 parameter')
        }
        let content_casted: Resource = params[0] as Resource
        let symbolSpanPeer: ArkSymbolSpanPeer = component.getPeer() as Object as ArkSymbolSpanPeer;
        symbolSpanPeer.setSymbolSpanOptionsAttribute(content_casted)
    };
    let updaterReceiver = (): ArkSymbolSpanComponent => {
        let initComponent: ArkSymbolSpanComponent = new ArkSymbolSpanComponent();
        initComponent.setPeer(component.getPeer());
        return initComponent;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SymbolSpanAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer(), false);
}

export function hookContainerSpanAttributeModifier(component: ArkContainerSpanComponent, modifier: AttributeModifier<ContainerSpanAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return ;
    }
    let attributeSet = (): ContainerSpanModifier => {
        let isContainerSpanModifier: boolean = modifier instanceof ContainerSpanModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ContainerSpanModifier();
        if (isContainerSpanModifier) {
            let containerSpanModifier = modifier as object as ContainerSpanModifier;
         //   initModifier.mergeModifier(containerSpanModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkContainerSpanComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkContainerSpanComponent => {
        let initComponent: ArkContainerSpanComponent = new ArkContainerSpanComponent();
        initComponent.setPeer(component.getPeer());
        return initComponent;
    };
    let attributeSet_ = applyAttributeModifierNoCommonMethod(modifier as Object as AttributeModifier<ContainerSpanAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer(), false);
    attributeSet_!.applyModifierPatch(component.getPeer());
}
export function hookTextAttributeModifier(component: ArkTextComponent, modifier: AttributeModifier<TextAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return ;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return ;
    }
    let attributeSet = (): TextModifier => {
        let isTextModifier: boolean = modifier instanceof TextModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TextModifier();
        if (isTextModifier) {
            let textModifier = modifier as object as TextModifier;
            initModifier.mergeModifier(textModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 2) {
            throw new Error('more than 2 parameters')
        }
        let content_casted: string | Resource | undefined = undefined
        let value_casted: TextOptions | undefined = undefined
        if (params.length >= 1) {
            if (typeof (params[0]) == "string") {
                content_casted = params[0] as string
            } else if (typeof (params[0]) == "object") {
                content_casted = params[0] as string
            }
        }
        if (params.length == 2) {
            const param1_type = runtimeType(params[1])
            if (RuntimeType.OBJECT == param1_type) {
                value_casted = params[1] as TextOptions
            }
        }
        let textPeer: ArkTextPeer = component.getPeer() as Object as ArkTextPeer;
        textPeer.setTextOptionsAttribute(content_casted, value_casted)
    };
    let updaterReceiver = (): ArkTextComponent => {
        let initComponent: ArkTextComponent = new ArkTextComponent();
        initComponent.setPeer(component.getPeer());
        return initComponent;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TextAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookBlankAttributeModifier(component: ArkBlankComponent,
    modifier: AttributeModifier<BlankAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): BlankModifier => {
        let isBlankModifier: boolean = modifier instanceof BlankModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new BlankModifier();
        if (isBlankModifier) {
            let BlankModifier = modifier as object as BlankModifier;
            initModifier.mergeModifier(BlankModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkBlankComponent => {
        let componentNew: ArkBlankComponent = new ArkBlankComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<BlankAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookColumnAttributeModifier(component: ArkColumnComponent,
    modifier: AttributeModifier<ColumnAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ColumnModifier => {
        let isColumnModifier: boolean = modifier instanceof ColumnModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ColumnModifier();
        if (isColumnModifier) {
            let ColumnModifier = modifier as object as ColumnModifier;
            initModifier.mergeModifier(ColumnModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkColumnComponent => {
        let componentNew: ArkColumnComponent = new ArkColumnComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ColumnAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookColumnSplitAttributeModifier(component: ArkColumnSplitComponent,
    modifier: AttributeModifier<ColumnSplitAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ColumnSplitModifier => {
        let isColumnSplitModifier: boolean = modifier instanceof ColumnSplitModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ColumnSplitModifier();
        if (isColumnSplitModifier) {
            let ColumnSplitModifier = modifier as object as ColumnSplitModifier;
            initModifier.mergeModifier(ColumnSplitModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkColumnSplitComponent => {
        let componentNew: ArkColumnSplitComponent = new ArkColumnSplitComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ColumnSplitAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookDividerAttributeModifier(component: ArkDividerComponent,
    modifier: AttributeModifier<DividerAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): DividerModifier => {
        let isDividerModifier: boolean = modifier instanceof DividerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new DividerModifier();
        if (isDividerModifier) {
            let DividerModifier = modifier as object as DividerModifier;
            initModifier.mergeModifier(DividerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkDividerComponent => {
        let componentNew: ArkDividerComponent = new ArkDividerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<DividerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookFlexAttributeModifier(component: ArkFlexComponent,
    modifier: AttributeModifier<FlexAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): FlexModifier => {
        let isFlexModifier: boolean = modifier instanceof FlexModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new FlexModifier();
        if (isFlexModifier) {
            let FlexModifier = modifier as object as FlexModifier;
            initModifier.mergeModifier(FlexModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkFlexComponent => {
        let componentNew: ArkFlexComponent = new ArkFlexComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<FlexAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookFolderStackAttributeModifier(component: ArkFolderStackComponent,
    modifier: AttributeModifier<FolderStackAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): FolderStackModifier => {
        let isFolderStackModifier: boolean = modifier instanceof FolderStackModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new FolderStackModifier();
        if (isFolderStackModifier) {
            let FolderStackModifier = modifier as object as FolderStackModifier;
            initModifier.mergeModifier(FolderStackModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkFolderStackComponent => {
        let componentNew: ArkFolderStackComponent = new ArkFolderStackComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<FolderStackAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookGridColAttributeModifier(component: ArkGridColComponent,
    modifier: AttributeModifier<GridColAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): GridColModifier => {
        let isGridColModifier: boolean = modifier instanceof GridColModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new GridColModifier();
        if (isGridColModifier) {
            let GridColModifier = modifier as object as GridColModifier;
            initModifier.mergeModifier(GridColModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkGridColComponent => {
        let componentNew: ArkGridColComponent = new ArkGridColComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<GridColAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookGridRowAttributeModifier(component: ArkGridRowComponent,
    modifier: AttributeModifier<GridRowAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): GridRowModifier => {
        let isGridRowModifier: boolean = modifier instanceof GridRowModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new GridRowModifier();
        if (isGridRowModifier) {
            let GridRowModifier = modifier as object as GridRowModifier;
            initModifier.mergeModifier(GridRowModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkGridRowComponent => {
        let componentNew: ArkGridRowComponent = new ArkGridRowComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<GridRowAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookRelativeContainerAttributeModifier(component: ArkRelativeContainerComponent,
    modifier: AttributeModifier<RelativeContainerAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): RelativeContainerModifier => {
        let isRelativeContainerModifier: boolean = modifier instanceof RelativeContainerModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RelativeContainerModifier();
        if (isRelativeContainerModifier) {
            let RelativeContainerModifier = modifier as object as RelativeContainerModifier;
            initModifier.mergeModifier(RelativeContainerModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkRelativeContainerComponent => {
        let componentNew: ArkRelativeContainerComponent = new ArkRelativeContainerComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RelativeContainerAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookRowAttributeModifier(component: ArkRowComponent,
    modifier: AttributeModifier<RowAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): RowModifier => {
        let isRowModifier: boolean = modifier instanceof RowModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RowModifier();
        if (isRowModifier) {
            let RowModifier = modifier as object as RowModifier;
            initModifier.mergeModifier(RowModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkRowComponent => {
        let componentNew: ArkRowComponent = new ArkRowComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RowAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookRowSplitAttributeModifier(component: ArkRowSplitComponent,
    modifier: AttributeModifier<RowSplitAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): RowSplitModifier => {
        let isRowSplitModifier: boolean = modifier instanceof RowSplitModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RowSplitModifier();
        if (isRowSplitModifier) {
            let RowSplitModifier = modifier as object as RowSplitModifier;
            initModifier.mergeModifier(RowSplitModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkRowSplitComponent => {
        let componentNew: ArkRowSplitComponent = new ArkRowSplitComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RowSplitAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookStackAttributeModifier(component: ArkStackComponent,
    modifier: AttributeModifier<StackAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): StackModifier => {
        let isStackModifier: boolean = modifier instanceof StackModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new StackModifier();
        if (isStackModifier) {
            let StackModifier = modifier as object as StackModifier;
            initModifier.mergeModifier(StackModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkStackComponent => {
        let componentNew: ArkStackComponent = new ArkStackComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<StackAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookSymbolGlyphAttributeModifier(component: ArkSymbolGlyphComponent,
    modifier: AttributeModifier<SymbolGlyphAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): SymbolGlyphModifier => {
        let isSymbolGlyphModifier: boolean = modifier instanceof SymbolGlyphModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SymbolGlyphModifier();
        if (isSymbolGlyphModifier) {
            let symbolGlyphModifier = modifier as object as SymbolGlyphModifier;
            initModifier.mergeModifier(symbolGlyphModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: Resource | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as Resource
        }
        let symbolGlyphPeer: ArkSymbolGlyphPeer = component.getPeer() as Object as ArkSymbolGlyphPeer;
        symbolGlyphPeer.setSymbolGlyphOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkSymbolGlyphComponent => {
        let componentNew: ArkSymbolGlyphComponent = new ArkSymbolGlyphComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SymbolGlyphAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookCheckboxAttributeModifier(component: ArkCheckboxComponent,
    modifier: AttributeModifier<CheckboxAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): CheckboxModifier => {
        let isCheckboxModifier: boolean = modifier instanceof CheckboxModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new CheckboxModifier();
        if (isCheckboxModifier) {
            let checkboxModifier = modifier as object as CheckboxModifier;
            initModifier.mergeModifier(checkboxModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkCheckboxComponent => {
        let componentNew: ArkCheckboxComponent = new ArkCheckboxComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<CheckboxAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookCheckboxGroupAttributeModifier(component: ArkCheckboxGroupComponent,
    modifier: AttributeModifier<CheckboxGroupAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): CheckboxGroupModifier => {
        let isCheckboxGroupModifier: boolean = modifier instanceof CheckboxGroupModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new CheckboxGroupModifier();
        if (isCheckboxGroupModifier) {
            let checkboxgroupModifier = modifier as object as CheckboxGroupModifier;
            initModifier.mergeModifier(checkboxgroupModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkCheckboxGroupComponent => {
        let componentNew: ArkCheckboxGroupComponent = new ArkCheckboxGroupComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<CheckboxGroupAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookRatingAttributeModifier(component: ArkRatingComponent,
    modifier: AttributeModifier<RatingAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): RatingModifier => {
        let isRatingModifier: boolean = modifier instanceof RatingModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RatingModifier();
        if (isRatingModifier) {
            let componentModifier = modifier as object as RatingModifier;
            initModifier.mergeModifier(componentModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkRatingComponent => {
        let componentNew: ArkRatingComponent = new ArkRatingComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RatingAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookRadioAttributeModifier(component: ArkRadioComponent,
    modifier: AttributeModifier<RadioAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): RadioModifier => {
        let isRadioModifier: boolean = modifier instanceof RadioModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RadioModifier();
        if (isRadioModifier) {
            let componentModifier = modifier as object as RadioModifier;
            initModifier.mergeModifier(componentModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkRadioComponent => {
        let componentNew: ArkRadioComponent = new ArkRadioComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RadioAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookSelectAttributeModifier(component: ArkSelectComponent,
    modifier: AttributeModifier<SelectAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): SelectModifier => {
        let isSelectModifier: boolean = modifier instanceof SelectModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SelectModifier();
        if (isSelectModifier) {
            let componentModifier = modifier as object as SelectModifier;
            initModifier.mergeModifier(componentModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkSelectComponent => {
        let componentNew: ArkSelectComponent = new ArkSelectComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SelectAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookSliderAttributeModifier(component: ArkSliderComponent,
    modifier: AttributeModifier<SliderAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): SliderModifier => {
        let isSliderModifier: boolean = modifier instanceof SliderModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SliderModifier();
        if (isSliderModifier) {
            let componentModifier = modifier as object as SliderModifier;
            initModifier.mergeModifier(componentModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkSliderComponent => {
        let componentNew: ArkSliderComponent = new ArkSliderComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SliderAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookToggleAttributeModifier(component: ArkToggleComponent,
    modifier: AttributeModifier<ToggleAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ToggleModifier => {
        let isToggleModifier: boolean = modifier instanceof ToggleModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ToggleModifier();
        if (isToggleModifier) {
            let componentModifier = modifier as object as ToggleModifier;
            initModifier.mergeModifier(componentModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkToggleComponent => {
        let componentNew: ArkToggleComponent = new ArkToggleComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ToggleAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookGridAttributeModifier(component: ArkGridComponent,
    modifier:AttributeModifier<GridAttribute> | AttributeModifier<ScrollableCommonMethod> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): GridModifier => {
        let isGridModifier: boolean = modifier instanceof GridModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new GridModifier();
        if (isGridModifier) {
            let gridModifier = modifier as object as GridModifier;
            initModifier.mergeModifier(gridModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkGridComponent => {
        let componentNew: ArkGridComponent = new ArkGridComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<GridAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookGridItemAttributeModifier(component: ArkGridItemComponent,
    modifier: AttributeModifier<GridItemAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): GridItemModifier => {
        let isGridItemModifier: boolean = modifier instanceof GridItemModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new GridItemModifier();
        if (isGridItemModifier) {
            let gridItemModifier = modifier as object as GridItemModifier;
            initModifier.mergeModifier(gridItemModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkGridItemComponent => {
        let componentNew: ArkGridItemComponent = new ArkGridItemComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<GridItemAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());

}

export function hookListAttributeModifier(component: ArkListComponent,
    modifier:  AttributeModifier<ListAttribute> | AttributeModifier<ScrollableCommonMethod> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ListModifier => {
        let isListModifier: boolean = modifier instanceof ListModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ListModifier();
        if (isListModifier) {
            let listModifier = modifier as object as ListModifier;
            initModifier.mergeModifier(listModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkListComponent => {
        let componentNew: ArkListComponent = new ArkListComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ListAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookListItemAttributeModifier(component: ArkListItemComponent,
    modifier: AttributeModifier<ListItemAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ListItemModifier => {
        let isListItemModifier: boolean = modifier instanceof ListItemModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ListItemModifier();
        if (isListItemModifier) {
            let listItemModifier = modifier as object as ListItemModifier;
            initModifier.mergeModifier(listItemModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkListItemComponent => {
        let componentNew: ArkListItemComponent = new ArkListItemComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ListItemAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());

}

export function hookListItemGroupAttributeModifier(component: ArkListItemGroupComponent,
    modifier: AttributeModifier<ListItemGroupAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ListItemGroupModifier => {
        let isListItemGroupModifier: boolean = modifier instanceof ListItemGroupModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ListItemGroupModifier();
        if (isListItemGroupModifier) {
            let listItemGroupModifier = modifier as object as ListItemGroupModifier;
            initModifier.mergeModifier(listItemGroupModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkListItemGroupComponent => {
        let componentNew: ArkListItemGroupComponent = new ArkListItemGroupComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ListItemGroupAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());

}

export function hookRefreshAttributeModifier(component: ArkRefreshComponent,
    modifier: AttributeModifier<RefreshAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): RefreshModifier => {
        let isRefreshModifier: boolean = modifier instanceof RefreshModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RefreshModifier();
        if (isRefreshModifier) {
            let refreshModifier = modifier as object as RefreshModifier;
            initModifier.mergeModifier(refreshModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkRefreshComponent => {
        let componentNew: ArkRefreshComponent = new ArkRefreshComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RefreshAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());

}
export function hookScrollAttributeModifier(component: ArkScrollComponent,
     modifier: AttributeModifier<ScrollAttribute> | AttributeModifier<ScrollableCommonMethod> | AttributeModifier<CommonMethod> | undefined
): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): ScrollModifier => {
        let isScrollModifier: boolean = modifier instanceof ScrollModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ScrollModifier();
        if (isScrollModifier) {
            let scrollModifier = modifier as object as ScrollModifier;
            initModifier.mergeModifier(scrollModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkScrollComponent => {
        let componentNew: ArkScrollComponent = new ArkScrollComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<ScrollAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());

}

export function hookWaterFlowAttributeModifier(component: ArkWaterFlowComponent,
    modifier:AttributeModifier<WaterFlowAttribute> | AttributeModifier<ScrollableCommonMethod> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): WaterFlowModifier => {
        let isWaterFlowModifier: boolean = modifier instanceof WaterFlowModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new WaterFlowModifier();
        if (isWaterFlowModifier) {
            let waterFlowModifier = modifier as object as WaterFlowModifier;
            initModifier.mergeModifier(waterFlowModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
    };
    let updaterReceiver = (): ArkWaterFlowComponent => {
        let componentNew: ArkWaterFlowComponent = new ArkWaterFlowComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<WaterFlowAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());

}

export function hookSearchAttributeModifier(component: ArkSearchComponent,
    modifier: AttributeModifier<SearchAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): SearchModifier => {
        let isSearchModifier: boolean = modifier instanceof SearchModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new SearchModifier();
        if (isSearchModifier) {
            let searchModifier = modifier as object as SearchModifier;
            initModifier.mergeModifier(searchModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: SearchOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as SearchOptions
        }
        let searchPeer: ArkSearchPeer = component.getPeer() as Object as ArkSearchPeer;
        searchPeer.setSearchOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkSearchComponent => {
        let componentNew: ArkSearchComponent = new ArkSearchComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<SearchAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookTextInputAttributeModifier(component: ArkTextInputComponent,
    modifier: AttributeModifier<TextInputAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TextInputModifier => {
        let isTextInputModifier: boolean = modifier instanceof TextInputModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TextInputModifier();
        if (isTextInputModifier) {
            let textInputModifier = modifier as object as TextInputModifier;
            initModifier.mergeModifier(textInputModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: TextInputOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as TextInputOptions
        }
        let textInputPeer: ArkTextInputPeer = component.getPeer() as Object as ArkTextInputPeer;
        textInputPeer.setTextInputOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkTextInputComponent => {
        let componentNew: ArkTextInputComponent = new ArkTextInputComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TextInputAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookTextAreaAttributeModifier(component: ArkTextAreaComponent,
    modifier: AttributeModifier<TextAreaAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): TextAreaModifier => {
        let isTextAreaModifier: boolean = modifier instanceof TextAreaModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new TextAreaModifier();
        if (isTextAreaModifier) {
            let textAreaModifier = modifier as object as TextAreaModifier;
            initModifier.mergeModifier(textAreaModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: TextAreaOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as TextAreaOptions
        }
        let textAreaPeer: ArkTextAreaPeer = component.getPeer() as Object as ArkTextAreaPeer;
        textAreaPeer.setTextAreaOptionsAttribute(value_casted)
    };
    let updaterReceiver = (): ArkTextAreaComponent => {
        let componentNew: ArkTextAreaComponent = new ArkTextAreaComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<TextAreaAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookMarqueeAttributeModifier(component: ArkMarqueeComponent,
    modifier: AttributeModifier<MarqueeAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return;
    }
    let attributeSet = (): MarqueeModifier => {
        let isMarqueeModifier: boolean = modifier instanceof MarqueeModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new MarqueeModifier();
        if (isMarqueeModifier) {
            let marqueeModifier = modifier as object as MarqueeModifier;
            initModifier.mergeModifier(marqueeModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 1) {
            throw new Error('more than 1 parameters')
        }
        let value_casted: MarqueeOptions | undefined = undefined
        if (params.length >= 0) {
            value_casted = params[0] as MarqueeOptions
        }
        if (value_casted !== undefined) {
            let marqueePeer: ArkMarqueePeer = component.getPeer() as Object as ArkMarqueePeer;
            marqueePeer.setMarqueeOptionsAttribute(value_casted! as MarqueeOptions)
        }
    };
    let updaterReceiver = (): ArkMarqueeComponent => {
        let componentNew: ArkMarqueeComponent = new ArkMarqueeComponent();
        componentNew.setPeer(component.getPeer());
        return componentNew;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<MarqueeAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookHyperlinkAttributeModifier(component: ArkHyperlinkComponent, modifier: AttributeModifier<HyperlinkAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return ;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return ;
    }
    let attributeSet = (): HyperlinkModifier => {
        let isHyperlinkModifier: boolean = modifier instanceof HyperlinkModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new HyperlinkModifier();
        if (isHyperlinkModifier) {
            let hyperlinkModifier = modifier as object as HyperlinkModifier;
            initModifier.mergeModifier(hyperlinkModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length > 2) {
            throw new Error('more than 2 parameters')
        }
        let address_casted: string | Resource | undefined = undefined
        let content_casted: string | Resource | undefined = undefined
        if (params.length >= 1) {
            const param0_type = runtimeType(params[0])
            if (RuntimeType.UNDEFINED !== param0_type) {
                address_casted = params[0] as string | Resource
            }
        }
        if (params.length == 2) {
            const param1_type = runtimeType(params[1])
            if (RuntimeType.UNDEFINED !== param1_type) {
                content_casted = params[1] as string | Resource
            }
        }
        if (address_casted !== undefined) {
            let hyperlinkPeer: ArkHyperlinkPeer = component.getPeer() as Object as ArkHyperlinkPeer;
            hyperlinkPeer.setHyperlinkOptionsAttribute(address_casted! as string | Resource, content_casted);
        }
    };
    let updaterReceiver = (): ArkHyperlinkComponent => {
        let initComponent: ArkHyperlinkComponent = new ArkHyperlinkComponent();
        initComponent.setPeer(component.getPeer());
        return initComponent;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<HyperlinkAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
}

export function hookRichEditorAttributeModifier(component: ArkRichEditorComponent,
    modifier: AttributeModifier<RichEditorAttribute> | AttributeModifier<CommonMethod> | undefined): void {
    if (modifier === undefined) {
        return ;
    }
    let isCommonModifier: boolean = modifier instanceof CommonModifier;
    if (isCommonModifier) {
        applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
        return ;
    }
    let attributeSet = (): RichEditorModifier => {
        let isRichEditorModifier: boolean = modifier instanceof RichEditorModifier;
        let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new RichEditorModifier();
        if (isRichEditorModifier) {
            let richEditorModifier = modifier as object as RichEditorModifier;
            initModifier.mergeModifier(richEditorModifier);
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        } else {
            component.getPeer().attributeSet = initModifier;
            return initModifier;
        }
    }
    let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
        if (params.length != 1) {
            throw new Error('parameters length error')
        }
        let value_casted: RichEditorOptions | RichEditorStyledStringOptions =
            params[0] as RichEditorOptions | RichEditorStyledStringOptions;
        let richEditorComponent: ArkRichEditorComponent = component as ArkRichEditorComponent;
        richEditorComponent.setRichEditorOptions(value_casted);
    };
    let updaterReceiver = (): ArkRichEditorComponent => {
        let initComponent: ArkRichEditorComponent = new ArkRichEditorComponent();
        initComponent.setPeer(component.getPeer());
        return initComponent;
    };
    applyAttributeModifierBase(modifier as Object as AttributeModifier<RichEditorAttribute>, attributeSet,
        constructParam, updaterReceiver, component.getPeer());
}

// export function hookParticleAttributeModifier(component: ArkParticleComponent, modifier: AttributeModifier<ParticleAttribute> | AttributeModifier<CommonMethod> | undefined): void {
//     if (modifier === undefined) {
//         return;
//     }
//     let isCommonModifier: boolean = modifier instanceof CommonModifier;
//     if (isCommonModifier) {
//         applyCommonModifier(component.getPeer(), modifier as Object as AttributeModifier<CommonMethod>);
//         return;
//     }
//     let attributeSet = (): ParticleModifier => {
//         let isParticleModifier: boolean = modifier instanceof ParticleModifier;
//         let initModifier = component.getPeer().attributeSet ? component.getPeer().attributeSet! : new ParticleModifier();
//         if (isParticleModifier) {
//             let particleModifier = modifier as object as ParticleModifier;
//             initModifier.mergeModifier(particleModifier);
//             component.getPeer().attributeSet = initModifier;
//             return initModifier;
//         } else {
//             component.getPeer().attributeSet = initModifier;
//             return initModifier;
//         }
//     }
//     let constructParam = (component: ArkCommonMethodComponent, ...params: FixedArray<Object>): void => {
//     };
//     let updaterReceiver = (): ArkParticleComponent => {
//         let componentNew: ArkParticleComponent = new ArkParticleComponent();
//         componentNew.setPeer(component.getPeer());
//         return componentNew;
//     };
//     applyAttributeModifierBase(modifier as Object as AttributeModifier<ParticleAttribute>, attributeSet, constructParam, updaterReceiver, component.getPeer());
// }