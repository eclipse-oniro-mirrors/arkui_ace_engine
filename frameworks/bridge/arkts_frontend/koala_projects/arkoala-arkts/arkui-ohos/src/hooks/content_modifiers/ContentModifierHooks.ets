/*
 * Copyright (c) 2025 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { memo } from "@koalaui/runtime/annotations"
import { ContentModifierHelper } from "#generated"
import { ContentModifier } from "#generated"
import { KPointer } from "@koalaui/interop";
import { ArkButtonComponent, ButtonConfiguration } from "#generated"
import { ArkCheckboxComponent, CheckBoxConfiguration } from "#generated"
import { ArkDataPanelComponent, DataPanelConfiguration } from "#generated"
import { ArkGaugeComponent, GaugeConfiguration } from "#generated"
import { ArkLoadingProgressComponent, LoadingProgressConfiguration } from "#generated"
import { ArkProgressComponent, ProgressConfiguration } from "#generated"
import { ArkRadioComponent, RadioConfiguration } from "#generated"
import { ArkRatingComponent, RatingConfiguration } from "#generated"
import { ArkSelectComponent, MenuItemConfiguration } from "#generated"
import { ArkSliderComponent, SliderConfiguration } from "#generated"
import { ArkTextClockComponent, TextClockConfiguration } from "#generated"
import { ArkTextTimerComponent, TextTimerConfiguration } from "#generated"
import { ArkToggleComponent, ToggleConfiguration } from "#generated"
import { CustomBuilder } from "#generated"
import { CallbackTransformer } from "../../CallbackTransformer"

function memoWrapper<Args>(
    @memo
    builder: ((args: Args) => void), args: Args
): CustomBuilder {
    @memo
    const wrapper = () => { builder(args) }
    return wrapper
}

export function hookButtonContentModifier(
    receiver: ArkButtonComponent, value?: ContentModifier<ButtonConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierButton(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const buttonBuilder = (parentNode: KPointer, config: ButtonConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierButton(ptr, value!, buttonBuilder)
    }
}

export function hookCheckBoxContentModifier(
    receiver: ArkCheckboxComponent, value?: ContentModifier<CheckBoxConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierCheckBox(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const checkboxBuilder = (parentNode: KPointer, config: CheckBoxConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierCheckBox(ptr, value!, checkboxBuilder)
    }
}

export function hookDataPanelContentModifier(
    receiver: ArkDataPanelComponent, value?: ContentModifier<DataPanelConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierDataPanel(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const dataPanelBuilder = (parentNode: KPointer, config: DataPanelConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierDataPanel(ptr, value!, dataPanelBuilder)
    }
}

export function hookGaugeContentModifier(
    receiver: ArkGaugeComponent, value?: ContentModifier<GaugeConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierGauge(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const gaugeBuilder = (parentNode: KPointer, config: GaugeConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierGauge(ptr, value!, gaugeBuilder)
    }
}

export function hookLoadingProgressContentModifier(
    receiver: ArkLoadingProgressComponent, value?: ContentModifier<LoadingProgressConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierLoadingProgress(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const loadingProgressBuilder = (parentNode: KPointer, config: LoadingProgressConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierLoadingProgress(ptr, value!, loadingProgressBuilder)
    }
}

export function hookProgressContentModifier(
    receiver: ArkProgressComponent, value?: ContentModifier<ProgressConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierProgress(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const progressBuilder = (parentNode: KPointer, config: ProgressConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierProgress(ptr, value!, progressBuilder)
    }
}

export function hookRadioContentModifier(
    receiver: ArkRadioComponent, value?: ContentModifier<RadioConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierRadio(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const radioBuilder = (parentNode: KPointer, config: RadioConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierRadio(ptr, value!, radioBuilder)
    }
}

export function hookRatingContentModifier(
    receiver: ArkRatingComponent, value?: ContentModifier<RatingConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierRating(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const ratingBuilder = (parentNode: KPointer, config: RatingConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierRating(ptr, value!, ratingBuilder)
    }
}

export function hookSelectContentModifier(
    receiver: ArkSelectComponent, value?: ContentModifier<MenuItemConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierMenuItem(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const menuItemBuilder = (parentNode: KPointer, config: MenuItemConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierMenuItem(ptr, value!, menuItemBuilder)
    }
}

export function hookSliderContentModifier(
    receiver: ArkSliderComponent, value?: ContentModifier<SliderConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierSlider(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const sliderBuilder = (parentNode: KPointer, config: SliderConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierSlider(ptr, value!, sliderBuilder)
    }
}

export function hookTextClockContentModifier(
    receiver: ArkTextClockComponent, value?: ContentModifier<TextClockConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierTextClock(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const textClockBuilder = (parentNode: KPointer, config: TextClockConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierTextClock(ptr, value!, textClockBuilder)
    }
}

export function hookTextTimerContentModifier(
    receiver: ArkTextTimerComponent, value?: ContentModifier<TextTimerConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierTextTimer(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const textTimerBuilder = (parentNode: KPointer, config: TextTimerConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierTextTimer(ptr, value!, textTimerBuilder)
    }
}

export function hookToggleContentModifier(
    receiver: ArkToggleComponent, value?: ContentModifier<ToggleConfiguration>) {
    const ptr = receiver.getPeer().peer.ptr
    if (!value) {
        ContentModifierHelper.resetContentModifierToggle(ptr)
        return
    }
    const wrappedBuilder = value?.applyContent()
    if (!wrappedBuilder) {
        return
    }
    const toggleBuilder = (parentNode: KPointer, config: ToggleConfiguration): KPointer => {
        return CallbackTransformer.transformToPeerFromCustomBuilder(
            memoWrapper(wrappedBuilder!.builder, config))
    }
    if (value) {
        ContentModifierHelper.contentModifierToggle(ptr, value!, toggleBuilder)
    }
}
