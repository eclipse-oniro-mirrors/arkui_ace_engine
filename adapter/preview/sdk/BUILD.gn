# Copyright (c) 2021-2022 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import(
    "//foundation/arkui/ace_engine/adapter/preview/build/config_js_engine.gni")
import("//foundation/arkui/ace_engine/build/ace_lib.gni")
import("//foundation/arkui/ace_engine/interfaces/napi/kits/napi_lib.gni")

if (is_standard_system) {
  system_resource_hap_path =
      get_label_info("//utils/system_resources/systemres:systemres_hap",
                     "target_out_dir") + "/SystemResources.hap"
  system_resource_path =
      get_label_info("//utils/system_resources/systemres:systemres_hap",
                     "target_out_dir") + "/resources"
} else {
  system_resource_hap_path =
      get_label_info("//utils/system_resources/systemres:systemres_hap",
                     "target_gen_dir") + "/SystemResources.hap"
  system_resource_path =
      get_label_info("//utils/system_resources/systemres:systemres_hap",
                     "target_gen_dir") + "/resources"
}

action("get_system_resource") {
  script = "get_system_resources.sh"
  deps =
      [ "//utils/system_resources/systemres:systemres_hap($current_toolchain)" ]
  args = [
    rebase_path(system_resource_hap_path),
    rebase_path(system_resource_path),
  ]
  inputs = [ system_resource_hap_path ]
  outputs = [ system_resource_path ]
}

# Triggered only when the SDK is compiled
if (is_standard_system) {
  # Avoid conditional judgment branches caused by dynamic library suffixes.
  if (use_mac) {
    dylib_suffix = ".dylib"
  } else if (use_mingw_win) {
    dylib_suffix = ".dll"
  } else if (use_linux) {
    dylib_suffix = ".so"
  }

  # All dynamic libraries to be copied to the path "/previewer/common/bin/module/",
  # which are called by the napi framework, can be added to this script.
  ohos_copy("copy_napi_modules_shared_library") {
    deps = []
    sources = []
    out_path = get_label_info(
            "//base/hiviewdfx/hilog/interfaces/js/kits/napi:libhilognapi",
            "root_out_dir")
    deps += [ "//base/hiviewdfx/hilog/interfaces/js/kits/napi:libhilognapi" ]
    sources += [ "${out_path}/hiviewdfx/hilog_native/libhilog${dylib_suffix}" ]

    foreach(module, common_napi_libs) {
      out_path = get_label_info("$ace_root/interfaces/napi/kits:${module}",
                                "root_out_dir")
      deps += [ "$ace_root/interfaces/napi/kits:${module}" ]
      sources += [ "${out_path}/arkui/ace_engine/lib${module}${dylib_suffix}" ]
    }

    outputs =
        [ target_out_dir + "/previewer/common/bin/module/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common/bin/module/"
    module_install_name = ""
  }

  if (use_mac || use_mingw_win) {
    ohos_copy("copy_distributeddata_library") {
      out_path = get_label_info(
              "//foundation/distributeddatamgr/kv_store/kvstoremock/interfaces/jskits/distributeddata:distributeddata",
              "root_out_dir")
      deps = [ "//foundation/distributeddatamgr/kv_store/kvstoremock/interfaces/jskits/distributeddata:distributeddata" ]
      sources = [ "${out_path}/distributeddatamgr/kv_store/libdistributeddata${dylib_suffix}" ]

      outputs = [ target_out_dir +
                  "/previewer/common/bin/module/data/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/previewer/common/bin/module/data/"
      module_install_name = ""
    }
  }

  # All dynamic libraries to be copied to the path "/previewer/common/bin/",
  # which are related to the previewer, can be added to this script.
  ohos_copy("copy_preview_shared_library") {
    deps = []
    sources = []

    # The two dynamic libraries here are used for local testing of the previewer.
    if (enable_glfw_window) {
      deps += [
        "$ace_root/adapter/preview/entrance/samples:previewer_demo",
        "$ace_root/adapter/preview/entrance/test:test_bridge",
      ]
    }

    # Add some resources
    # Add ohos fonts
    sources += [
      "//foundation/arkui/ace_engine/adapter/preview/sdk/fontconfig.json",
      "//utils/system_resources/fonts",
    ]

    # Add the dynamic library with the same name on the mac and windows system here.
    if (use_mac || use_mingw_win) {
      # Add dynamic library "native_preferences"
      native_preferences_path = get_label_info(
              "//foundation/distributeddatamgr/preferences/interfaces/inner_api:native_preferences",
              "root_out_dir")
      deps += [ "//foundation/distributeddatamgr/preferences/interfaces/inner_api:native_preferences" ]
      sources += [ "${native_preferences_path}/distributeddatamgr/preferences/libnative_preferences${dylib_suffix}" ]

      # Add dynamic library "native_rdb"
      native_rdb_path = get_label_info(
              "//foundation/distributeddatamgr/relational_store/interfaces/inner_api/rdb:native_rdb",
              "root_out_dir")
      deps += [ "//foundation/distributeddatamgr/relational_store/interfaces/inner_api/rdb:native_rdb" ]
      sources += [ "${native_rdb_path}/distributeddatamgr/relational_store/libnative_rdb${dylib_suffix}" ]

      # Add dynamic library "sqlite"
      sqlite_path =
          get_label_info("//third_party/sqlite:sqlite_sdk", "root_out_dir")
      deps += [ "//third_party/sqlite:sqlite_sdk" ]
      sources += [ "${sqlite_path}/common/common/libsqlite_sdk${dylib_suffix}" ]

      # Add dynamic library "libcrypto_restool"
      libcrypto_path = get_label_info("//third_party/openssl:libcrypto_restool",
                                      "root_out_dir")
      deps += [ "//third_party/openssl:libcrypto_restool" ]
      sources +=
          [ "${libcrypto_path}/security/huks/libcrypto_restool${dylib_suffix}" ]
    }

    # Add dynamic library "hilog"
    if (use_mac) {
      hilog_path = get_label_info(
              "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_mac",
              "root_out_dir")
      deps +=
          [ "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_mac" ]
      sources +=
          [ "${hilog_path}/hiviewdfx/hilog_native/libhilog_mac${dylib_suffix}" ]
    } else if (use_mingw_win) {
      hilog_path = get_label_info(
              "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_windows",
              "root_out_dir")
      deps += [
        "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_windows",
      ]
      sources += [
        "${hilog_path}/hiviewdfx/hilog_native/libhilog_windows${dylib_suffix}",
      ]
    } else if (use_linux) {
      hilog_path = get_label_info(
              "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_linux",
              "root_out_dir")
      deps += [
        "//base/hiviewdfx/hilog/interfaces/native/innerkits:libhilog_linux",
      ]
      sources += [
        "${hilog_path}/hiviewdfx/hilog_native/libhilog_linux${dylib_suffix}",
      ]
    }

    # Add dynamic library "libcurl_shared"
    curl_path = get_label_info("//third_party/curl:curl_shared", "root_out_dir")
    deps += [ "//third_party/curl:curl_shared" ]
    sources += [ curl_path + "/thirdparty/curl/libcurl_shared${dylib_suffix}" ]

    if (use_mac || use_mingw_win) {
      # add kvfdb
      out_path = get_label_info(
              "//foundation/distributeddatamgr/kv_store/kvstoremock/interfaces/innerkits/distributeddata:distributeddata_inner_mock",
              "root_out_dir")
      deps += [ "//foundation/distributeddatamgr/kv_store/kvstoremock/interfaces/innerkits/distributeddata:distributeddata_inner_mock" ]
      sources += [ "${out_path}/distributeddatamgr/kv_store/libdistributeddata_inner_mock${dylib_suffix}" ]
      out_path = get_label_info(
              "//foundation/distributeddatamgr/kv_store/kvstoremock/distributeddb:distributeddb_mock",
              "root_out_dir")
      deps += [ "//foundation/distributeddatamgr/kv_store/kvstoremock/distributeddb:distributeddb_mock" ]
      sources += [ "${out_path}/distributeddatamgr/kv_store/libdistributeddb_mock${dylib_suffix}" ]

      #add shared_libz
      out_path =
          get_label_info("//third_party/zlib:shared_libz", "root_out_dir")
      deps += [ "//third_party/zlib:shared_libz" ]
      sources += [ "${out_path}/thirdparty/zlib/libshared_libz${dylib_suffix}" ]
    }

    # Add dynamic library "libsec_shared"
    sec_path =
        get_label_info("//third_party/bounds_checking_function:libsec_shared",
                       "root_out_dir")
    deps += [ "//third_party/bounds_checking_function:libsec_shared" ]
    sources +=
        [ sec_path +
          "/thirdparty/bounds_checking_function/libsec_shared${dylib_suffix}" ]

    # Add napi framework-related dynamic libraries
    ace_napi_path =
        get_label_info("//foundation/arkui/napi:ace_napi", "root_out_dir")
    uv_path = get_label_info("//third_party/libuv:uv", "root_out_dir")
    icu_path =
        get_label_info("//third_party/icu/icu4c:shared_icuuc", "root_out_dir")
    deps += [
      "$ace_napi:ace_napi",
      "//third_party/icu/icu4c:shared_icui18n",
      "//third_party/icu/icu4c:shared_icuuc",
      "//third_party/libuv:uv",
    ]
    sources += [
      "$ace_napi_path/arkui/napi/libace_napi${dylib_suffix}",
      "$icu_path/thirdparty/icu/libhmicui18n${dylib_suffix}",
      "$icu_path/thirdparty/icu/libhmicuuc${dylib_suffix}",
      "$uv_path/thirdparty/libuv/libuv${dylib_suffix}",
    ]

    # Add qjs or ark engine-related dynamic libraries
    if (enable_ark_preview) {
      ark_js_path = get_label_info("//arkcompiler/ets_runtime:libark_jsruntime",
                                   "root_out_dir")
      deps += [
        "$ace_napi:ace_napi_ark",
        "//arkcompiler/ets_runtime:libark_jsruntime",
      ]
      sources += [
        "$ace_napi_path/arkui/napi/libace_napi_ark${dylib_suffix}",
        "$ark_js_path/ark/ark_js_runtime/libark_jsruntime${dylib_suffix}",
        "//third_party/icu/ohos_icu4j/data/icudt69l.dat",
      ]
    } else {
      deps += [ "$ace_napi:ace_napi_quickjs" ]
      sources +=
          [ "$ace_napi_path/arkui/napi/libace_napi_quickjs${dylib_suffix}" ]
    }

    # Add dynamic libraries with different names on mac and windows systems here.
    if (use_mac) {
      ace_engine_path =
          get_label_info("$ace_root/adapter/preview/build::libace_engine_mac",
                         "root_out_dir") +
          "/common/common/libace_engine_mac${dylib_suffix}"

      resource_manager_path = get_label_info(
                                  "//base/global/resource_management/frameworks/resmgr:global_resmgr_mac",
                                  "root_out_dir") + "/global/resource_management/libglobal_resmgr_mac${dylib_suffix}"
      deps += [
        "$ace_root/adapter/preview/build:libace_engine_mac",
        "//base/global/resource_management/frameworks/resmgr:global_resmgr_mac",
      ]
    } else if (use_mingw_win) {
      ace_engine_path =
          get_label_info(
              "$ace_root/adapter/preview/build::libace_engine_windows",
              "root_out_dir") +
          "/common/common/libace_engine_windows${dylib_suffix}"
      resource_manager_path = get_label_info(
                                  "//base/global/resource_management/frameworks/resmgr:global_resmgr_win",
                                  "root_out_dir") + "/global/resource_management/libglobal_resmgr_win${dylib_suffix}"
      deps += [
        "$ace_root/adapter/preview/build:libace_engine_windows",
        "//base/global/resource_management/frameworks/resmgr:global_resmgr_win",
      ]
    } else if (use_linux) {
      ace_engine_path =
          get_label_info("$ace_root/adapter/preview/build::libace_engine_linux",
                         "root_out_dir") +
          "/common/common/libace_engine_linux${dylib_suffix}"
      resource_manager_path = get_label_info(
                                  "//base/global/resource_management/frameworks/resmgr:global_resmgr_linux",
                                  "root_out_dir") + "/global/resource_management/libglobal_resmgr_linux${dylib_suffix}"
      deps += [
        "$ace_root/adapter/preview/build:libace_engine_linux",
        "//base/global/resource_management/frameworks/resmgr:global_resmgr_linux",
      ]
    }

    sources += [
      ace_engine_path,
      resource_manager_path,
    ]

    # Set the output directory for all dynamic libraries.
    outputs = [ target_out_dir + "/previewer/common/bin/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common/bin/"
    module_install_name = ""
  }

  ohos_copy("copy_system_resource_standard") {
    deps = [ ":get_system_resource" ]

    sources = [ system_resource_path ]

    outputs = [ target_out_dir + "/previewer/common/{{source_file_part}}" ]
    module_source_dir = target_out_dir + "/previewer/common"
    module_install_name = ""
  }

  if (use_mac || use_mingw_win) {
    ohos_copy("copy_distributeddatamgr_library") {
      #preferences
      out_path = get_label_info(
              "//foundation/distributeddatamgr/preferences/frameworks/js/napi:preferences",
              "root_out_dir")
      deps = [ "//foundation/distributeddatamgr/preferences/frameworks/js/napi:preferences" ]
      sources = [ "${out_path}/distributeddatamgr/preferences/libpreferences${dylib_suffix}" ]

      #rdb
      out_path = get_label_info(
              "//foundation/distributeddatamgr/relational_store/frameworks/js/napi/rdb:rdb",
              "root_out_dir")
      deps += [ "//foundation/distributeddatamgr/relational_store/frameworks/js/napi/rdb:rdb" ]
      sources += [
        "${out_path}/distributeddatamgr/relational_store/librdb${dylib_suffix}",
      ]

      outputs = [ target_out_dir +
                  "/previewer/common/bin/module/data/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/previewer/common/bin/module/data/"
      module_install_name = ""
    }
  }

  if (use_mingw_win) {
    ohos_copy("copy_preview_curl_cacert") {
      sources = [ "//third_party/curl/cacert.pem" ]
      outputs = [ target_out_dir + "/previewer/resources/cacert.pem" ]
      module_source_dir = target_out_dir + "/previewer/resources"
      module_install_name = ""
    }
  }
} else {
  ohos_copy("copy_system_resource") {
    if (use_mac) {
      sources = [ "//prebuilts/ace-toolkit/preview/rich/resources" ]
      outputs = [ target_out_dir + "/tv_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/tv_resources/"
      module_install_name = ""
    } else {
      deps = [ ":get_system_resource" ]

      sources = [ system_resource_path ]
      outputs = [ target_out_dir + "/tv_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/tv_resources/"
      module_install_name = ""
    }
  }

  ohos_copy("copy_system_resource_wearable") {
    if (use_mac) {
      sources = [ "//prebuilts/ace-toolkit/preview/rich/resources" ]
      outputs = [ target_out_dir + "/wearable_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/wearable_resources/"
      module_install_name = ""
    } else {
      deps = [ ":get_system_resource" ]

      sources = [ system_resource_path ]
      outputs = [ target_out_dir + "/wearable_resources/{{source_file_part}}" ]
      module_source_dir = target_out_dir + "/wearable_resources/"
      module_install_name = ""
    }
  }
}
