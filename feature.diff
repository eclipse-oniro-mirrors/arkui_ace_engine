diff --git a/frameworks/core/components_ng/property/BUILD.gn b/frameworks/core/components_ng/property/BUILD.gn
index fa6cf2c117ae0c7ae3e8c9d8b6e53a110290b9b5..1535de1e584af91841d2bd73ed2df9e881343cad 100644
--- a/frameworks/core/components_ng/property/BUILD.gn
+++ b/frameworks/core/components_ng/property/BUILD.gn
@@ -17,6 +17,7 @@ import(
 build_component_ng("property_ng") {
   sources = [
     "accessibility_property.cpp",
+    "accessibility_property_mutilthread.cpp",
     "border_property.cpp",
     "calc_length.cpp",
     "constraint_flags.cpp",
diff --git a/frameworks/core/components_ng/property/accessibility_property.cpp b/frameworks/core/components_ng/property/accessibility_property.cpp
index 33df0a3a36edfabb8b72347a217e8c0633f6de4e..32caee48fd64019955addd11495ca649f04cf595 100755
--- a/frameworks/core/components_ng/property/accessibility_property.cpp
+++ b/frameworks/core/components_ng/property/accessibility_property.cpp
@@ -18,6 +18,7 @@
 #include "core/accessibility/accessibility_constants.h"
 #include "core/components_ng/base/frame_node.h"
 #include "core/pipeline_ng/pipeline_context.h"
+#include "frameworks/base/utils/multi_thread.h"
 
 namespace OHOS::Ace::NG {
 constexpr uint64_t ACTIONS = std::numeric_limits<uint64_t>::max();
@@ -981,6 +982,8 @@ void AccessibilityProperty::SetAccessibilityGroup(bool accessibilityGroup)
         return;
     }
     accessibilityGroup_ = accessibilityGroup;
+    auto frameNode = host_.Upgrade();
+    FREE_NODE_CHECK(frameNode, SetAccessibilityGroup);
     NotifyComponentChangeEvent(AccessibilityEventType::ELEMENT_INFO_CHANGE);
 }
 
@@ -1024,6 +1027,8 @@ void AccessibilityProperty::SetAccessibilityTextWithEvent(const std::string& tex
         return;
     }
     accessibilityText_ = text;
+    auto frameNode = host_.Upgrade();
+    FREE_NODE_CHECK(frameNode, SetAccessibilityTextWithEvent);
     NotifyComponentChangeEvent(AccessibilityEventType::TEXT_CHANGE);
 }
 
@@ -1047,6 +1052,8 @@ void AccessibilityProperty::SetAccessibilityDescriptionWithEvent(const std::stri
         return;
     }
     accessibilityDescription_ = accessibilityDescription;
+    auto frameNode = host_.Upgrade();
+    FREE_NODE_CHECK(frameNode, SetAccessibilityDescriptionWithEvent);
     NotifyComponentChangeEvent(AccessibilityEventType::TEXT_CHANGE);
 }
 
@@ -1106,7 +1113,8 @@ void AccessibilityProperty::SetAccessibilityLevel(const std::string& accessibili
     } else {
         accessibilityLevel_ = Level::AUTO;
     }
-
+    auto frameNode = host_.Upgrade();
+    FREE_NODE_CHECK(frameNode, SetAccessibilityLevel, backupLevel);
     if (backupLevel != accessibilityLevel_.value_or("")) {
         NotifyComponentChangeEvent(AccessibilityEventType::ELEMENT_INFO_CHANGE);
     }
diff --git a/frameworks/core/components_ng/property/accessibility_property.h b/frameworks/core/components_ng/property/accessibility_property.h
index 02b1c9672ade51acfe84b5377ca588f964d45820..1accf5d997f5c35a1a5dc7d5c5ad38de91c84ea9 100644
--- a/frameworks/core/components_ng/property/accessibility_property.h
+++ b/frameworks/core/components_ng/property/accessibility_property.h
@@ -697,6 +697,21 @@ private:
 
     static bool CheckHoverConsumeByComponent(const RefPtr<FrameNode>& node, const NG::PointF& point);
 
+    // the interface supports multithreading
+    void SetAccessibilityGroupMultiThread();
+
+    // the interface supports multithreading
+    void SetAccessibilityTextWithEventMultiThread();
+
+    // the interface supports multithreading
+    void SetAccessibilityDescriptionWithEventMultiThread();
+
+    // the interface supports multithreading
+    void SetAccessibilityLevelMultiThread(const std::string& backupLevel);
+
+    // the interface supports multithreading
+    void NotifyComponentChangeEventMultiThread(AccessibilityEventType eventType);
+
 protected:
     virtual void SetSpecificSupportAction() {}
     std::optional<std::string> propText_;
diff --git a/frameworks/core/components_ng/property/accessibility_property_mutilthread.cpp b/frameworks/core/components_ng/property/accessibility_property_mutilthread.cpp
new file mode 100644
index 0000000000000000000000000000000000000000..7e6c9c336d45c2380425a1a2b0bafcfc7aecd826
--- /dev/null
+++ b/frameworks/core/components_ng/property/accessibility_property_mutilthread.cpp
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) 2025 Huawei Device Co., Ltd.
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+#include "core/components_ng/property/accessibility_property.h"
+
+#include "core/accessibility/accessibility_constants.h"
+#include "core/components_ng/base/frame_node.h"
+#include "core/pipeline_ng/pipeline_context.h"
+
+namespace OHOS::Ace::NG {
+void AccessibilityProperty::SetAccessibilityGroupMultiThread()
+{
+    NotifyComponentChangeEventMultiThread(AccessibilityEventType::ELEMENT_INFO_CHANGE);
+}
+
+void AccessibilityProperty::SetAccessibilityTextWithEventMultiThread()
+{
+    NotifyComponentChangeEventMultiThread(AccessibilityEventType::TEXT_CHANGE);
+}
+
+void AccessibilityProperty::SetAccessibilityDescriptionWithEventMultiThread()
+{
+    NotifyComponentChangeEventMultiThread(AccessibilityEventType::TEXT_CHANGE);
+}
+
+void AccessibilityProperty::SetAccessibilityLevelMultiThread(const std::string& backupLevel)
+{
+    if (backupLevel != accessibilityLevel_.value_or("")) {
+        NotifyComponentChangeEventMultiThread(AccessibilityEventType::ELEMENT_INFO_CHANGE);
+    }
+}
+
+void AccessibilityProperty::NotifyComponentChangeEventMultiThread(AccessibilityEventType eventType)
+{
+    auto frameNode = host_.Upgrade();
+    CHECK_NULL_VOID(frameNode);
+    frameNode->PostAfterAttachMainTreeTask([weak = WeakClaim(this), eventType]() {
+        auto host = weak.Upgrade();
+        CHECK_NULL_VOID(host);
+        host->NotifyComponentChangeEvent(eventType);
+    });
+}
+} // namespace OHOS::Ace::NG
diff --git a/test/unittest/BUILD.gn b/test/unittest/BUILD.gn
index 11ad0a4c22be018548429f6dbd4a8c7db226ce92..46a91e39888622db1d1beaf3df6a731022fc9b20 100644
--- a/test/unittest/BUILD.gn
+++ b/test/unittest/BUILD.gn
@@ -394,6 +394,7 @@ ohos_source_set("ace_components_property") {
   part_name = ace_engine_part
   sources = [
     "$ace_root/frameworks/core/components_ng/property/accessibility_property.cpp",
+    "$ace_root/frameworks/core/components_ng/property/accessibility_property_mutilthread.cpp",
     "$ace_root/frameworks/core/components_ng/property/border_property.cpp",
     "$ace_root/frameworks/core/components_ng/property/calc_length.cpp",
     "$ace_root/frameworks/core/components_ng/property/constraint_flags.cpp",
diff --git a/test/unittest/core/property/accessibility_property_test_three_ng.cpp b/test/unittest/core/property/accessibility_property_test_three_ng.cpp
index e6b2d07740e0580f4b3f1f95e303efe31f35a8c9..ef59d5d4ac4ad2a45b79ceec4e30975e44fe034d 100644
--- a/test/unittest/core/property/accessibility_property_test_three_ng.cpp
+++ b/test/unittest/core/property/accessibility_property_test_three_ng.cpp
@@ -32,11 +32,16 @@
 #include "core/components_ng/property/accessibility_property.h"
 #include "core/components_v2/inspector/inspector_constants.h"
 #include "core/components_ng/base/view_abstract_model_ng.h"
+#include "frameworks/base/utils/multi_thread.h"
 
 using namespace testing;
 using namespace testing::ext;
 
 namespace OHOS::Ace::NG {
+namespace {
+const std::string TEST_TEXT = "test text";
+} // namespace
+
 class MockPattern : public Pattern {
 public:
     MockPattern() = default;
@@ -283,4 +288,62 @@ HWTEST_F(AccessibilityPropertyTestThreeNg, AccessibilityPropertyTestThree011, Te
     ret = accessibilityProperty.HoverTestRecursive(parentPoint, node, path, debugInfo, ancestorGroupFlag);
     EXPECT_FALSE(ret);
 }
+
+/**
+ * @tc.name: AccessibilityPropertyTest012
+ * @tc.desc: Test the method SetAccessibilityGroup.
+ * @tc.type: FUNC
+ */
+HWTEST_F(AccessibilityPropertyTestThreeNg, AccessibilityPropertyTestThree012, TestSize.Level1)
+{
+    AccessibilityProperty accessibilityProperty;
+    EXPECT_FALSE(accessibilityProperty.accessibilityGroup_);
+    WeakPtr<FrameNode> hostBak = accessibilityProperty.host_;
+    bool accessibilityGroup = true;
+    accessibilityProperty.SetAccessibilityGroup(accessibilityGroup);
+    EXPECT_TRUE(accessibilityProperty.accessibilityGroup_);
+}
+
+/**
+ * @tc.name: AccessibilityPropertyTest013
+ * @tc.desc: Test the method SetAccessibilityTextWithEvent.
+ * @tc.type: FUNC
+ */
+HWTEST_F(AccessibilityPropertyTestThreeNg, AccessibilityPropertyTestThree013, TestSize.Level1)
+{
+    AccessibilityProperty accessibilityProperty;
+    EXPECT_FALSE(accessibilityProperty.accessibilityText_.has_value());
+    WeakPtr<FrameNode> hostBak = accessibilityProperty.host_;
+    accessibilityProperty.SetAccessibilityTextWithEvent(TEST_TEXT);
+    EXPECT_EQ(accessibilityProperty.accessibilityText_.value_or(""), TEST_TEXT);
+}
+
+/**
+ * @tc.name: AccessibilityPropertyTest014
+ * @tc.desc: Test the method SetAccessibilityDescriptionWithEvent.
+ * @tc.type: FUNC
+ */
+HWTEST_F(AccessibilityPropertyTestThreeNg, AccessibilityPropertyTestThree014, TestSize.Level1)
+{
+    AccessibilityProperty accessibilityProperty;
+    EXPECT_FALSE(accessibilityProperty.accessibilityDescription_.has_value());
+    WeakPtr<FrameNode> hostBak = accessibilityProperty.host_;
+    accessibilityProperty.SetAccessibilityDescriptionWithEvent(TEST_TEXT);
+    EXPECT_EQ(accessibilityProperty.accessibilityDescription_.value_or(""), TEST_TEXT);
+}
+
+/**
+ * @tc.name: AccessibilityPropertyTest015
+ * @tc.desc: Test the method SetAccessibilityLevel.
+ * @tc.type: FUNC
+ */
+HWTEST_F(AccessibilityPropertyTestThreeNg, AccessibilityPropertyTestThree015, TestSize.Level1)
+{
+    AccessibilityProperty accessibilityProperty;
+    EXPECT_FALSE(accessibilityProperty.accessibilityLevel_.has_value());
+    WeakPtr<FrameNode> hostBak = accessibilityProperty.host_;
+    std::string accessibilityLevel = "auto";
+    accessibilityProperty.SetAccessibilityLevel(accessibilityLevel);
+    EXPECT_EQ(accessibilityProperty.accessibilityLevel_.value_or(""), accessibilityLevel);
+}
 } // namespace OHOS::Ace::NG
