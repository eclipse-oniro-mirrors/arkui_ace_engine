# Copyright (c) 2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//foundation/arkui/ace_engine/ace_config.gni")
native_root = "${ace_root}/frameworks/core/interfaces/native"
import("$native_root/common_sources.gni")
import("$native_root/generated/interface/node_interface.gni")

group("linux_capi_unittest") {
  testonly = true
  deps = [
    "accessors:capi_accessors_unittest",
    "modifiers:capi_modifiers_unittest",
    "utils:capi_utils_unittest",
  ]
}

rebased_generated_sources = []
foreach(src, generated_sources) {
  rebased_generated_sources += [ native_root + "/" + src ]
}
rebased_common_sources = []
foreach(src, common_sources) {
  rebased_common_sources += [ native_root + "/" + src ]
}

web_components_support_for_test = true
form_component_support_for_test = true
component3d_component_support_for_test = true
plugin_components_support_for_test = true
window_scene_support_for_test = false

copy("copy_libxml2") {
  sources = [ root_out_dir + "/thirdparty/libxml2/libxml2.so" ]
  outputs = [ root_out_dir + "/tests/unittest/ace_engine/capi/libxml2.so" ]
  external_deps = [ "libxml2:libxml2" ]
}
copy("copy_libxml2_unstripped") {
  sources = [ root_out_dir + "/lib.unstripped/clang_x64/thirdparty/libxml2/libxml2.so" ]
  outputs = [ root_out_dir + "/exe.unstripped/clang_x64/tests/unittest/ace_engine/capi/libxml2.so" ]
  external_deps = [ "libxml2:libxml2" ]
}

ohos_source_set("ace_core_interfaces_native_node_linux_unittest") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  defines = []
  include_dirs = []

  public_configs =
      [ "$native_root/common:ace_core_interfaces_native_node_config" ]
  configs = [ "$ace_root/test/unittest:ace_unittest_config" ]

  defines += [ "ARKUI_CAPI_UNITTEST " ]
  defines += [ "INCLUDE_GENERATED_SOURCES" ]
  if (ace_engine_feature_enable_point_light) {
    defines += [ "POINT_LIGHT_ENABLE" ]
  }

  sources = [
    "$ace_root/adapter/ohos/capability/html/html_to_span.cpp",
    "$ace_root/adapter/ohos/capability/html/span_to_html.cpp",
    "$ace_root/frameworks/bridge/common/dom/dom_type.cpp",
    "$ace_root/frameworks/bridge/common/utils/utils.cpp",
    "$ace_root/frameworks/bridge/js_frontend/engine/common/js_constants.cpp",
    "$ace_root/frameworks/core/animation/animation_pub.cpp",
    "$ace_root/frameworks/core/common/card_scope.cpp",
    "$ace_root/frameworks/core/components/checkable/checkable_theme.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/form/form_model_static_ng.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/form/form_node.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/model/model_view_static_ng.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/shape/path_model_ng.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/shape/polygon_model_ng.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/shape/shape_container_pattern.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/shape/shape_model_ng.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/web/richtext_model_ng.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/web/web_model_static_ng.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/window_scene/root/root_scene_model.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/window_scene/screen/screen_model.cpp",
  ]
  sources += rebased_common_sources
  sources += rebased_generated_sources
  deps = [ "$ace_root/frameworks/core/components/theme:build_theme_code" ]

  external_deps = [ "libxml2:libxml2" ]

  deps += [
    ":copy_libxml2",
    ":copy_libxml2_unstripped",
  ]

  if (defined(web_components_support_for_test) &&
      web_components_support_for_test) {
    defines += [ "WEB_SUPPORTED" ]
  }

  if (defined(form_component_support_for_test) &&
      form_component_support_for_test) {
    defines += [ "FORM_SUPPORTED" ]
  }

  if (defined(component3d_component_support_for_test) &&
      component3d_component_support_for_test) {
    defines += [ "MODEL_COMPONENT_SUPPORTED" ]
  }

  if (defined(plugin_components_support_for_test) &&
      plugin_components_support_for_test) {
    defines += [ "PLUGIN_COMPONENT_SUPPORTED" ]
    sources += [
      "$ace_root/frameworks/core/components_ng/pattern/plugin/plugin_model_static_ng.cpp",
      "$ace_root/frameworks/core/components_ng/pattern/plugin/plugin_node.cpp",
    ]
  }

  if (defined(window_scene_support_for_test) && window_scene_support_for_test) {
    defines += [ "WINDOW_SCENE_SUPPORTED" ]
  }

  cflags_cc = [ "-Wno-unused-variable" ]
}
