# Copyright (c) 2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/test.gni")
import("//foundation/arkui/ace_engine/ace_config.gni")
import("//foundation/arkui/ace_engine/test/unittest/ace_unittest.gni")

group("unittest") {
  testonly = true
  deps = []
  if (!is_asan) {
    deps += [
      "base:base_unittest",
      "core:core_unittest",
      "interfaces:interfaces_unittest",
    ]
  }
}

config("ace_coverage_config") {
  cflags = []
  ldflags = []
  if (ace_engine_feature_enable_coverage) {
    cflags += [ "--coverage" ]
    ldflags += [ "--coverage" ]
  }
}

# ace unittest config
config("ace_unittest_config") {
  visibility = [ "./../../*" ]
  include_dirs = [
    "$ace_root",
    "$ace_root/frameworks",
    "$root_out_dir/arkui/framework",
  ]
  cflags_cc = []
  defines = []

  if (is_ohos_standard_system && !use_mingw_win && !use_mac && !use_linux) {
    cflags_cc += [
      "-Wno-thread-safety-attributes",
      "-Wno-thread-safety-analysis",
      "-Wno-non-c-typedef-for-linkage",
    ]
    defines += [ "OHOS_STANDARD_SYSTEM" ]
  }

  cflags = [
    "-fvisibility=hidden",
    "-fdata-sections",
    "-ffunction-sections",
  ]

  cflags_cc += [ "-fvisibility-inlines-hidden" ]
  ldflags = [ "-Wl,-gc-sections" ]

  if (ace_engine_feature_enable_coverage) {
    cflags += [ "--coverage" ]
    ldflags += [ "--coverage" ]
  }

  defines += [ "ACE_UNITTEST" ]

  if (ace_use_new_skia) {
    defines += [ "NEW_SKIA" ]
  }
}

# ace unittest log
ohos_source_set("ace_unittest_log") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [ "$ace_root/adapter/ohos/osal/log_wrapper.cpp" ]
  external_deps = [ "hilog:libhilog" ]
  configs = [ ":ace_unittest_config" ]
}

# ace unittest trace
ohos_source_set("ace_unittest_trace") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/adapter/ohos/osal/ace_trace.cpp",
    "$ace_root/frameworks/base/log/ace_trace.cpp",
  ]
  deps = [ "//third_party/bounds_checking_function:libsec_shared" ]
  external_deps = [ "hitrace:hitrace_meter" ]
  configs = [ ":ace_unittest_config" ]
}

# ace components base
ohos_source_set("ace_components_base") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/components_ng/base/frame_node.cpp",
    "$ace_root/frameworks/core/components_ng/base/geometry_node.cpp",
    "$ace_root/frameworks/core/components_ng/base/inspector.cpp",
    "$ace_root/frameworks/core/components_ng/base/modifier.cpp",
    "$ace_root/frameworks/core/components_ng/base/ui_node.cpp",
    "$ace_root/frameworks/core/components_ng/base/view_abstract.cpp",
    "$ace_root/frameworks/core/components_ng/base/view_stack_processor.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/custom/custom_node.cpp",
    "$ace_root/frameworks/core/components_ng/pattern/scroll/inner/scroll_bar.cpp",
  ]
  configs = [ ":ace_unittest_config" ]
}

# ace components event
ohos_source_set("ace_components_event") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/components_ng/event/click_event.cpp",
    "$ace_root/frameworks/core/components_ng/event/drag_event.cpp",
    "$ace_root/frameworks/core/components_ng/event/event_hub.cpp",
    "$ace_root/frameworks/core/components_ng/event/focus_hub.cpp",
    "$ace_root/frameworks/core/components_ng/event/gesture_event_hub.cpp",
    "$ace_root/frameworks/core/components_ng/event/input_event.cpp",
    "$ace_root/frameworks/core/components_ng/event/input_event_hub.cpp",
    "$ace_root/frameworks/core/components_ng/event/long_press_event.cpp",
    "$ace_root/frameworks/core/components_ng/event/pan_event.cpp",
    "$ace_root/frameworks/core/components_ng/event/scrollable_event.cpp",
    "$ace_root/frameworks/core/components_ng/event/state_style_manager.cpp",
    "$ace_root/frameworks/core/components_ng/event/touch_event.cpp",
  ]
  configs = [ ":ace_unittest_config" ]
}

# ace components gestures
ohos_source_set("ace_components_gestures") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/components_ng/gestures/gesture_group.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/gesture_referee.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/long_press_gesture.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/pan_gesture.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/pinch_gesture.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/click_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/exclusive_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/gesture_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/long_press_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/multi_fingers_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/pan_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/parallel_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/pinch_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/recognizer_group.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/rotation_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/sequenced_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/recognizers/swipe_recognizer.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/rotation_gesture.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/swipe_gesture.cpp",
    "$ace_root/frameworks/core/components_ng/gestures/tap_gesture.cpp",
  ]
  configs = [ ":ace_unittest_config" ]
}

# ace components layout
ohos_source_set("ace_components_layout") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/components_ng/layout/box_layout_algorithm.cpp",
    "$ace_root/frameworks/core/components_ng/layout/layout_property.cpp",
    "$ace_root/frameworks/core/components_ng/layout/layout_wrapper.cpp",
    "$ace_root/frameworks/core/components_ng/layout/layout_wrapper_builder.cpp",
    "$ace_root/frameworks/core/components_ng/layout/layout_wrapper_node.cpp",
    "$ace_root/frameworks/core/components_ng/manager/safe_area/safe_area_manager.cpp",
  ]
  configs = [ ":ace_unittest_config" ]
}

# ace components property
ohos_source_set("ace_components_property") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/components_ng/property/accessibility_property.cpp",
    "$ace_root/frameworks/core/components_ng/property/border_property.cpp",
    "$ace_root/frameworks/core/components_ng/property/calc_length.cpp",
    "$ace_root/frameworks/core/components_ng/property/gradient_property.cpp",
    "$ace_root/frameworks/core/components_ng/property/grid_property.cpp",
    "$ace_root/frameworks/core/components_ng/property/measure_utils.cpp",
    "$ace_root/frameworks/core/components_ng/property/property.cpp",
    "$ace_root/frameworks/core/components_ng/property/safe_area_insets.cpp",
  ]
  configs = [ ":ace_unittest_config" ]
}

# ace components syntax
ohos_source_set("ace_components_syntax") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/components_ng/syntax/for_each_model_ng.cpp",
    "$ace_root/frameworks/core/components_ng/syntax/for_each_node.cpp",
    "$ace_root/frameworks/core/components_ng/syntax/if_else_model_ng.cpp",
    "$ace_root/frameworks/core/components_ng/syntax/if_else_node.cpp",
    "$ace_root/frameworks/core/components_ng/syntax/lazy_for_each_node.cpp",
    "$ace_root/frameworks/core/components_ng/syntax/lazy_layout_wrapper_builder.cpp",
  ]
  configs = [ ":ace_unittest_config" ]
}

# ace components render
ohos_source_set("ace_components_render") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/components_ng/render/border_image_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/circle_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/debug_boundary_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/divider_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/drawing_prop_convertor.cpp",
    "$ace_root/frameworks/core/components_ng/render/ellipse_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/image_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/line_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/paint_wrapper.cpp",
    "$ace_root/frameworks/core/components_ng/render/polygon_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/rect_painter.cpp",
    "$ace_root/frameworks/core/components_ng/render/render_context.cpp",
    "$ace_root/frameworks/core/components_ng/render/render_property.cpp",
    "$ace_root/frameworks/core/components_ng/render/shape_painter.cpp",
  ]
  configs = [ ":ace_unittest_config" ]
}

# ace components extra - special
ohos_source_set("ace_components_extra") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/common/clipboard/clipboard_proxy.cpp",
    "$ace_root/frameworks/core/common/container_scope.cpp",
    "$ace_root/frameworks/core/components/common/layout/grid_column_info.cpp",
    "$ace_root/frameworks/core/components/common/layout/grid_container_info.cpp",
    "$ace_root/frameworks/core/components/common/layout/grid_system_manager.cpp",
    "$ace_root/frameworks/core/components/common/layout/screen_system_manager.cpp",
    "$ace_root/frameworks/core/components/common/properties/alignment.cpp",
    "$ace_root/frameworks/core/components/common/properties/border_image.cpp",
    "$ace_root/frameworks/core/components/common/properties/color.cpp",
    "$ace_root/frameworks/core/components/common/properties/decoration.cpp",
    "$ace_root/frameworks/core/components/common/properties/shadow_config.cpp",
    "$ace_root/frameworks/core/components_ng/test/pattern/image/mock_icon_theme.cpp",
    "$ace_root/frameworks/core/components_v2/inspector/inspector_constants.cpp",
    "$ace_root/frameworks/core/event/back_end_event_manager.cpp",
    "$ace_root/frameworks/core/gestures/velocity_tracker.cpp",
    "$ace_root/frameworks/core/pipeline/base/constants.cpp",
  ]

  configs = [ ":ace_unittest_config" ]
}

# ace base
ohos_source_set("ace_base") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/base/geometry/animatable_dimension.cpp",
    "$ace_root/frameworks/base/geometry/dimension.cpp",
    "$ace_root/frameworks/base/geometry/least_square_impl.cpp",
    "$ace_root/frameworks/base/geometry/matrix3.cpp",
    "$ace_root/frameworks/base/geometry/matrix4.cpp",
    "$ace_root/frameworks/base/json/json_util.cpp",
    "$ace_root/frameworks/base/subwindow/subwindow_manager.cpp",
    "$ace_root/frameworks/base/utils/base_id.cpp",
    "$ace_root/frameworks/base/utils/string_expression.cpp",
    "$ace_root/frameworks/base/utils/string_utils.cpp",
    "$ace_root/frameworks/base/utils/time_util.cpp",
  ]

  deps = [
    ":ace_unittest_trace",
    "$cjson_root:cjson",
  ]

  configs = [ ":ace_unittest_config" ]
}

# ace core animation
ohos_source_set("ace_core_animation") {
  testonly = true
  subsystem_name = ace_engine_subsystem
  part_name = ace_engine_part
  sources = [
    "$ace_root/frameworks/core/animation/anticipate_curve.cpp",
    "$ace_root/frameworks/core/animation/chain_animation.cpp",
    "$ace_root/frameworks/core/animation/cubic_curve.cpp",
    "$ace_root/frameworks/core/animation/curves.cpp",
    "$ace_root/frameworks/core/animation/scroll_motion.cpp",
    "$ace_root/frameworks/core/animation/spring_model.cpp",
    "$ace_root/frameworks/core/animation/spring_motion.cpp",
    "$ace_root/frameworks/core/animation/test/mock/mock_animator.cpp",
    "$ace_root/frameworks/core/animation/test/mock/mock_scheduler.cpp",
    "$ace_root/frameworks/core/components_ng/animation/geometry_transition.cpp",
  ]

  configs = [ ":ace_unittest_config" ]
}

ohos_source_set("ace_engine_unittest_flutter_deps") {
  testonly = true
  sources = []
  public_configs = []
  public_deps = []
  if (ace_use_new_skia) {
    sources += [ "$ace_root/test/mock/core/common/mock_flutter_window.cpp" ]
    public_deps += [
      "$ace_flutter_engine_root/libtxt:thirdparty_lib_txt_ohos",
      "$skia_root_new:skia_ohos",
    ]
    cflags_cc = [ "-Wno-thread-safety-attributes" ]
    external_deps = [ "eventhandler:libeventhandler" ]
    public_configs += [ "$ace_flutter_engine_root:flutter_config" ]
  } else {
    public_deps += [
      "$ace_flutter_engine_root:third_party_flutter_engine_ohos",
      "$ace_flutter_engine_root/skia:ace_skia_ohos",
    ]
  }
}

source_set("ace_components_mock") {
  testonly = true
  sources = [
    "$ace_root/frameworks/base/test/mock/mock_drag_window.cpp",
    "$ace_root/frameworks/base/test/mock/mock_pixel_map.cpp",
    "$ace_root/frameworks/base/test/mock/mock_ressched_report.cpp",
    "$ace_root/frameworks/base/test/mock/mock_socperf_client_impl.cpp",
    "$ace_root/frameworks/base/test/mock/mock_system_properties.cpp",
    "$ace_root/frameworks/core/common/test/mock/mock_ace_application_info.cpp",
    "$ace_root/frameworks/core/components_ng/test/event/scrollable_event/mock_scrollable.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/base/mock_localization.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/image_provider/mock_image_cache.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/image_provider/mock_image_loading_context.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/image_provider/mock_image_source_info.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/render/mock_animation_utils.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/render/mock_modifier_adapter.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/render/mock_render_context_creator.cpp",
    "$ace_root/frameworks/core/components_ng/test/mock/render/mock_render_surface_creator.cpp",
    "$ace_root/frameworks/core/components_ng/test/pattern/text/mock/mock_text_layout_adapter.cpp",
    "$ace_root/frameworks/core/pipeline_ng/test/mock/mock_element_register.cpp",
    "$ace_root/frameworks/core/pipeline_ng/test/mock/mock_pipeline_base.cpp",
    "$ace_root/test/mock/base/mock_frame_trace_adapter.cpp",
    "$ace_root/test/mock/core/common/mock_ace_engine.cpp",
    "$ace_root/test/mock/core/common/mock_container.cpp",
    "$ace_root/test/mock/core/render/mock_font_collection.cpp",
    "$ace_root/test/mock/core/render/mock_paragraph.cpp",
  ]
  deps = [ "//third_party/googletest:gmock_main" ]
  configs += [ ":ace_unittest_config" ]
}
